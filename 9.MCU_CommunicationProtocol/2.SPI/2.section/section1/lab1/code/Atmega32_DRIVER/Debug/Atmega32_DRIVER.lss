
Atmega32_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000025e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800060  00800060  000002d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c3f  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007fb  00000000  00000000  0000104f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000714  00000000  00000000  0000184a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  00001f60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052a  00000000  00000000  000021a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000752  00000000  00000000  000026d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002e24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_2>
   c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e5       	ldi	r30, 0x5E	; 94
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 37       	cpi	r26, 0x73	; 115
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c6 00 	call	0x18c	; 0x18c <main>
  8a:	0c 94 2d 01 	jmp	0x25a	; 0x25a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
	}
}

// Interrupt service routine for INT0
ISR (INT0_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
	if (EXTI0_CallBack != NULL)
  b4:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <EXTI0_CallBack>
  b8:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <EXTI0_CallBack+0x1>
  bc:	30 97       	sbiw	r30, 0x00	; 0
  be:	09 f0       	breq	.+2      	; 0xc2 <__vector_1+0x30>
	{
		EXTI0_CallBack();
  c0:	09 95       	icall
	}
}
  c2:	ff 91       	pop	r31
  c4:	ef 91       	pop	r30
  c6:	bf 91       	pop	r27
  c8:	af 91       	pop	r26
  ca:	9f 91       	pop	r25
  cc:	8f 91       	pop	r24
  ce:	7f 91       	pop	r23
  d0:	6f 91       	pop	r22
  d2:	5f 91       	pop	r21
  d4:	4f 91       	pop	r20
  d6:	3f 91       	pop	r19
  d8:	2f 91       	pop	r18
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <__vector_2>:
// Interrupt service routine for INT1
ISR (INT1_vect)
{
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	2f 93       	push	r18
  f0:	3f 93       	push	r19
  f2:	4f 93       	push	r20
  f4:	5f 93       	push	r21
  f6:	6f 93       	push	r22
  f8:	7f 93       	push	r23
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
  fe:	af 93       	push	r26
 100:	bf 93       	push	r27
 102:	ef 93       	push	r30
 104:	ff 93       	push	r31
	if (EXTI1_CallBack != NULL)
 106:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <EXTI1_CallBack>
 10a:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <EXTI1_CallBack+0x1>
 10e:	30 97       	sbiw	r30, 0x00	; 0
 110:	09 f0       	breq	.+2      	; 0x114 <__vector_2+0x30>
	{
		EXTI1_CallBack();
 112:	09 95       	icall
	}
}
 114:	ff 91       	pop	r31
 116:	ef 91       	pop	r30
 118:	bf 91       	pop	r27
 11a:	af 91       	pop	r26
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	7f 91       	pop	r23
 122:	6f 91       	pop	r22
 124:	5f 91       	pop	r21
 126:	4f 91       	pop	r20
 128:	3f 91       	pop	r19
 12a:	2f 91       	pop	r18
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <__vector_3>:

// Interrupt service routine for INT2
ISR (INT2_vect)
{
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	2f 93       	push	r18
 142:	3f 93       	push	r19
 144:	4f 93       	push	r20
 146:	5f 93       	push	r21
 148:	6f 93       	push	r22
 14a:	7f 93       	push	r23
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	af 93       	push	r26
 152:	bf 93       	push	r27
 154:	ef 93       	push	r30
 156:	ff 93       	push	r31
	if (EXTI2_CallBack != NULL)
 158:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <EXTI2_CallBack>
 15c:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <EXTI2_CallBack+0x1>
 160:	30 97       	sbiw	r30, 0x00	; 0
 162:	09 f0       	breq	.+2      	; 0x166 <__vector_3+0x30>
	{
		EXTI2_CallBack();
 164:	09 95       	icall
	}
 166:	ff 91       	pop	r31
 168:	ef 91       	pop	r30
 16a:	bf 91       	pop	r27
 16c:	af 91       	pop	r26
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	7f 91       	pop	r23
 174:	6f 91       	pop	r22
 176:	5f 91       	pop	r21
 178:	4f 91       	pop	r20
 17a:	3f 91       	pop	r19
 17c:	2f 91       	pop	r18
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <Enable_GI>:

void Enable_GI(void)
{
	//SET_BIT(SREG,7);
	//SREG |= 1<<7;
	sei();
 188:	78 94       	sei
 18a:	08 95       	ret

0000018c <main>:
unsigned char ch;

unsigned char data;
int main(void)
{
	SPI.SPI_Mode = SPI_MODE_SLAVE;
 18c:	e8 e6       	ldi	r30, 0x68	; 104
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	13 82       	std	Z+3, r1	; 0x03
	SPI.SPI_DataOrder = FRAME_FORMAT_MSB_FIRST;
 192:	15 82       	std	Z+5, r1	; 0x05
	SPI.SPI_Prescaler = BAUDERATE_PRESCALER_16;
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	82 83       	std	Z+2, r24	; 0x02
	SPI.SPI_DoupleSpeed = CLK_SPEED_LOW;
 198:	14 82       	std	Z+4, r1	; 0x04
	SPI.SPI_phase = CLK_POLARITY_RISING_FALLING;
 19a:	11 82       	std	Z+1, r1	; 0x01
	SPI.SPI_Polarity = CLK_PHASE_SAMPLE_SETUP;
 19c:	10 82       	st	Z, r1
	SPI.SPI_Interrupt = IRQ_DISABLE;
 19e:	16 82       	std	Z+6, r1	; 0x06
	SPI_Init(&SPI);
 1a0:	cf 01       	movw	r24, r30
 1a2:	0e 94 df 00 	call	0x1be	; 0x1be <SPI_Init>
	
	DDRA = 0xFF;
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	8a bb       	out	0x1a, r24	; 26
	while(1)
	{
		
		SPI_ReceiveData(&SPI,&data);
 1aa:	61 e7       	ldi	r22, 0x71	; 113
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	88 e6       	ldi	r24, 0x68	; 104
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 22 01 	call	0x244	; 0x244 <SPI_ReceiveData>
		PORTA = data;
 1b6:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <data>
 1ba:	8b bb       	out	0x1b, r24	; 27
 1bc:	f6 cf       	rjmp	.-20     	; 0x1aa <main+0x1e>

000001be <SPI_Init>:
		SPDR = data;
		while(!(SPSR & 1<<7));
		ret = E_OK;
	}
	return ret;
}
 1be:	1f 93       	push	r17
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	fc 01       	movw	r30, r24
 1c6:	00 97       	sbiw	r24, 0x00	; 0
 1c8:	c1 f1       	breq	.+112    	; 0x23a <SPI_Init+0x7c>
 1ca:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_end+0x1>
 1ce:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_end>
 1d2:	83 81       	ldd	r24, Z+3	; 0x03
 1d4:	18 2f       	mov	r17, r24
 1d6:	10 64       	ori	r17, 0x40	; 64
 1d8:	80 31       	cpi	r24, 0x10	; 16
 1da:	49 f4       	brne	.+18     	; 0x1ee <SPI_Init+0x30>
 1dc:	97 b3       	in	r25, 0x17	; 23
 1de:	90 6b       	ori	r25, 0xB0	; 176
 1e0:	97 bb       	out	0x17, r25	; 23
 1e2:	97 b3       	in	r25, 0x17	; 23
 1e4:	9f 7b       	andi	r25, 0xBF	; 191
 1e6:	97 bb       	out	0x17, r25	; 23
 1e8:	18 2f       	mov	r17, r24
 1ea:	10 65       	ori	r17, 0x50	; 80
 1ec:	08 c0       	rjmp	.+16     	; 0x1fe <SPI_Init+0x40>
 1ee:	81 11       	cpse	r24, r1
 1f0:	06 c0       	rjmp	.+12     	; 0x1fe <SPI_Init+0x40>
 1f2:	87 b3       	in	r24, 0x17	; 23
 1f4:	80 64       	ori	r24, 0x40	; 64
 1f6:	87 bb       	out	0x17, r24	; 23
 1f8:	87 b3       	in	r24, 0x17	; 23
 1fa:	8f 74       	andi	r24, 0x4F	; 79
 1fc:	87 bb       	out	0x17, r24	; 23
 1fe:	80 81       	ld	r24, Z
 200:	18 2b       	or	r17, r24
 202:	81 81       	ldd	r24, Z+1	; 0x01
 204:	18 2b       	or	r17, r24
 206:	84 81       	ldd	r24, Z+4	; 0x04
 208:	81 11       	cpse	r24, r1
 20a:	03 c0       	rjmp	.+6      	; 0x212 <SPI_Init+0x54>
 20c:	82 81       	ldd	r24, Z+2	; 0x02
 20e:	18 2b       	or	r17, r24
 210:	05 c0       	rjmp	.+10     	; 0x21c <SPI_Init+0x5e>
 212:	82 81       	ldd	r24, Z+2	; 0x02
 214:	18 2b       	or	r17, r24
 216:	8e b1       	in	r24, 0x0e	; 14
 218:	81 60       	ori	r24, 0x01	; 1
 21a:	8e b9       	out	0x0e, r24	; 14
 21c:	85 81       	ldd	r24, Z+5	; 0x05
 21e:	18 2b       	or	r17, r24
 220:	86 81       	ldd	r24, Z+6	; 0x06
 222:	80 38       	cpi	r24, 0x80	; 128
 224:	31 f4       	brne	.+12     	; 0x232 <SPI_Init+0x74>
 226:	ef 01       	movw	r28, r30
 228:	0e 94 c4 00 	call	0x188	; 0x188 <Enable_GI>
 22c:	8e 81       	ldd	r24, Y+6	; 0x06
 22e:	18 2b       	or	r17, r24
 230:	01 c0       	rjmp	.+2      	; 0x234 <SPI_Init+0x76>
 232:	18 2b       	or	r17, r24
 234:	1d b9       	out	0x0d, r17	; 13
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	01 c0       	rjmp	.+2      	; 0x23c <SPI_Init+0x7e>
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	1f 91       	pop	r17
 242:	08 95       	ret

00000244 <SPI_ReceiveData>:

ReturnType SPI_ReceiveData(const SPI_Config_t* SPI_Config,unsigned char *data)
{
	ReturnType ret ;
	if (NULL == SPI_Config)
 244:	89 2b       	or	r24, r25
 246:	39 f0       	breq	.+14     	; 0x256 <SPI_ReceiveData+0x12>
	{
		ret = E_NOT_OK;
	}
	else
	{
		while(!(SPSR & 1<<7));
 248:	77 9b       	sbis	0x0e, 7	; 14
 24a:	fe cf       	rjmp	.-4      	; 0x248 <SPI_ReceiveData+0x4>
		*data = SPDR;
 24c:	8f b1       	in	r24, 0x0f	; 15
 24e:	fb 01       	movw	r30, r22
 250:	80 83       	st	Z, r24
		ret = E_OK;
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	08 95       	ret
ReturnType SPI_ReceiveData(const SPI_Config_t* SPI_Config,unsigned char *data)
{
	ReturnType ret ;
	if (NULL == SPI_Config)
	{
		ret = E_NOT_OK;
 256:	80 e0       	ldi	r24, 0x00	; 0
		while(!(SPSR & 1<<7));
		*data = SPDR;
		ret = E_OK;
	}
	return ret;
}
 258:	08 95       	ret

0000025a <_exit>:
 25a:	f8 94       	cli

0000025c <__stop_program>:
 25c:	ff cf       	rjmp	.-2      	; 0x25c <__stop_program>
