
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e80  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000fb0  08000fb0  00010fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fc8  08000fc8  00010fd0  2**0
                  CONTENTS
  4 .ARM          00000000  08000fc8  08000fc8  00010fd0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fc8  08000fd0  00010fd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fc8  08000fc8  00010fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fcc  08000fcc  00010fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010fd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08000fd0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000fd0  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010fd0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010ff9  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001d20  00000000  00000000  0001103c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000008eb  00000000  00000000  00012d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00000d78  00000000  00000000  00013647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000230  00000000  00000000  000143c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000001c8  00000000  00000000  000145f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00000d27  00000000  00000000  000147b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000011ee  00000000  00000000  000154df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000069dc  00000000  00000000  000166cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000006fc  00000000  00000000  0001d0ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f98 	.word	0x08000f98

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000f98 	.word	0x08000f98

08000170 <main>:
static void Clock_Init(void);
static void USART1_CallBack(void);
static void SPI1_CallBack(IRQ_SOURCE IRQ_src);

int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b08c      	sub	sp, #48	; 0x30
 8000174:	af00      	add	r7, sp, #0
	/* Initialization */
		Clock_Init();
 8000176:	f000 f845 	bl	8000204 <Clock_Init>

		/* Configuration of USART1 */
		USART_CONFIG USART1_Config;

		USART1_Config.USART_BAUDRATE = UART_BaudRate_9600;
 800017a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800017e:	623b      	str	r3, [r7, #32]
		USART1_Config.FLOW_CONTROL = UART_HwFlowCtl_NONE;
 8000180:	2300      	movs	r3, #0
 8000182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		USART1_Config.IQR_ENABLE = UART_IRQ_Enable_RXNEIE;
 8000186:	2320      	movs	r3, #32
 8000188:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		USART1_Config.IRQ_CallBack = USART1_CallBack;
 800018c:	4b19      	ldr	r3, [pc, #100]	; (80001f4 <main+0x84>)
 800018e:	62fb      	str	r3, [r7, #44]	; 0x2c
		USART1_Config.PARITY = UART_NOParity;
 8000190:	2300      	movs	r3, #0
 8000192:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		USART1_Config.DATA_LENGTH = UART_DATA_Length_8B;
 8000196:	2300      	movs	r3, #0
 8000198:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		USART1_Config.STOPBITS = UART_1StopBits;
 800019c:	2300      	movs	r3, #0
 800019e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		USART1_Config.USART_MODE = UART_MODE_TX_RX;
 80001a2:	230c      	movs	r3, #12
 80001a4:	773b      	strb	r3, [r7, #28]

		UART_Init(USART1, &USART1_Config);
 80001a6:	f107 031c 	add.w	r3, r7, #28
 80001aa:	4619      	mov	r1, r3
 80001ac:	4812      	ldr	r0, [pc, #72]	; (80001f8 <main+0x88>)
 80001ae:	f000 fd5f 	bl	8000c70 <UART_Init>
		UART_GPIO_Set_Pins(USART1);
 80001b2:	4811      	ldr	r0, [pc, #68]	; (80001f8 <main+0x88>)
 80001b4:	f000 fe1e 	bl	8000df4 <UART_GPIO_Set_Pins>

		/* Configuration of SPI1 */
		SPI_Config_t SPI1_Config;

		/* Common Configuration */
		SPI1_Config.BaudRate_Prescaler = SPI_BAUDRATEPRESCALER_8;
 80001b8:	2310      	movs	r3, #16
 80001ba:	827b      	strh	r3, [r7, #18]
		SPI1_Config.CLKPhase = SPI_CLKPHASE_SECONDEDGE;
 80001bc:	2301      	movs	r3, #1
 80001be:	81fb      	strh	r3, [r7, #14]
		SPI1_Config.CLKPolarity = SPI_CLKPOLARITY_HIGH_IDLE;
 80001c0:	2302      	movs	r3, #2
 80001c2:	81bb      	strh	r3, [r7, #12]
		SPI1_Config.Data_Order = SPI_MSB_TRANSMITTED_FIRST;
 80001c4:	2300      	movs	r3, #0
 80001c6:	813b      	strh	r3, [r7, #8]
		SPI1_Config.Data_Size = SPI_8BIT_DATASIZE;
 80001c8:	2300      	movs	r3, #0
 80001ca:	817b      	strh	r3, [r7, #10]
		SPI1_Config.Communication_Mode = SPI_DIRECTION_2LINES;
 80001cc:	2300      	movs	r3, #0
 80001ce:	80fb      	strh	r3, [r7, #6]
		/* Force the slave select (High) idle mode */
		GPIO_WRITE_Pin(GPIOA, GPIO_PIN_4, GPIO_HIGH);
	#endif

	#ifdef MCU_Act_As_Slave
		SPI1_Config.SPI_Mode = SPI_SLAVE_MODE;
 80001d0:	2300      	movs	r3, #0
 80001d2:	80bb      	strh	r3, [r7, #4]
		SPI1_Config.IRQ_Enable = SPI_IRQ_Enable_RXNEIE;
 80001d4:	2340      	movs	r3, #64	; 0x40
 80001d6:	82bb      	strh	r3, [r7, #20]
		SPI1_Config.NSS = SPI_NSS_Hard_Slave;
 80001d8:	2300      	movs	r3, #0
 80001da:	823b      	strh	r3, [r7, #16]
		SPI1_Config.IRQ_CallBack = SPI1_CallBack;
 80001dc:	4b07      	ldr	r3, [pc, #28]	; (80001fc <main+0x8c>)
 80001de:	61bb      	str	r3, [r7, #24]
	#endif
		SPI_Init(SPI1, &SPI1_Config);
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	4619      	mov	r1, r3
 80001e4:	4806      	ldr	r0, [pc, #24]	; (8000200 <main+0x90>)
 80001e6:	f000 fb49 	bl	800087c <SPI_Init>
		SPI_GPIO_Set_Pins(SPI1);
 80001ea:	4805      	ldr	r0, [pc, #20]	; (8000200 <main+0x90>)
 80001ec:	f000 fbd4 	bl	8000998 <SPI_GPIO_Set_Pins>

		/* Loop For Ever */
		while(1){}
 80001f0:	e7fe      	b.n	80001f0 <main+0x80>
 80001f2:	bf00      	nop
 80001f4:	08000239 	.word	0x08000239
 80001f8:	40013800 	.word	0x40013800
 80001fc:	08000245 	.word	0x08000245
 8000200:	40013000 	.word	0x40013000

08000204 <Clock_Init>:
	return 0;
}
/* ======== clock Initialize definition ======= */
static void Clock_Init(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	/* Enable clock GPIOA */
	RCC_GPIOA_CLK_EN();
 8000208:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <Clock_Init+0x30>)
 800020a:	699b      	ldr	r3, [r3, #24]
 800020c:	4a09      	ldr	r2, [pc, #36]	; (8000234 <Clock_Init+0x30>)
 800020e:	f043 0304 	orr.w	r3, r3, #4
 8000212:	6193      	str	r3, [r2, #24]

	/* Enable clock GPIOB */
	RCC_GPIOB_CLK_EN();
 8000214:	4b07      	ldr	r3, [pc, #28]	; (8000234 <Clock_Init+0x30>)
 8000216:	699b      	ldr	r3, [r3, #24]
 8000218:	4a06      	ldr	r2, [pc, #24]	; (8000234 <Clock_Init+0x30>)
 800021a:	f043 0308 	orr.w	r3, r3, #8
 800021e:	6193      	str	r3, [r2, #24]

	/* Enable Clock For AFIO */
	RCC_AFIO_CLK_EN();
 8000220:	4b04      	ldr	r3, [pc, #16]	; (8000234 <Clock_Init+0x30>)
 8000222:	699b      	ldr	r3, [r3, #24]
 8000224:	4a03      	ldr	r2, [pc, #12]	; (8000234 <Clock_Init+0x30>)
 8000226:	f043 0301 	orr.w	r3, r3, #1
 800022a:	6193      	str	r3, [r2, #24]
}
 800022c:	bf00      	nop
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	40021000 	.word	0x40021000

08000238 <USART1_CallBack>:



static void USART1_CallBack(void)
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
	SPI_TX_RX(SPI1, &data, SPIenable);

	/* Slave Selection (High) idle mode */
	GPIO_WRITE_Pin(GPIOA, GPIO_PIN_4, GPIO_HIGH);
#endif
}
 800023c:	bf00      	nop
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr

08000244 <SPI1_CallBack>:

static void SPI1_CallBack(IRQ_SOURCE IRQ_src)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	7138      	strb	r0, [r7, #4]
#ifdef MCU_Act_As_Slave
	/* If RX Buffer Not Empty Interrupt */
	if(IRQ_src.RXNE)
 800024c:	793b      	ldrb	r3, [r7, #4]
 800024e:	f003 0302 	and.w	r3, r3, #2
 8000252:	b2db      	uxtb	r3, r3
 8000254:	2b00      	cmp	r3, #0
 8000256:	d009      	beq.n	800026c <SPI1_CallBack+0x28>
	{
		/* Receive data */
		SPI_ReceiveData(SPI1, &data, SPIenable);
 8000258:	2201      	movs	r2, #1
 800025a:	4906      	ldr	r1, [pc, #24]	; (8000274 <SPI1_CallBack+0x30>)
 800025c:	4806      	ldr	r0, [pc, #24]	; (8000278 <SPI1_CallBack+0x34>)
 800025e:	f000 fc8f 	bl	8000b80 <SPI_ReceiveData>

		/* Send the Received data to the terminal to see it */
		UART_SendData(USART1, &data, enable);
 8000262:	2201      	movs	r2, #1
 8000264:	4903      	ldr	r1, [pc, #12]	; (8000274 <SPI1_CallBack+0x30>)
 8000266:	4805      	ldr	r0, [pc, #20]	; (800027c <SPI1_CallBack+0x38>)
 8000268:	f000 fe2a 	bl	8000ec0 <UART_SendData>
	}
#endif
}
 800026c:	bf00      	nop
 800026e:	3708      	adds	r7, #8
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	2000001c 	.word	0x2000001c
 8000278:	40013000 	.word	0x40013000
 800027c:	40013800 	.word	0x40013800

08000280 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000280:	480d      	ldr	r0, [pc, #52]	; (80002b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000282:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000284:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000288:	480c      	ldr	r0, [pc, #48]	; (80002bc <LoopForever+0x6>)
  ldr r1, =_edata
 800028a:	490d      	ldr	r1, [pc, #52]	; (80002c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800028c:	4a0d      	ldr	r2, [pc, #52]	; (80002c4 <LoopForever+0xe>)
  movs r3, #0
 800028e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000290:	e002      	b.n	8000298 <LoopCopyDataInit>

08000292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000296:	3304      	adds	r3, #4

08000298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800029a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800029c:	d3f9      	bcc.n	8000292 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800029e:	4a0a      	ldr	r2, [pc, #40]	; (80002c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a0:	4c0a      	ldr	r4, [pc, #40]	; (80002cc <LoopForever+0x16>)
  movs r3, #0
 80002a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a4:	e001      	b.n	80002aa <LoopFillZerobss>

080002a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a8:	3204      	adds	r2, #4

080002aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002ac:	d3fb      	bcc.n	80002a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ae:	f000 fe4f 	bl	8000f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002b2:	f7ff ff5d 	bl	8000170 <main>

080002b6 <LoopForever>:

LoopForever:
  b LoopForever
 80002b6:	e7fe      	b.n	80002b6 <LoopForever>
  ldr   r0, =_estack
 80002b8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002c4:	08000fd0 	.word	0x08000fd0
  ldr r2, =_sbss
 80002c8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002cc:	20000068 	.word	0x20000068

080002d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d0:	e7fe      	b.n	80002d0 <ADC1_2_IRQHandler>
	...

080002d4 <EXTI0_IRQHandler>:
		break;
	}
}

void EXTI0_IRQHandler (void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit Pending register
	SET_BIT(EXTI->PR,EXTI0);
 80002d8:	4b05      	ldr	r3, [pc, #20]	; (80002f0 <EXTI0_IRQHandler+0x1c>)
 80002da:	695b      	ldr	r3, [r3, #20]
 80002dc:	4a04      	ldr	r2, [pc, #16]	; (80002f0 <EXTI0_IRQHandler+0x1c>)
 80002de:	f043 0301 	orr.w	r3, r3, #1
 80002e2:	6153      	str	r3, [r2, #20]
	//EXTI->PR |= 1<<0;

	//IRQ callback
	call_back[EXTI0]();
 80002e4:	4b03      	ldr	r3, [pc, #12]	; (80002f4 <EXTI0_IRQHandler+0x20>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4798      	blx	r3
}
 80002ea:	bf00      	nop
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	40010400 	.word	0x40010400
 80002f4:	20000020 	.word	0x20000020

080002f8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit Pending register
	SET_BIT(EXTI->PR,EXTI1);
 80002fc:	4b05      	ldr	r3, [pc, #20]	; (8000314 <EXTI1_IRQHandler+0x1c>)
 80002fe:	695b      	ldr	r3, [r3, #20]
 8000300:	4a04      	ldr	r2, [pc, #16]	; (8000314 <EXTI1_IRQHandler+0x1c>)
 8000302:	f043 0302 	orr.w	r3, r3, #2
 8000306:	6153      	str	r3, [r2, #20]
	//EXTI->PR |= 1<<1;

	//IRQ callback
	call_back[EXTI1]();
 8000308:	4b03      	ldr	r3, [pc, #12]	; (8000318 <EXTI1_IRQHandler+0x20>)
 800030a:	685b      	ldr	r3, [r3, #4]
 800030c:	4798      	blx	r3
}
 800030e:	bf00      	nop
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	40010400 	.word	0x40010400
 8000318:	20000020 	.word	0x20000020

0800031c <EXTI2_IRQHandler>:
void EXTI2_IRQHandler (void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit Pending register
	SET_BIT(EXTI->PR,EXTI2);
 8000320:	4b05      	ldr	r3, [pc, #20]	; (8000338 <EXTI2_IRQHandler+0x1c>)
 8000322:	695b      	ldr	r3, [r3, #20]
 8000324:	4a04      	ldr	r2, [pc, #16]	; (8000338 <EXTI2_IRQHandler+0x1c>)
 8000326:	f043 0304 	orr.w	r3, r3, #4
 800032a:	6153      	str	r3, [r2, #20]
	//EXTI->PR |= 1<<2;

	//IRQ callback
	call_back[EXTI2]();
 800032c:	4b03      	ldr	r3, [pc, #12]	; (800033c <EXTI2_IRQHandler+0x20>)
 800032e:	689b      	ldr	r3, [r3, #8]
 8000330:	4798      	blx	r3
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	40010400 	.word	0x40010400
 800033c:	20000020 	.word	0x20000020

08000340 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler (void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit Pending register
	SET_BIT(EXTI->PR,EXTI3);
 8000344:	4b05      	ldr	r3, [pc, #20]	; (800035c <EXTI3_IRQHandler+0x1c>)
 8000346:	695b      	ldr	r3, [r3, #20]
 8000348:	4a04      	ldr	r2, [pc, #16]	; (800035c <EXTI3_IRQHandler+0x1c>)
 800034a:	f043 0308 	orr.w	r3, r3, #8
 800034e:	6153      	str	r3, [r2, #20]
	//EXTI->PR |= 1<<3;

	//IRQ callback
	call_back[EXTI3]();
 8000350:	4b03      	ldr	r3, [pc, #12]	; (8000360 <EXTI3_IRQHandler+0x20>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	4798      	blx	r3
}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40010400 	.word	0x40010400
 8000360:	20000020 	.word	0x20000020

08000364 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler (void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit Pending register
	SET_BIT(EXTI->PR,EXTI4);
 8000368:	4b05      	ldr	r3, [pc, #20]	; (8000380 <EXTI4_IRQHandler+0x1c>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	4a04      	ldr	r2, [pc, #16]	; (8000380 <EXTI4_IRQHandler+0x1c>)
 800036e:	f043 0310 	orr.w	r3, r3, #16
 8000372:	6153      	str	r3, [r2, #20]
	//EXTI->PR |= 1<<4;

	//IRQ callback
	call_back[EXTI4]();
 8000374:	4b03      	ldr	r3, [pc, #12]	; (8000384 <EXTI4_IRQHandler+0x20>)
 8000376:	691b      	ldr	r3, [r3, #16]
 8000378:	4798      	blx	r3
}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	40010400 	.word	0x40010400
 8000384:	20000020 	.word	0x20000020

08000388 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler (void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5){SET_BIT(EXTI->PR,EXTI5);call_back[EXTI5]();}
 800038c:	4b26      	ldr	r3, [pc, #152]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 800038e:	695b      	ldr	r3, [r3, #20]
 8000390:	f003 0320 	and.w	r3, r3, #32
 8000394:	2b00      	cmp	r3, #0
 8000396:	d008      	beq.n	80003aa <EXTI9_5_IRQHandler+0x22>
 8000398:	4b23      	ldr	r3, [pc, #140]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 800039a:	695b      	ldr	r3, [r3, #20]
 800039c:	4a22      	ldr	r2, [pc, #136]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 800039e:	f043 0320 	orr.w	r3, r3, #32
 80003a2:	6153      	str	r3, [r2, #20]
 80003a4:	4b21      	ldr	r3, [pc, #132]	; (800042c <EXTI9_5_IRQHandler+0xa4>)
 80003a6:	695b      	ldr	r3, [r3, #20]
 80003a8:	4798      	blx	r3
	if(EXTI->PR & 1<<6){SET_BIT(EXTI->PR,EXTI6);call_back[EXTI6]();}
 80003aa:	4b1f      	ldr	r3, [pc, #124]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d008      	beq.n	80003c8 <EXTI9_5_IRQHandler+0x40>
 80003b6:	4b1c      	ldr	r3, [pc, #112]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a1b      	ldr	r2, [pc, #108]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003c0:	6153      	str	r3, [r2, #20]
 80003c2:	4b1a      	ldr	r3, [pc, #104]	; (800042c <EXTI9_5_IRQHandler+0xa4>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	4798      	blx	r3
	if(EXTI->PR & 1<<7){SET_BIT(EXTI->PR,EXTI7);call_back[EXTI7]();}
 80003c8:	4b17      	ldr	r3, [pc, #92]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003ca:	695b      	ldr	r3, [r3, #20]
 80003cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d008      	beq.n	80003e6 <EXTI9_5_IRQHandler+0x5e>
 80003d4:	4b14      	ldr	r3, [pc, #80]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	4a13      	ldr	r2, [pc, #76]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003de:	6153      	str	r3, [r2, #20]
 80003e0:	4b12      	ldr	r3, [pc, #72]	; (800042c <EXTI9_5_IRQHandler+0xa4>)
 80003e2:	69db      	ldr	r3, [r3, #28]
 80003e4:	4798      	blx	r3
	if(EXTI->PR & 1<<8){SET_BIT(EXTI->PR,EXTI8);call_back[EXTI8]();}
 80003e6:	4b10      	ldr	r3, [pc, #64]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d008      	beq.n	8000404 <EXTI9_5_IRQHandler+0x7c>
 80003f2:	4b0d      	ldr	r3, [pc, #52]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	4a0c      	ldr	r2, [pc, #48]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003fc:	6153      	str	r3, [r2, #20]
 80003fe:	4b0b      	ldr	r3, [pc, #44]	; (800042c <EXTI9_5_IRQHandler+0xa4>)
 8000400:	6a1b      	ldr	r3, [r3, #32]
 8000402:	4798      	blx	r3
	if(EXTI->PR & 1<<9){SET_BIT(EXTI->PR,EXTI9);call_back[EXTI9]();}
 8000404:	4b08      	ldr	r3, [pc, #32]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 8000406:	695b      	ldr	r3, [r3, #20]
 8000408:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800040c:	2b00      	cmp	r3, #0
 800040e:	d008      	beq.n	8000422 <EXTI9_5_IRQHandler+0x9a>
 8000410:	4b05      	ldr	r3, [pc, #20]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 8000412:	695b      	ldr	r3, [r3, #20]
 8000414:	4a04      	ldr	r2, [pc, #16]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 8000416:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800041a:	6153      	str	r3, [r2, #20]
 800041c:	4b03      	ldr	r3, [pc, #12]	; (800042c <EXTI9_5_IRQHandler+0xa4>)
 800041e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000420:	4798      	blx	r3
}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40010400 	.word	0x40010400
 800042c:	20000020 	.word	0x20000020

08000430 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10){SET_BIT(EXTI->PR,EXTI10);call_back[EXTI10]();}
 8000434:	4b2d      	ldr	r3, [pc, #180]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800043c:	2b00      	cmp	r3, #0
 800043e:	d008      	beq.n	8000452 <EXTI15_10_IRQHandler+0x22>
 8000440:	4b2a      	ldr	r3, [pc, #168]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 8000442:	695b      	ldr	r3, [r3, #20]
 8000444:	4a29      	ldr	r2, [pc, #164]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 8000446:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800044a:	6153      	str	r3, [r2, #20]
 800044c:	4b28      	ldr	r3, [pc, #160]	; (80004f0 <EXTI15_10_IRQHandler+0xc0>)
 800044e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000450:	4798      	blx	r3
	if(EXTI->PR & 1<<11){SET_BIT(EXTI->PR,EXTI11);call_back[EXTI11]();}
 8000452:	4b26      	ldr	r3, [pc, #152]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800045a:	2b00      	cmp	r3, #0
 800045c:	d008      	beq.n	8000470 <EXTI15_10_IRQHandler+0x40>
 800045e:	4b23      	ldr	r3, [pc, #140]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	4a22      	ldr	r2, [pc, #136]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 8000464:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000468:	6153      	str	r3, [r2, #20]
 800046a:	4b21      	ldr	r3, [pc, #132]	; (80004f0 <EXTI15_10_IRQHandler+0xc0>)
 800046c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800046e:	4798      	blx	r3
	if(EXTI->PR & 1<<12){SET_BIT(EXTI->PR,EXTI12);call_back[EXTI12]();}
 8000470:	4b1e      	ldr	r3, [pc, #120]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 8000472:	695b      	ldr	r3, [r3, #20]
 8000474:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000478:	2b00      	cmp	r3, #0
 800047a:	d008      	beq.n	800048e <EXTI15_10_IRQHandler+0x5e>
 800047c:	4b1b      	ldr	r3, [pc, #108]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 800047e:	695b      	ldr	r3, [r3, #20]
 8000480:	4a1a      	ldr	r2, [pc, #104]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 8000482:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000486:	6153      	str	r3, [r2, #20]
 8000488:	4b19      	ldr	r3, [pc, #100]	; (80004f0 <EXTI15_10_IRQHandler+0xc0>)
 800048a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048c:	4798      	blx	r3
	if(EXTI->PR & 1<<13){SET_BIT(EXTI->PR,EXTI13);call_back[EXTI13]();}
 800048e:	4b17      	ldr	r3, [pc, #92]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000496:	2b00      	cmp	r3, #0
 8000498:	d008      	beq.n	80004ac <EXTI15_10_IRQHandler+0x7c>
 800049a:	4b14      	ldr	r3, [pc, #80]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	4a13      	ldr	r2, [pc, #76]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 80004a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004a4:	6153      	str	r3, [r2, #20]
 80004a6:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <EXTI15_10_IRQHandler+0xc0>)
 80004a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004aa:	4798      	blx	r3
	if(EXTI->PR & 1<<14){SET_BIT(EXTI->PR,EXTI14);call_back[EXTI14]();}
 80004ac:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 80004ae:	695b      	ldr	r3, [r3, #20]
 80004b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d008      	beq.n	80004ca <EXTI15_10_IRQHandler+0x9a>
 80004b8:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 80004ba:	695b      	ldr	r3, [r3, #20]
 80004bc:	4a0b      	ldr	r2, [pc, #44]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 80004be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004c2:	6153      	str	r3, [r2, #20]
 80004c4:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <EXTI15_10_IRQHandler+0xc0>)
 80004c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004c8:	4798      	blx	r3
	if(EXTI->PR & 1<<15){SET_BIT(EXTI->PR,EXTI15);call_back[EXTI15]();}
 80004ca:	4b08      	ldr	r3, [pc, #32]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d008      	beq.n	80004e8 <EXTI15_10_IRQHandler+0xb8>
 80004d6:	4b05      	ldr	r3, [pc, #20]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	4a04      	ldr	r2, [pc, #16]	; (80004ec <EXTI15_10_IRQHandler+0xbc>)
 80004dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004e0:	6153      	str	r3, [r2, #20]
 80004e2:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <EXTI15_10_IRQHandler+0xc0>)
 80004e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004e6:	4798      	blx	r3
}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40010400 	.word	0x40010400
 80004f0:	20000020 	.word	0x20000020

080004f4 <Get_PinPostion>:
 *  Created on: Jul 3, 2024
 *      Author: ismail
 */
#include "GPIO.h"
uint8_t Get_PinPostion(uint16_t PinNumber)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 80004fe:	88fb      	ldrh	r3, [r7, #6]
 8000500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000504:	f000 808f 	beq.w	8000626 <Get_PinPostion+0x132>
 8000508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800050c:	f300 808d 	bgt.w	800062a <Get_PinPostion+0x136>
 8000510:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000514:	f000 8085 	beq.w	8000622 <Get_PinPostion+0x12e>
 8000518:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800051c:	f300 8085 	bgt.w	800062a <Get_PinPostion+0x136>
 8000520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000524:	d07b      	beq.n	800061e <Get_PinPostion+0x12a>
 8000526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800052a:	dc7e      	bgt.n	800062a <Get_PinPostion+0x136>
 800052c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000530:	d073      	beq.n	800061a <Get_PinPostion+0x126>
 8000532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000536:	dc78      	bgt.n	800062a <Get_PinPostion+0x136>
 8000538:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800053c:	d06b      	beq.n	8000616 <Get_PinPostion+0x122>
 800053e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000542:	dc72      	bgt.n	800062a <Get_PinPostion+0x136>
 8000544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000548:	d063      	beq.n	8000612 <Get_PinPostion+0x11e>
 800054a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800054e:	dc6c      	bgt.n	800062a <Get_PinPostion+0x136>
 8000550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000554:	d05b      	beq.n	800060e <Get_PinPostion+0x11a>
 8000556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800055a:	dc66      	bgt.n	800062a <Get_PinPostion+0x136>
 800055c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000560:	d053      	beq.n	800060a <Get_PinPostion+0x116>
 8000562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000566:	dc60      	bgt.n	800062a <Get_PinPostion+0x136>
 8000568:	2b80      	cmp	r3, #128	; 0x80
 800056a:	d05c      	beq.n	8000626 <Get_PinPostion+0x132>
 800056c:	2b80      	cmp	r3, #128	; 0x80
 800056e:	dc5c      	bgt.n	800062a <Get_PinPostion+0x136>
 8000570:	2b20      	cmp	r3, #32
 8000572:	dc47      	bgt.n	8000604 <Get_PinPostion+0x110>
 8000574:	2b00      	cmp	r3, #0
 8000576:	dd58      	ble.n	800062a <Get_PinPostion+0x136>
 8000578:	3b01      	subs	r3, #1
 800057a:	2b1f      	cmp	r3, #31
 800057c:	d855      	bhi.n	800062a <Get_PinPostion+0x136>
 800057e:	a201      	add	r2, pc, #4	; (adr r2, 8000584 <Get_PinPostion+0x90>)
 8000580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000584:	0800060b 	.word	0x0800060b
 8000588:	0800060f 	.word	0x0800060f
 800058c:	0800062b 	.word	0x0800062b
 8000590:	08000613 	.word	0x08000613
 8000594:	0800062b 	.word	0x0800062b
 8000598:	0800062b 	.word	0x0800062b
 800059c:	0800062b 	.word	0x0800062b
 80005a0:	08000617 	.word	0x08000617
 80005a4:	0800062b 	.word	0x0800062b
 80005a8:	0800062b 	.word	0x0800062b
 80005ac:	0800062b 	.word	0x0800062b
 80005b0:	0800062b 	.word	0x0800062b
 80005b4:	0800062b 	.word	0x0800062b
 80005b8:	0800062b 	.word	0x0800062b
 80005bc:	0800062b 	.word	0x0800062b
 80005c0:	0800061b 	.word	0x0800061b
 80005c4:	0800062b 	.word	0x0800062b
 80005c8:	0800062b 	.word	0x0800062b
 80005cc:	0800062b 	.word	0x0800062b
 80005d0:	0800062b 	.word	0x0800062b
 80005d4:	0800062b 	.word	0x0800062b
 80005d8:	0800062b 	.word	0x0800062b
 80005dc:	0800062b 	.word	0x0800062b
 80005e0:	0800062b 	.word	0x0800062b
 80005e4:	0800062b 	.word	0x0800062b
 80005e8:	0800062b 	.word	0x0800062b
 80005ec:	0800062b 	.word	0x0800062b
 80005f0:	0800062b 	.word	0x0800062b
 80005f4:	0800062b 	.word	0x0800062b
 80005f8:	0800062b 	.word	0x0800062b
 80005fc:	0800062b 	.word	0x0800062b
 8000600:	0800061f 	.word	0x0800061f
 8000604:	2b40      	cmp	r3, #64	; 0x40
 8000606:	d00c      	beq.n	8000622 <Get_PinPostion+0x12e>
 8000608:	e00f      	b.n	800062a <Get_PinPostion+0x136>
	{
	case GPIO_PIN_0:
	case GPIO_PIN_8:
		return 0;
 800060a:	2300      	movs	r3, #0
 800060c:	e00e      	b.n	800062c <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_1:
	case GPIO_PIN_9:
		return 4;
 800060e:	2304      	movs	r3, #4
 8000610:	e00c      	b.n	800062c <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_2:
	case GPIO_PIN_10:
		return 8;
 8000612:	2308      	movs	r3, #8
 8000614:	e00a      	b.n	800062c <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_3:
	case GPIO_PIN_11:
		return 12;
 8000616:	230c      	movs	r3, #12
 8000618:	e008      	b.n	800062c <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_4:
	case GPIO_PIN_12:
		return 16;
 800061a:	2310      	movs	r3, #16
 800061c:	e006      	b.n	800062c <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_5:
	case GPIO_PIN_13:
		return 20;
 800061e:	2314      	movs	r3, #20
 8000620:	e004      	b.n	800062c <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_6:
	case GPIO_PIN_14:
		return 24;
 8000622:	2318      	movs	r3, #24
 8000624:	e002      	b.n	800062c <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_7:
	case GPIO_PIN_15:
		return 28;
 8000626:	231c      	movs	r3, #28
 8000628:	e000      	b.n	800062c <Get_PinPostion+0x138>
		break;
	}
	return 0;
 800062a:	2300      	movs	r3, #0
}
 800062c:	4618      	mov	r0, r3
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <GPIO_Init>:
 * @retval 		-none
 * Note			-STM32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 but LQFP48 Package has only GPIO A,B Part of C,D exported as external PINs from the MCU
================================================================**/
void GPIO_Init(GPIO_t *GPIOx,GPIO_Config_t *PinConfig)
{
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
	// Port configuration register high (GPIOx_CRH) configure PINs from 0 >> 7
	// Port configuration register high (GPIOx_CRH) configure PINs from 8 >> 15
	volatile uint32_t *Config_Register = NULL;
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
	uint8_t Pin_config = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	73fb      	strb	r3, [r7, #15]
	//see if it's CRL or CRH
	Config_Register = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)?	&GPIOx->CRL : &GPIOx->CRH;
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	2bff      	cmp	r3, #255	; 0xff
 8000650:	d801      	bhi.n	8000656 <GPIO_Init+0x1e>
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	e001      	b.n	800065a <GPIO_Init+0x22>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	3304      	adds	r3, #4
 800065a:	60bb      	str	r3, [r7, #8]
	//Reset CNF and MODE
	(*Config_Register) &= ~(0xf << Get_PinPostion(PinConfig->GPIO_PinNumber));	/*
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	881b      	ldrh	r3, [r3, #0]
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff ff47 	bl	80004f4 <Get_PinPostion>
 8000666:	4603      	mov	r3, r0
 8000668:	461a      	mov	r2, r3
 800066a:	230f      	movs	r3, #15
 800066c:	4093      	lsls	r3, r2
 800066e:	43da      	mvns	r2, r3
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	401a      	ands	r2, r3
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	601a      	str	r2, [r3, #0]
	 * ------------------
	 * |  3	| 2 | 1	| 0	| //clear it to write what i want
	 * ------------------
	 */
	//see if the pin is Input or Output so that if it's output i put the speed with it if input then it's only mode
	if((PinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_PP)||(PinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_OD)||(PinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_AF_PP)||(PinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_AF_OD))
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	885b      	ldrh	r3, [r3, #2]
 800067e:	2b04      	cmp	r3, #4
 8000680:	d00b      	beq.n	800069a <GPIO_Init+0x62>
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	885b      	ldrh	r3, [r3, #2]
 8000686:	2b05      	cmp	r3, #5
 8000688:	d007      	beq.n	800069a <GPIO_Init+0x62>
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	885b      	ldrh	r3, [r3, #2]
 800068e:	2b06      	cmp	r3, #6
 8000690:	d003      	beq.n	800069a <GPIO_Init+0x62>
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	885b      	ldrh	r3, [r3, #2]
 8000696:	2b07      	cmp	r3, #7
 8000698:	d11c      	bne.n	80006d4 <GPIO_Init+0x9c>
		 * 00: General purpose output push-pull		--> GPIO_MODE_OUTPUT_PP		>>	0x00000004u
		 * 01: General purpose output Open-drain	--> GPIO_MODE_OUTPUT_OD		>>	0x00000005u
		 * 10: Alternate function output Push-pull	--> GPIO_MODE_OUTPUT_AF_PP	>>	0x00000006u
		 * 11: Alternate function output Open-drain	--> GPIO_MODE_OUTPUT_AF_OD	>>	0x00000007u
		 */
		Pin_config = ( ( ( (PinConfig->GPIO_PinMode - 4 ) << 2 ) | (PinConfig->GPIO_PinSpeed)) & 0x0F );
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	885b      	ldrh	r3, [r3, #2]
 800069e:	3b04      	subs	r3, #4
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	b25a      	sxtb	r2, r3
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	889b      	ldrh	r3, [r3, #4]
 80006a8:	b25b      	sxtb	r3, r3
 80006aa:	4313      	orrs	r3, r2
 80006ac:	b25b      	sxtb	r3, r3
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	f003 030f 	and.w	r3, r3, #15
 80006b4:	73fb      	strb	r3, [r7, #15]
		(*Config_Register) |= ( Pin_config << Get_PinPostion(PinConfig->GPIO_PinNumber) );
 80006b6:	7bfc      	ldrb	r4, [r7, #15]
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ff19 	bl	80004f4 <Get_PinPostion>
 80006c2:	4603      	mov	r3, r0
 80006c4:	fa04 f203 	lsl.w	r2, r4, r3
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	431a      	orrs	r2, r3
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	e072      	b.n	80007ba <GPIO_Init+0x182>
		 * 11: Input with PU or PD	--> GPIO_MODE_INPUT_PU
		 * //the only thing to diff from PU or PD
		 * 		PU: ODR --> 1
		 * 		PD: ODR --> 0
		 */
		if((PinConfig->GPIO_PinMode  == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_PinMode  == GPIO_MODE_ANALOG))
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	885b      	ldrh	r3, [r3, #2]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d003      	beq.n	80006e4 <GPIO_Init+0xac>
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	885b      	ldrh	r3, [r3, #2]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d115      	bne.n	8000710 <GPIO_Init+0xd8>
		{
			Pin_config = ((((PinConfig ->GPIO_PinMode) << 2) | (0)) & 0x0F );
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	885b      	ldrh	r3, [r3, #2]
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	f003 030f 	and.w	r3, r3, #15
 80006f0:	73fb      	strb	r3, [r7, #15]
			(*Config_Register) |= ( Pin_config << Get_PinPostion(PinConfig->GPIO_PinNumber) );
 80006f2:	7bfc      	ldrb	r4, [r7, #15]
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff fefb 	bl	80004f4 <Get_PinPostion>
 80006fe:	4603      	mov	r3, r0
 8000700:	fa04 f203 	lsl.w	r2, r4, r3
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	431a      	orrs	r2, r3
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	e054      	b.n	80007ba <GPIO_Init+0x182>
		}
		else if((PinConfig->GPIO_PinMode  == GPIO_MODE_INPUT_PU)||(PinConfig->GPIO_PinMode  == GPIO_MODE_INPUT_PD ))
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	885b      	ldrh	r3, [r3, #2]
 8000714:	2b02      	cmp	r3, #2
 8000716:	d003      	beq.n	8000720 <GPIO_Init+0xe8>
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	885b      	ldrh	r3, [r3, #2]
 800071c:	2b03      	cmp	r3, #3
 800071e:	d135      	bne.n	800078c <GPIO_Init+0x154>
		{
			switch(PinConfig->GPIO_PinMode)
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	885b      	ldrh	r3, [r3, #2]
 8000724:	2b02      	cmp	r3, #2
 8000726:	d002      	beq.n	800072e <GPIO_Init+0xf6>
 8000728:	2b03      	cmp	r3, #3
 800072a:	d00f      	beq.n	800074c <GPIO_Init+0x114>
 800072c:	e01f      	b.n	800076e <GPIO_Init+0x136>
			{
			case  GPIO_MODE_INPUT_PU :
				GPIOx->ODR |= (PinConfig->GPIO_PinNumber);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	68db      	ldr	r3, [r3, #12]
 8000732:	683a      	ldr	r2, [r7, #0]
 8000734:	8812      	ldrh	r2, [r2, #0]
 8000736:	431a      	orrs	r2, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	60da      	str	r2, [r3, #12]
				Pin_config = (((PinConfig->GPIO_PinMode << 2 )|(0))&0x0F);
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	885b      	ldrh	r3, [r3, #2]
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	b2db      	uxtb	r3, r3
 8000744:	f003 030f 	and.w	r3, r3, #15
 8000748:	73fb      	strb	r3, [r7, #15]
				break;
 800074a:	e010      	b.n	800076e <GPIO_Init+0x136>
			case GPIO_MODE_INPUT_PD :
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	683a      	ldr	r2, [r7, #0]
 8000752:	8812      	ldrh	r2, [r2, #0]
 8000754:	43d2      	mvns	r2, r2
 8000756:	401a      	ands	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	60da      	str	r2, [r3, #12]
				Pin_config = ((((PinConfig->GPIO_PinMode-1) << 2 )|(0))&0x0F);
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	885b      	ldrh	r3, [r3, #2]
 8000760:	3b01      	subs	r3, #1
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	b2db      	uxtb	r3, r3
 8000766:	f003 030f 	and.w	r3, r3, #15
 800076a:	73fb      	strb	r3, [r7, #15]
				break;
 800076c:	bf00      	nop
			}
			( *Config_Register ) |= ( Pin_config << Get_PinPostion(PinConfig->GPIO_PinNumber) );
 800076e:	7bfc      	ldrb	r4, [r7, #15]
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff febd 	bl	80004f4 <Get_PinPostion>
 800077a:	4603      	mov	r3, r0
 800077c:	fa04 f203 	lsl.w	r2, r4, r3
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	431a      	orrs	r2, r3
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	e016      	b.n	80007ba <GPIO_Init+0x182>
		}
		else
		{ 	//pin is alternative input (same as input floating)
			Pin_config = ( (((PinConfig->GPIO_PinMode-7) << 2) | (0)) & 0x0F	);
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	885b      	ldrh	r3, [r3, #2]
 8000790:	3b07      	subs	r3, #7
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	b2db      	uxtb	r3, r3
 8000796:	f003 030f 	and.w	r3, r3, #15
 800079a:	73fb      	strb	r3, [r7, #15]
			(*Config_Register) |= ( Pin_config << Get_PinPostion(PinConfig->GPIO_PinNumber) );
 800079c:	7bfc      	ldrb	r4, [r7, #15]
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff fea6 	bl	80004f4 <Get_PinPostion>
 80007a8:	4603      	mov	r3, r0
 80007aa:	fa04 f203 	lsl.w	r2, r4, r3
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	431a      	orrs	r2, r3
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	601a      	str	r2, [r3, #0]

		}
	}
}
 80007b8:	bf00      	nop
 80007ba:	bf00      	nop
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd90      	pop	{r4, r7, pc}
	...

080007c4 <RCC_Get_SYSCLK_Frequency>:
const uint8_t AHB_Divider[16] = {0,0,0,0,0,0,0,0,1,2,3,4,6,7,8,9};



uint32_t RCC_Get_SYSCLK_Frequency(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
	//Set and cleared by hardware to indicate which clock source is used as system clock.
	//00: HSI oscillator used as system clock
	//01: HSE oscillator used as system clock
	//10: PLL used as system clock
	//11: Not applicable
	switch ((RCC->CFGR >> 2) & 0b11) {
 80007c8:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <RCC_Get_SYSCLK_Frequency+0x34>)
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	089b      	lsrs	r3, r3, #2
 80007ce:	f003 0303 	and.w	r3, r3, #3
 80007d2:	2b02      	cmp	r3, #2
 80007d4:	d00a      	beq.n	80007ec <RCC_Get_SYSCLK_Frequency+0x28>
 80007d6:	2b02      	cmp	r3, #2
 80007d8:	d80a      	bhi.n	80007f0 <RCC_Get_SYSCLK_Frequency+0x2c>
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d002      	beq.n	80007e4 <RCC_Get_SYSCLK_Frequency+0x20>
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d002      	beq.n	80007e8 <RCC_Get_SYSCLK_Frequency+0x24>
 80007e2:	e005      	b.n	80007f0 <RCC_Get_SYSCLK_Frequency+0x2c>
	case 0:
		return HSI_RC_Clk;
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <RCC_Get_SYSCLK_Frequency+0x38>)
 80007e6:	e003      	b.n	80007f0 <RCC_Get_SYSCLK_Frequency+0x2c>
		break;
	case 1:
		return HSE_Clock;
 80007e8:	4b05      	ldr	r3, [pc, #20]	; (8000800 <RCC_Get_SYSCLK_Frequency+0x3c>)
 80007ea:	e001      	b.n	80007f0 <RCC_Get_SYSCLK_Frequency+0x2c>
		break;
	case 2:
		return HSE_Clock;
 80007ec:	4b04      	ldr	r3, [pc, #16]	; (8000800 <RCC_Get_SYSCLK_Frequency+0x3c>)
 80007ee:	e7ff      	b.n	80007f0 <RCC_Get_SYSCLK_Frequency+0x2c>
		break;
	}

}
 80007f0:	4618      	mov	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	40021000 	.word	0x40021000
 80007fc:	007a1200 	.word	0x007a1200
 8000800:	00f42400 	.word	0x00f42400

08000804 <RCC_Get_HCLK_Frequency>:
uint32_t RCC_Get_HCLK_Frequency(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	//Get SYSCLK source and Compute HCLK frequency
	return RCC_Get_SYSCLK_Frequency() >> AHB_Divider[((RCC->CFGR >> 4)& 0xF)];
 8000808:	f7ff ffdc 	bl	80007c4 <RCC_Get_SYSCLK_Frequency>
 800080c:	4602      	mov	r2, r0
 800080e:	4b05      	ldr	r3, [pc, #20]	; (8000824 <RCC_Get_HCLK_Frequency+0x20>)
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	091b      	lsrs	r3, r3, #4
 8000814:	f003 030f 	and.w	r3, r3, #15
 8000818:	4903      	ldr	r1, [pc, #12]	; (8000828 <RCC_Get_HCLK_Frequency+0x24>)
 800081a:	5ccb      	ldrb	r3, [r1, r3]
 800081c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000820:	4618      	mov	r0, r3
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40021000 	.word	0x40021000
 8000828:	08000fb8 	.word	0x08000fb8

0800082c <RCC_Get_PCLK1_Frequency>:
uint32_t RCC_Get_PCLK1_Frequency(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	//Get HCLK source and Compute PCLK1 frequency
	return RCC_Get_HCLK_Frequency() >> APB_Divider[((RCC->CFGR >> 8)&0b111)];
 8000830:	f7ff ffe8 	bl	8000804 <RCC_Get_HCLK_Frequency>
 8000834:	4602      	mov	r2, r0
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <RCC_Get_PCLK1_Frequency+0x20>)
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	0a1b      	lsrs	r3, r3, #8
 800083c:	f003 0307 	and.w	r3, r3, #7
 8000840:	4903      	ldr	r1, [pc, #12]	; (8000850 <RCC_Get_PCLK1_Frequency+0x24>)
 8000842:	5ccb      	ldrb	r3, [r1, r3]
 8000844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000848:	4618      	mov	r0, r3
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40021000 	.word	0x40021000
 8000850:	08000fb0 	.word	0x08000fb0

08000854 <RCC_Get_PCLK2_Frequency>:
uint32_t RCC_Get_PCLK2_Frequency(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	//Get HCLK source and Compute PCLK2 frequency
	return RCC_Get_HCLK_Frequency() >> APB_Divider[((RCC->CFGR >> 11)&0b111)];
 8000858:	f7ff ffd4 	bl	8000804 <RCC_Get_HCLK_Frequency>
 800085c:	4602      	mov	r2, r0
 800085e:	4b05      	ldr	r3, [pc, #20]	; (8000874 <RCC_Get_PCLK2_Frequency+0x20>)
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	0adb      	lsrs	r3, r3, #11
 8000864:	f003 0307 	and.w	r3, r3, #7
 8000868:	4903      	ldr	r1, [pc, #12]	; (8000878 <RCC_Get_PCLK2_Frequency+0x24>)
 800086a:	5ccb      	ldrb	r3, [r1, r3]
 800086c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000870:	4618      	mov	r0, r3
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40021000 	.word	0x40021000
 8000878:	08000fb0 	.word	0x08000fb0

0800087c <SPI_Init>:
 */
#include "SPI.h"
SPI_Config_t *G_SPI_Config[2] = {NULL, NULL};

void SPI_Init(SPI_t *SPIx, SPI_Config_t* SPI_Config)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
	//Safety for register, Using this technique for protect the peripheral form working before the full configurations
	uint16_t tempCR1_reg = 0 ;
 8000886:	2300      	movs	r3, #0
 8000888:	81fb      	strh	r3, [r7, #14]
	uint16_t tempCR2_reg = 0 ;
 800088a:	2300      	movs	r3, #0
 800088c:	81bb      	strh	r3, [r7, #12]

	if (SPIx == SPI1) {
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4a3c      	ldr	r2, [pc, #240]	; (8000984 <SPI_Init+0x108>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d109      	bne.n	80008aa <SPI_Init+0x2e>
		G_SPI_Config[0] = SPI_Config;
 8000896:	4a3c      	ldr	r2, [pc, #240]	; (8000988 <SPI_Init+0x10c>)
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	6013      	str	r3, [r2, #0]
		RCC_SPI1_CLK_EN();
 800089c:	4b3b      	ldr	r3, [pc, #236]	; (800098c <SPI_Init+0x110>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	4a3a      	ldr	r2, [pc, #232]	; (800098c <SPI_Init+0x110>)
 80008a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	e00c      	b.n	80008c4 <SPI_Init+0x48>
	}
	else if (SPIx == SPI2) {
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4a38      	ldr	r2, [pc, #224]	; (8000990 <SPI_Init+0x114>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d108      	bne.n	80008c4 <SPI_Init+0x48>
		G_SPI_Config[1] = SPI_Config;
 80008b2:	4a35      	ldr	r2, [pc, #212]	; (8000988 <SPI_Init+0x10c>)
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	6053      	str	r3, [r2, #4]
		RCC_SPI2_CLK_EN();
 80008b8:	4b34      	ldr	r3, [pc, #208]	; (800098c <SPI_Init+0x110>)
 80008ba:	69db      	ldr	r3, [r3, #28]
 80008bc:	4a33      	ldr	r2, [pc, #204]	; (800098c <SPI_Init+0x110>)
 80008be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c2:	61d3      	str	r3, [r2, #28]
	}
	// SPE enable
	tempCR1_reg |= (uint16_t)(1 << 6) ;
 80008c4:	89fb      	ldrh	r3, [r7, #14]
 80008c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008ca:	81fb      	strh	r3, [r7, #14]

	//Set Master or Slave
	tempCR1_reg |= SPI_Config->SPI_Mode ;
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	881a      	ldrh	r2, [r3, #0]
 80008d0:	89fb      	ldrh	r3, [r7, #14]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	81fb      	strh	r3, [r7, #14]

	//Set Communication Mode
	tempCR1_reg |= SPI_Config->Communication_Mode ;
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	885a      	ldrh	r2, [r3, #2]
 80008da:	89fb      	ldrh	r3, [r7, #14]
 80008dc:	4313      	orrs	r3, r2
 80008de:	81fb      	strh	r3, [r7, #14]

	//Set Data size
	tempCR1_reg |= SPI_Config->Data_Size ;
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	88da      	ldrh	r2, [r3, #6]
 80008e4:	89fb      	ldrh	r3, [r7, #14]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	81fb      	strh	r3, [r7, #14]

	//Set Data format
	tempCR1_reg |= SPI_Config->Data_Order ;
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	889a      	ldrh	r2, [r3, #4]
 80008ee:	89fb      	ldrh	r3, [r7, #14]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	81fb      	strh	r3, [r7, #14]

	//Set Clock Polarity
	tempCR1_reg |= SPI_Config->CLKPolarity ;
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	891a      	ldrh	r2, [r3, #8]
 80008f8:	89fb      	ldrh	r3, [r7, #14]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	81fb      	strh	r3, [r7, #14]

	//Set Clock Phase
	tempCR1_reg |= SPI_Config->CLKPhase ;
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	895a      	ldrh	r2, [r3, #10]
 8000902:	89fb      	ldrh	r3, [r7, #14]
 8000904:	4313      	orrs	r3, r2
 8000906:	81fb      	strh	r3, [r7, #14]

	//Set Slave Select Management NSS
	if (SPI_Config->NSS == SPI_NSS_Hard_Master_SS_output_enable) {
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	899b      	ldrh	r3, [r3, #12]
 800090c:	2b04      	cmp	r3, #4
 800090e:	d105      	bne.n	800091c <SPI_Init+0xa0>
		tempCR2_reg |= SPI_Config->NSS ;
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	899a      	ldrh	r2, [r3, #12]
 8000914:	89bb      	ldrh	r3, [r7, #12]
 8000916:	4313      	orrs	r3, r2
 8000918:	81bb      	strh	r3, [r7, #12]
 800091a:	e004      	b.n	8000926 <SPI_Init+0xaa>
	}
	else if (SPI_Config->NSS == SPI_NSS_Hard_Master_SS_output_disable) {
		tempCR2_reg &= SPI_Config->NSS ;
	}
	else {
		tempCR1_reg |= SPI_Config->NSS ;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	899a      	ldrh	r2, [r3, #12]
 8000920:	89fb      	ldrh	r3, [r7, #14]
 8000922:	4313      	orrs	r3, r2
 8000924:	81fb      	strh	r3, [r7, #14]
	}

	//Set BoudRate Pre-scaler
	tempCR1_reg |= SPI_Config->BaudRate_Prescaler ;
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	89da      	ldrh	r2, [r3, #14]
 800092a:	89fb      	ldrh	r3, [r7, #14]
 800092c:	4313      	orrs	r3, r2
 800092e:	81fb      	strh	r3, [r7, #14]

	if (SPI_Config->IRQ_Enable != SPI_IRQ_Disable) {
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	8a1b      	ldrh	r3, [r3, #16]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d019      	beq.n	800096c <SPI_Init+0xf0>

		tempCR2_reg |= SPI_Config->IRQ_Enable ;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	8a1a      	ldrh	r2, [r3, #16]
 800093c:	89bb      	ldrh	r3, [r7, #12]
 800093e:	4313      	orrs	r3, r2
 8000940:	81bb      	strh	r3, [r7, #12]

		if (SPIx == SPI1) {
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a0f      	ldr	r2, [pc, #60]	; (8000984 <SPI_Init+0x108>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d106      	bne.n	8000958 <SPI_Init+0xdc>
			NVIC_IRQ35_SPI1_Enable();
 800094a:	4b12      	ldr	r3, [pc, #72]	; (8000994 <SPI_Init+0x118>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a11      	ldr	r2, [pc, #68]	; (8000994 <SPI_Init+0x118>)
 8000950:	f043 0308 	orr.w	r3, r3, #8
 8000954:	6013      	str	r3, [r2, #0]
 8000956:	e009      	b.n	800096c <SPI_Init+0xf0>
		}
		else if (SPIx == SPI2) {
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <SPI_Init+0x114>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d105      	bne.n	800096c <SPI_Init+0xf0>
			NVIC_IRQ36_SPI2_Enable();
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <SPI_Init+0x118>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a0b      	ldr	r2, [pc, #44]	; (8000994 <SPI_Init+0x118>)
 8000966:	f043 0310 	orr.w	r3, r3, #16
 800096a:	6013      	str	r3, [r2, #0]
		}
	}

	SPIx->CR1 = tempCR1_reg ;
 800096c:	89fa      	ldrh	r2, [r7, #14]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	601a      	str	r2, [r3, #0]
	SPIx->CR2 = tempCR2_reg ;
 8000972:	89ba      	ldrh	r2, [r7, #12]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	605a      	str	r2, [r3, #4]
}
 8000978:	bf00      	nop
 800097a:	3714      	adds	r7, #20
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40013000 	.word	0x40013000
 8000988:	2000005c 	.word	0x2000005c
 800098c:	40021000 	.word	0x40021000
 8000990:	40003800 	.word	0x40003800
 8000994:	e000e104 	.word	0xe000e104

08000998 <SPI_GPIO_Set_Pins>:
		RCC_SPI2_RESET() ;
		NVIC_IRQ36_SPI2_Disable() ;
	}
}

void SPI_GPIO_Set_Pins(SPI_t *SPIx){
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	GPIO_Config_t SPI_GPIO_Config ;
	if (SPIx == SPI1) {
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a73      	ldr	r2, [pc, #460]	; (8000b70 <SPI_GPIO_Set_Pins+0x1d8>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d169      	bne.n	8000a7c <SPI_GPIO_Set_Pins+0xe4>
			SPI1_NSS 	PA4
			SPI1_SCK 	PA5
			SPI1_MISO 	PA6
			SPI1_MOSI	PA7
		 */
		if (G_SPI_Config[0]->SPI_Mode == SPI_MASTER_MODE) {
 80009a8:	4b72      	ldr	r3, [pc, #456]	; (8000b74 <SPI_GPIO_Set_Pins+0x1dc>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	2b04      	cmp	r3, #4
 80009b0:	d134      	bne.n	8000a1c <SPI_GPIO_Set_Pins+0x84>
			SPI1_MISO 	PA6		Input floating / Input pull-up
			SPI1_MOSI	PA7		Alternate function push-pull
			 */

			// SPI1_NSS
			switch (G_SPI_Config[0]->NSS) {
 80009b2:	4b70      	ldr	r3, [pc, #448]	; (8000b74 <SPI_GPIO_Set_Pins+0x1dc>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	899b      	ldrh	r3, [r3, #12]
 80009b8:	2b04      	cmp	r3, #4
 80009ba:	d10c      	bne.n	80009d6 <SPI_GPIO_Set_Pins+0x3e>
				SPI_GPIO_Config.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
				GPIO_Init(GPIOA, &SPI_GPIO_Config);
				break ;

			case SPI_NSS_Hard_Master_SS_output_enable :
				SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_4;
 80009bc:	2310      	movs	r3, #16
 80009be:	813b      	strh	r3, [r7, #8]
				SPI_GPIO_Config.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
 80009c0:	2306      	movs	r3, #6
 80009c2:	817b      	strh	r3, [r7, #10]
				SPI_GPIO_Config.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 80009c4:	2301      	movs	r3, #1
 80009c6:	81bb      	strh	r3, [r7, #12]
				GPIO_Init(GPIOA, &SPI_GPIO_Config);
 80009c8:	f107 0308 	add.w	r3, r7, #8
 80009cc:	4619      	mov	r1, r3
 80009ce:	486a      	ldr	r0, [pc, #424]	; (8000b78 <SPI_GPIO_Set_Pins+0x1e0>)
 80009d0:	f7ff fe32 	bl	8000638 <GPIO_Init>
				break ;
 80009d4:	bf00      	nop
			}

			// SPI1_SCK
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_5;
 80009d6:	2320      	movs	r3, #32
 80009d8:	813b      	strh	r3, [r7, #8]
			SPI_GPIO_Config.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
 80009da:	2306      	movs	r3, #6
 80009dc:	817b      	strh	r3, [r7, #10]
			SPI_GPIO_Config.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 80009de:	2301      	movs	r3, #1
 80009e0:	81bb      	strh	r3, [r7, #12]
			GPIO_Init(GPIOA, &SPI_GPIO_Config);
 80009e2:	f107 0308 	add.w	r3, r7, #8
 80009e6:	4619      	mov	r1, r3
 80009e8:	4863      	ldr	r0, [pc, #396]	; (8000b78 <SPI_GPIO_Set_Pins+0x1e0>)
 80009ea:	f7ff fe25 	bl	8000638 <GPIO_Init>

			/* PA6 : SPI1_MISO */
			/* Full duplex / master Input floating / Input pull-up */
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_6;
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	813b      	strh	r3, [r7, #8]
			SPI_GPIO_Config.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
 80009f2:	2301      	movs	r3, #1
 80009f4:	817b      	strh	r3, [r7, #10]
			GPIO_Init(GPIOA, &SPI_GPIO_Config);
 80009f6:	f107 0308 	add.w	r3, r7, #8
 80009fa:	4619      	mov	r1, r3
 80009fc:	485e      	ldr	r0, [pc, #376]	; (8000b78 <SPI_GPIO_Set_Pins+0x1e0>)
 80009fe:	f7ff fe1b 	bl	8000638 <GPIO_Init>

			/* PA7 : SPI1_MOSI */
			/* Full duplex / master Alternate function push-pull */
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_7;
 8000a02:	2380      	movs	r3, #128	; 0x80
 8000a04:	813b      	strh	r3, [r7, #8]
			SPI_GPIO_Config.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
 8000a06:	2306      	movs	r3, #6
 8000a08:	817b      	strh	r3, [r7, #10]
			SPI_GPIO_Config.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	81bb      	strh	r3, [r7, #12]
			GPIO_Init(GPIOA, &SPI_GPIO_Config);
 8000a0e:	f107 0308 	add.w	r3, r7, #8
 8000a12:	4619      	mov	r1, r3
 8000a14:	4858      	ldr	r0, [pc, #352]	; (8000b78 <SPI_GPIO_Set_Pins+0x1e0>)
 8000a16:	f7ff fe0f 	bl	8000638 <GPIO_Init>
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_15 ;
			GPIO_Init (GPIOA, &SPI_GPIO_Config) ;
		}

	}
}
 8000a1a:	e0a4      	b.n	8000b66 <SPI_GPIO_Set_Pins+0x1ce>
			if (G_SPI_Config[0]->NSS == SPI_NSS_Hard_Slave) {
 8000a1c:	4b55      	ldr	r3, [pc, #340]	; (8000b74 <SPI_GPIO_Set_Pins+0x1dc>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	899b      	ldrh	r3, [r3, #12]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d109      	bne.n	8000a3a <SPI_GPIO_Set_Pins+0xa2>
				SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_4;
 8000a26:	2310      	movs	r3, #16
 8000a28:	813b      	strh	r3, [r7, #8]
				SPI_GPIO_Config.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	817b      	strh	r3, [r7, #10]
				GPIO_Init(GPIOA, &SPI_GPIO_Config);
 8000a2e:	f107 0308 	add.w	r3, r7, #8
 8000a32:	4619      	mov	r1, r3
 8000a34:	4850      	ldr	r0, [pc, #320]	; (8000b78 <SPI_GPIO_Set_Pins+0x1e0>)
 8000a36:	f7ff fdff 	bl	8000638 <GPIO_Init>
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_5;
 8000a3a:	2320      	movs	r3, #32
 8000a3c:	813b      	strh	r3, [r7, #8]
			SPI_GPIO_Config.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	817b      	strh	r3, [r7, #10]
			GPIO_Init(GPIOA, &SPI_GPIO_Config);
 8000a42:	f107 0308 	add.w	r3, r7, #8
 8000a46:	4619      	mov	r1, r3
 8000a48:	484b      	ldr	r0, [pc, #300]	; (8000b78 <SPI_GPIO_Set_Pins+0x1e0>)
 8000a4a:	f7ff fdf5 	bl	8000638 <GPIO_Init>
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_6;
 8000a4e:	2340      	movs	r3, #64	; 0x40
 8000a50:	813b      	strh	r3, [r7, #8]
			SPI_GPIO_Config.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
 8000a52:	2306      	movs	r3, #6
 8000a54:	817b      	strh	r3, [r7, #10]
			SPI_GPIO_Config.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 8000a56:	2301      	movs	r3, #1
 8000a58:	81bb      	strh	r3, [r7, #12]
			GPIO_Init(GPIOA, &SPI_GPIO_Config);
 8000a5a:	f107 0308 	add.w	r3, r7, #8
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4845      	ldr	r0, [pc, #276]	; (8000b78 <SPI_GPIO_Set_Pins+0x1e0>)
 8000a62:	f7ff fde9 	bl	8000638 <GPIO_Init>
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_7;
 8000a66:	2380      	movs	r3, #128	; 0x80
 8000a68:	813b      	strh	r3, [r7, #8]
			SPI_GPIO_Config.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	817b      	strh	r3, [r7, #10]
			GPIO_Init(GPIOA, &SPI_GPIO_Config);
 8000a6e:	f107 0308 	add.w	r3, r7, #8
 8000a72:	4619      	mov	r1, r3
 8000a74:	4840      	ldr	r0, [pc, #256]	; (8000b78 <SPI_GPIO_Set_Pins+0x1e0>)
 8000a76:	f7ff fddf 	bl	8000638 <GPIO_Init>
}
 8000a7a:	e074      	b.n	8000b66 <SPI_GPIO_Set_Pins+0x1ce>
	else if (SPIx == SPI2) {
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a3f      	ldr	r2, [pc, #252]	; (8000b7c <SPI_GPIO_Set_Pins+0x1e4>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d170      	bne.n	8000b66 <SPI_GPIO_Set_Pins+0x1ce>
		if (G_SPI_Config[1]->SPI_Mode == SPI_MASTER_MODE) {
 8000a84:	4b3b      	ldr	r3, [pc, #236]	; (8000b74 <SPI_GPIO_Set_Pins+0x1dc>)
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	2b04      	cmp	r3, #4
 8000a8c:	d138      	bne.n	8000b00 <SPI_GPIO_Set_Pins+0x168>
			switch (G_SPI_Config[1]->NSS) {
 8000a8e:	4b39      	ldr	r3, [pc, #228]	; (8000b74 <SPI_GPIO_Set_Pins+0x1dc>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	899b      	ldrh	r3, [r3, #12]
 8000a94:	2b04      	cmp	r3, #4
 8000a96:	d10d      	bne.n	8000ab4 <SPI_GPIO_Set_Pins+0x11c>
				SPI_GPIO_Config.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP ;
 8000a98:	2306      	movs	r3, #6
 8000a9a:	817b      	strh	r3, [r7, #10]
				SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_12 ;
 8000a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa0:	813b      	strh	r3, [r7, #8]
				SPI_GPIO_Config.GPIO_PinSpeed = GPIO_SPEED_10MHz ;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	81bb      	strh	r3, [r7, #12]
				GPIO_Init (GPIOA, &SPI_GPIO_Config) ;
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4832      	ldr	r0, [pc, #200]	; (8000b78 <SPI_GPIO_Set_Pins+0x1e0>)
 8000aae:	f7ff fdc3 	bl	8000638 <GPIO_Init>
				break ;
 8000ab2:	bf00      	nop
			SPI_GPIO_Config.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP ;
 8000ab4:	2306      	movs	r3, #6
 8000ab6:	817b      	strh	r3, [r7, #10]
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_13 ;
 8000ab8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000abc:	813b      	strh	r3, [r7, #8]
			SPI_GPIO_Config.GPIO_PinSpeed = GPIO_SPEED_10MHz ;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	81bb      	strh	r3, [r7, #12]
			GPIO_Init (GPIOA, &SPI_GPIO_Config) ;
 8000ac2:	f107 0308 	add.w	r3, r7, #8
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	482b      	ldr	r0, [pc, #172]	; (8000b78 <SPI_GPIO_Set_Pins+0x1e0>)
 8000aca:	f7ff fdb5 	bl	8000638 <GPIO_Init>
			SPI_GPIO_Config.GPIO_PinMode = GPIO_MODE_INPUT_FLO ;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	817b      	strh	r3, [r7, #10]
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_14 ;
 8000ad2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ad6:	813b      	strh	r3, [r7, #8]
			GPIO_Init (GPIOA, &SPI_GPIO_Config) ;
 8000ad8:	f107 0308 	add.w	r3, r7, #8
 8000adc:	4619      	mov	r1, r3
 8000ade:	4826      	ldr	r0, [pc, #152]	; (8000b78 <SPI_GPIO_Set_Pins+0x1e0>)
 8000ae0:	f7ff fdaa 	bl	8000638 <GPIO_Init>
			SPI_GPIO_Config.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP ;
 8000ae4:	2306      	movs	r3, #6
 8000ae6:	817b      	strh	r3, [r7, #10]
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_15 ;
 8000ae8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000aec:	813b      	strh	r3, [r7, #8]
			SPI_GPIO_Config.GPIO_PinSpeed = GPIO_SPEED_10MHz ;
 8000aee:	2301      	movs	r3, #1
 8000af0:	81bb      	strh	r3, [r7, #12]
			GPIO_Init (GPIOA, &SPI_GPIO_Config) ;
 8000af2:	f107 0308 	add.w	r3, r7, #8
 8000af6:	4619      	mov	r1, r3
 8000af8:	481f      	ldr	r0, [pc, #124]	; (8000b78 <SPI_GPIO_Set_Pins+0x1e0>)
 8000afa:	f7ff fd9d 	bl	8000638 <GPIO_Init>
}
 8000afe:	e032      	b.n	8000b66 <SPI_GPIO_Set_Pins+0x1ce>
			if (G_SPI_Config[1]->NSS == SPI_NSS_Hard_Slave) {
 8000b00:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <SPI_GPIO_Set_Pins+0x1dc>)
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	899b      	ldrh	r3, [r3, #12]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d10a      	bne.n	8000b20 <SPI_GPIO_Set_Pins+0x188>
				SPI_GPIO_Config.GPIO_PinMode = GPIO_MODE_INPUT_FLO ;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	817b      	strh	r3, [r7, #10]
				SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_12 ;
 8000b0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b12:	813b      	strh	r3, [r7, #8]
				GPIO_Init (GPIOA, &SPI_GPIO_Config) ;
 8000b14:	f107 0308 	add.w	r3, r7, #8
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4817      	ldr	r0, [pc, #92]	; (8000b78 <SPI_GPIO_Set_Pins+0x1e0>)
 8000b1c:	f7ff fd8c 	bl	8000638 <GPIO_Init>
			SPI_GPIO_Config.GPIO_PinMode = GPIO_MODE_INPUT_FLO ;
 8000b20:	2301      	movs	r3, #1
 8000b22:	817b      	strh	r3, [r7, #10]
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_13 ;
 8000b24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b28:	813b      	strh	r3, [r7, #8]
			GPIO_Init (GPIOA, &SPI_GPIO_Config) ;
 8000b2a:	f107 0308 	add.w	r3, r7, #8
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4811      	ldr	r0, [pc, #68]	; (8000b78 <SPI_GPIO_Set_Pins+0x1e0>)
 8000b32:	f7ff fd81 	bl	8000638 <GPIO_Init>
			SPI_GPIO_Config.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP ;
 8000b36:	2306      	movs	r3, #6
 8000b38:	817b      	strh	r3, [r7, #10]
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_14 ;
 8000b3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b3e:	813b      	strh	r3, [r7, #8]
			SPI_GPIO_Config.GPIO_PinSpeed = GPIO_SPEED_10MHz ;
 8000b40:	2301      	movs	r3, #1
 8000b42:	81bb      	strh	r3, [r7, #12]
			GPIO_Init (GPIOA, &SPI_GPIO_Config) ;
 8000b44:	f107 0308 	add.w	r3, r7, #8
 8000b48:	4619      	mov	r1, r3
 8000b4a:	480b      	ldr	r0, [pc, #44]	; (8000b78 <SPI_GPIO_Set_Pins+0x1e0>)
 8000b4c:	f7ff fd74 	bl	8000638 <GPIO_Init>
			SPI_GPIO_Config.GPIO_PinMode = GPIO_MODE_INPUT_FLO ;
 8000b50:	2301      	movs	r3, #1
 8000b52:	817b      	strh	r3, [r7, #10]
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_15 ;
 8000b54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b58:	813b      	strh	r3, [r7, #8]
			GPIO_Init (GPIOA, &SPI_GPIO_Config) ;
 8000b5a:	f107 0308 	add.w	r3, r7, #8
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4805      	ldr	r0, [pc, #20]	; (8000b78 <SPI_GPIO_Set_Pins+0x1e0>)
 8000b62:	f7ff fd69 	bl	8000638 <GPIO_Init>
}
 8000b66:	bf00      	nop
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40013000 	.word	0x40013000
 8000b74:	2000005c 	.word	0x2000005c
 8000b78:	40010800 	.word	0x40010800
 8000b7c:	40003800 	.word	0x40003800

08000b80 <SPI_ReceiveData>:
	}
	SPIx->DR = *data_buffer ;
}

void SPI_ReceiveData(SPI_t *SPIx, uint16_t *data_buffer ,Polling_MECH Polling)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	71fb      	strb	r3, [r7, #7]
	if (Polling == SPIenable) {
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d106      	bne.n	8000ba2 <SPI_ReceiveData+0x22>
		/*
		 *  RXNE: Receive buffer not empty
			0: Rx buffer empty
			1: Rx buffer not empty
		 */
		while (!(SPIx->SR & (uint16_t)(1 << 0))) ;
 8000b94:	bf00      	nop
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d0f9      	beq.n	8000b96 <SPI_ReceiveData+0x16>
	}
	*data_buffer = SPIx->DR ;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	68db      	ldr	r3, [r3, #12]
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	801a      	strh	r2, [r3, #0]
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr
	...

08000bb8 <SPI1_IRQHandler>:
	}
	*data_buffer = SPIx->DR ;
}

//-------------------------------------------ISRs---------------------------------------------------
void SPI1_IRQHandler (void) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
	IRQ_SOURCE irq_src ;
	irq_src.TXE = ( (SPI1->SR & (1 << 1)) >> 1 ) ;
 8000bbe:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <SPI1_IRQHandler+0x54>)
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	085b      	lsrs	r3, r3, #1
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	793b      	ldrb	r3, [r7, #4]
 8000bcc:	f362 0300 	bfi	r3, r2, #0, #1
 8000bd0:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( (SPI1->SR & (1 << 0)) >> 0 ) ;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <SPI1_IRQHandler+0x54>)
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	793b      	ldrb	r3, [r7, #4]
 8000bde:	f362 0341 	bfi	r3, r2, #1, #1
 8000be2:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( (SPI1->SR & (1 << 4)) >> 4 ) ;
 8000be4:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <SPI1_IRQHandler+0x54>)
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	091b      	lsrs	r3, r3, #4
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	793b      	ldrb	r3, [r7, #4]
 8000bf2:	f362 0382 	bfi	r3, r2, #2, #1
 8000bf6:	713b      	strb	r3, [r7, #4]
	G_SPI_Config[0]->IRQ_CallBack(irq_src) ;
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <SPI1_IRQHandler+0x58>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	695b      	ldr	r3, [r3, #20]
 8000bfe:	7938      	ldrb	r0, [r7, #4]
 8000c00:	4798      	blx	r3
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40013000 	.word	0x40013000
 8000c10:	2000005c 	.word	0x2000005c

08000c14 <SPI2_IRQHandler>:

void SPI2_IRQHandler (void) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
	IRQ_SOURCE irq_src ;
	irq_src.TXE = ( (SPI2->SR & (1 << 1)) >> 1 ) ;
 8000c1a:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <SPI2_IRQHandler+0x54>)
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	085b      	lsrs	r3, r3, #1
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	793b      	ldrb	r3, [r7, #4]
 8000c28:	f362 0300 	bfi	r3, r2, #0, #1
 8000c2c:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( (SPI2->SR & (1 << 0)) >> 0 ) ;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <SPI2_IRQHandler+0x54>)
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	793b      	ldrb	r3, [r7, #4]
 8000c3a:	f362 0341 	bfi	r3, r2, #1, #1
 8000c3e:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( (SPI2->SR & (1 << 4)) >> 4 ) ;
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <SPI2_IRQHandler+0x54>)
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	091b      	lsrs	r3, r3, #4
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	793b      	ldrb	r3, [r7, #4]
 8000c4e:	f362 0382 	bfi	r3, r2, #2, #1
 8000c52:	713b      	strb	r3, [r7, #4]
	G_SPI_Config[1]->IRQ_CallBack(irq_src) ;
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <SPI2_IRQHandler+0x58>)
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	7938      	ldrb	r0, [r7, #4]
 8000c5c:	4798      	blx	r3

}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40003800 	.word	0x40003800
 8000c6c:	2000005c 	.word	0x2000005c

08000c70 <UART_Init>:
 * @param [in] 		- UART_Config: All UART Configuration EXTI_PinConfig_t
 * @retval 			-none
 * Note				-none
 */
void UART_Init(USART_t *USARTx, USART_CONFIG* UART_Config)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
	Global_config = UART_Config;
 8000c7a:	4a57      	ldr	r2, [pc, #348]	; (8000dd8 <UART_Init+0x168>)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	6013      	str	r3, [r2, #0]
	uint32_t Pclk,BRR;

	//enable the Clock for USART
	if(USARTx == USART1)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a56      	ldr	r2, [pc, #344]	; (8000ddc <UART_Init+0x16c>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d106      	bne.n	8000c96 <UART_Init+0x26>
	{
		RCC_USART1_CLK_EN();
 8000c88:	4b55      	ldr	r3, [pc, #340]	; (8000de0 <UART_Init+0x170>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a54      	ldr	r2, [pc, #336]	; (8000de0 <UART_Init+0x170>)
 8000c8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	e014      	b.n	8000cc0 <UART_Init+0x50>
	}
	else if(USARTx == USART2)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a52      	ldr	r2, [pc, #328]	; (8000de4 <UART_Init+0x174>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d106      	bne.n	8000cac <UART_Init+0x3c>
	{
		RCC_USART2_CLK_EN();
 8000c9e:	4b50      	ldr	r3, [pc, #320]	; (8000de0 <UART_Init+0x170>)
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	4a4f      	ldr	r2, [pc, #316]	; (8000de0 <UART_Init+0x170>)
 8000ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca8:	61d3      	str	r3, [r2, #28]
 8000caa:	e009      	b.n	8000cc0 <UART_Init+0x50>
	}
	else if(USARTx == USART3)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a4e      	ldr	r2, [pc, #312]	; (8000de8 <UART_Init+0x178>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d105      	bne.n	8000cc0 <UART_Init+0x50>
	{
		RCC_USART3_CLK_EN();
 8000cb4:	4b4a      	ldr	r3, [pc, #296]	; (8000de0 <UART_Init+0x170>)
 8000cb6:	69db      	ldr	r3, [r3, #28]
 8000cb8:	4a49      	ldr	r2, [pc, #292]	; (8000de0 <UART_Init+0x170>)
 8000cba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cbe:	61d3      	str	r3, [r2, #28]
	}
	//enable USART Module
	//CR1  Bit 13 UE: USART enable
	USARTx->CR1 |= 1<<13 ;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	60da      	str	r2, [r3, #12]

	//Enable USART Tx and Rx
	//CR1 Bit 3 TE: Transmitter enable & Bit 2 RE: Receiver enable
	USARTx->CR1 |= UART_Config->USART_MODE;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	683a      	ldr	r2, [r7, #0]
 8000cd2:	7812      	ldrb	r2, [r2, #0]
 8000cd4:	431a      	orrs	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	60da      	str	r2, [r3, #12]

	//PAYLOAD Width
	//CR1  Bit 12 M: Word length
	USARTx->CR1 |= UART_Config->DATA_LENGTH;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	683a      	ldr	r2, [r7, #0]
 8000ce0:	7a12      	ldrb	r2, [r2, #8]
 8000ce2:	431a      	orrs	r2, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	60da      	str	r2, [r3, #12]

	//parity control bit
	//CR1 	Bit 10 PCE: Parity control enable     Bit 9 PS: Parity selection
	USARTx->CR1 |= UART_Config->PARITY;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	683a      	ldr	r2, [r7, #0]
 8000cee:	7a52      	ldrb	r2, [r2, #9]
 8000cf0:	431a      	orrs	r2, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	60da      	str	r2, [r3, #12]

	//number of stop bits
	//CR2  Bits 13:12 STOP: STOP bits
	USARTx->CR1 |= UART_Config->STOPBITS;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	683a      	ldr	r2, [r7, #0]
 8000cfc:	7a92      	ldrb	r2, [r2, #10]
 8000cfe:	431a      	orrs	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	60da      	str	r2, [r3, #12]

	//flow control
	//CR3  Bit 9 CTSE: CTS enable   Bit 8 RTSE: RTS enable
	USARTx->CR1 |= UART_Config->FLOW_CONTROL;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	683a      	ldr	r2, [r7, #0]
 8000d0a:	7ad2      	ldrb	r2, [r2, #11]
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	60da      	str	r2, [r3, #12]

	//config baud rate
	if(USARTx == USART1)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a31      	ldr	r2, [pc, #196]	; (8000ddc <UART_Init+0x16c>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d103      	bne.n	8000d22 <UART_Init+0xb2>
	{
		Pclk = RCC_Get_PCLK2_Frequency();
 8000d1a:	f7ff fd9b 	bl	8000854 <RCC_Get_PCLK2_Frequency>
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	e002      	b.n	8000d28 <UART_Init+0xb8>
	}
	else
	{
		Pclk = RCC_Get_PCLK1_Frequency();
 8000d22:	f7ff fd83 	bl	800082c <RCC_Get_PCLK1_Frequency>
 8000d26:	60f8      	str	r0, [r7, #12]
	}
	BRR = UART_BRR_Register(Pclk,UART_Config->USART_BAUDRATE);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	011b      	lsls	r3, r3, #4
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d34:	0119      	lsls	r1, r3, #4
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	4413      	add	r3, r2
 8000d3e:	009a      	lsls	r2, r3, #2
 8000d40:	441a      	add	r2, r3
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	011b      	lsls	r3, r3, #4
 8000d52:	68f8      	ldr	r0, [r7, #12]
 8000d54:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d58:	2064      	movs	r0, #100	; 0x64
 8000d5a:	fb00 f303 	mul.w	r3, r0, r3
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	011b      	lsls	r3, r3, #4
 8000d62:	4a22      	ldr	r2, [pc, #136]	; (8000dec <UART_Init+0x17c>)
 8000d64:	fba2 2303 	umull	r2, r3, r2, r3
 8000d68:	095b      	lsrs	r3, r3, #5
 8000d6a:	f003 030f 	and.w	r3, r3, #15
 8000d6e:	430b      	orrs	r3, r1
 8000d70:	60bb      	str	r3, [r7, #8]

	USARTx->BRR = BRR;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	68ba      	ldr	r2, [r7, #8]
 8000d76:	609a      	str	r2, [r3, #8]

	//ENABLE / DISABLE Interrupt
	if(UART_Config->IQR_ENABLE != UART_IRQ_Enable_NONE)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	7b1b      	ldrb	r3, [r3, #12]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d026      	beq.n	8000dce <UART_Init+0x15e>
	{
		USARTx->CR1 |= UART_Config->IQR_ENABLE;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	683a      	ldr	r2, [r7, #0]
 8000d86:	7b12      	ldrb	r2, [r2, #12]
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	60da      	str	r2, [r3, #12]
		if(USARTx == USART1)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <UART_Init+0x16c>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d106      	bne.n	8000da4 <UART_Init+0x134>
		{
			NVIC_IRQ37_USART1_Enable();
 8000d96:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <UART_Init+0x180>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a15      	ldr	r2, [pc, #84]	; (8000df0 <UART_Init+0x180>)
 8000d9c:	f043 0320 	orr.w	r3, r3, #32
 8000da0:	6013      	str	r3, [r2, #0]
		else if(USARTx == USART3)
		{
			NVIC_IRQ39_USART3_Enable();
		}
	}
}
 8000da2:	e014      	b.n	8000dce <UART_Init+0x15e>
		else if(USARTx == USART2)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a0f      	ldr	r2, [pc, #60]	; (8000de4 <UART_Init+0x174>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d106      	bne.n	8000dba <UART_Init+0x14a>
			NVIC_IRQ38_USART2_Enable();
 8000dac:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <UART_Init+0x180>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0f      	ldr	r2, [pc, #60]	; (8000df0 <UART_Init+0x180>)
 8000db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000db6:	6013      	str	r3, [r2, #0]
}
 8000db8:	e009      	b.n	8000dce <UART_Init+0x15e>
		else if(USARTx == USART3)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <UART_Init+0x178>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d105      	bne.n	8000dce <UART_Init+0x15e>
			NVIC_IRQ39_USART3_Enable();
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <UART_Init+0x180>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <UART_Init+0x180>)
 8000dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dcc:	6013      	str	r3, [r2, #0]
}
 8000dce:	bf00      	nop
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000064 	.word	0x20000064
 8000ddc:	40013800 	.word	0x40013800
 8000de0:	40021000 	.word	0x40021000
 8000de4:	40014400 	.word	0x40014400
 8000de8:	40014800 	.word	0x40014800
 8000dec:	51eb851f 	.word	0x51eb851f
 8000df0:	e000e104 	.word	0xe000e104

08000df4 <UART_GPIO_Set_Pins>:
		RCC_USART3_CLK_DI();
		NVIC_IRQ39_USART3_Disable();
	}
}
void UART_GPIO_Set_Pins(USART_t *USARTx)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	GPIO_Config_t Pin_Config;
	if(USARTx == USART1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a2b      	ldr	r2, [pc, #172]	; (8000eac <UART_GPIO_Set_Pins+0xb8>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d118      	bne.n	8000e36 <UART_GPIO_Set_Pins+0x42>
	{
		//PA9 TX
		Pin_Config.GPIO_PinNumber = GPIO_PIN_9;
 8000e04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e08:	813b      	strh	r3, [r7, #8]
		Pin_Config.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
 8000e0a:	2306      	movs	r3, #6
 8000e0c:	817b      	strh	r3, [r7, #10]
		Pin_Config.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	81bb      	strh	r3, [r7, #12]
		GPIO_Init(GPIOA, &Pin_Config);
 8000e12:	f107 0308 	add.w	r3, r7, #8
 8000e16:	4619      	mov	r1, r3
 8000e18:	4825      	ldr	r0, [pc, #148]	; (8000eb0 <UART_GPIO_Set_Pins+0xbc>)
 8000e1a:	f7ff fc0d 	bl	8000638 <GPIO_Init>

		// PA10 Rx
		Pin_Config.GPIO_PinNumber = GPIO_PIN_10;
 8000e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e22:	813b      	strh	r3, [r7, #8]
		Pin_Config.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
 8000e24:	2301      	movs	r3, #1
 8000e26:	817b      	strh	r3, [r7, #10]
		GPIO_Init(GPIOA, &Pin_Config);
 8000e28:	f107 0308 	add.w	r3, r7, #8
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4820      	ldr	r0, [pc, #128]	; (8000eb0 <UART_GPIO_Set_Pins+0xbc>)
 8000e30:	f7ff fc02 	bl	8000638 <GPIO_Init>
			Pin_Config.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
			Pin_Config.GPIO_PinSpeed = GPIO_SPEED_10MHz;
			GPIO_Init(GPIOB, &Pin_Config);
		}
	}
}
 8000e34:	e036      	b.n	8000ea4 <UART_GPIO_Set_Pins+0xb0>
	else if(USARTx == USART2)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a1e      	ldr	r2, [pc, #120]	; (8000eb4 <UART_GPIO_Set_Pins+0xc0>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d116      	bne.n	8000e6c <UART_GPIO_Set_Pins+0x78>
		Pin_Config.GPIO_PinNumber = GPIO_PIN_2;
 8000e3e:	2304      	movs	r3, #4
 8000e40:	813b      	strh	r3, [r7, #8]
		Pin_Config.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
 8000e42:	2306      	movs	r3, #6
 8000e44:	817b      	strh	r3, [r7, #10]
		Pin_Config.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 8000e46:	2301      	movs	r3, #1
 8000e48:	81bb      	strh	r3, [r7, #12]
		GPIO_Init(GPIOA, &Pin_Config);
 8000e4a:	f107 0308 	add.w	r3, r7, #8
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4817      	ldr	r0, [pc, #92]	; (8000eb0 <UART_GPIO_Set_Pins+0xbc>)
 8000e52:	f7ff fbf1 	bl	8000638 <GPIO_Init>
		Pin_Config.GPIO_PinNumber = GPIO_PIN_3;
 8000e56:	2308      	movs	r3, #8
 8000e58:	813b      	strh	r3, [r7, #8]
		Pin_Config.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	817b      	strh	r3, [r7, #10]
		GPIO_Init(GPIOA, &Pin_Config);
 8000e5e:	f107 0308 	add.w	r3, r7, #8
 8000e62:	4619      	mov	r1, r3
 8000e64:	4812      	ldr	r0, [pc, #72]	; (8000eb0 <UART_GPIO_Set_Pins+0xbc>)
 8000e66:	f7ff fbe7 	bl	8000638 <GPIO_Init>
}
 8000e6a:	e01b      	b.n	8000ea4 <UART_GPIO_Set_Pins+0xb0>
	else if(USARTx == USART3)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a12      	ldr	r2, [pc, #72]	; (8000eb8 <UART_GPIO_Set_Pins+0xc4>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d117      	bne.n	8000ea4 <UART_GPIO_Set_Pins+0xb0>
		Pin_Config.GPIO_PinNumber = GPIO_PIN_10;
 8000e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e78:	813b      	strh	r3, [r7, #8]
		Pin_Config.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
 8000e7a:	2306      	movs	r3, #6
 8000e7c:	817b      	strh	r3, [r7, #10]
		Pin_Config.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	81bb      	strh	r3, [r7, #12]
		GPIO_Init(GPIOB, &Pin_Config);
 8000e82:	f107 0308 	add.w	r3, r7, #8
 8000e86:	4619      	mov	r1, r3
 8000e88:	480c      	ldr	r0, [pc, #48]	; (8000ebc <UART_GPIO_Set_Pins+0xc8>)
 8000e8a:	f7ff fbd5 	bl	8000638 <GPIO_Init>
		Pin_Config.GPIO_PinNumber = GPIO_PIN_11;
 8000e8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e92:	813b      	strh	r3, [r7, #8]
		Pin_Config.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
 8000e94:	2301      	movs	r3, #1
 8000e96:	817b      	strh	r3, [r7, #10]
		GPIO_Init(GPIOB, &Pin_Config);
 8000e98:	f107 0308 	add.w	r3, r7, #8
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4807      	ldr	r0, [pc, #28]	; (8000ebc <UART_GPIO_Set_Pins+0xc8>)
 8000ea0:	f7ff fbca 	bl	8000638 <GPIO_Init>
}
 8000ea4:	bf00      	nop
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40013800 	.word	0x40013800
 8000eb0:	40010800 	.word	0x40010800
 8000eb4:	40014400 	.word	0x40014400
 8000eb8:	40014800 	.word	0x40014800
 8000ebc:	40010c00 	.word	0x40010c00

08000ec0 <UART_SendData>:
void UART_SendData(USART_t *USARTx, uint16_t *pTxBuffer,Polling_mechism Polling)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	71fb      	strb	r3, [r7, #7]
	if(Polling == enable)
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d106      	bne.n	8000ee2 <UART_SendData+0x22>
		while(!(USARTx->SR & 1<<7));//when TXE is empty it's set by 1
 8000ed4:	bf00      	nop
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d0f9      	beq.n	8000ed6 <UART_SendData+0x16>
	//			When transmitting with the parity enabled (PCE bit set to 1 in the USART_CR1 register),
	//			the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
	//			because it is replaced by the parity.
	//			When receiving with the parity enabled, the value read in the MSB bit is the received parity
	//			bit.
	if(Global_config->DATA_LENGTH == UART_DATA_Length_8B)
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <UART_SendData+0x50>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	7a1b      	ldrb	r3, [r3, #8]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d105      	bne.n	8000ef8 <UART_SendData+0x38>
	{
		USARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	605a      	str	r2, [r3, #4]
	}
	else
	{
		USARTx->DR = (*pTxBuffer & (uint16_t)0x1FF);
	}
}
 8000ef6:	e005      	b.n	8000f04 <UART_SendData+0x44>
		USARTx->DR = (*pTxBuffer & (uint16_t)0x1FF);
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	605a      	str	r2, [r3, #4]
}
 8000f04:	bf00      	nop
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000064 	.word	0x20000064

08000f14 <USART1_IRQHandler>:
void UART_TRANS_COMPLETE(USART_t *USARTx )
{
	while(USARTx->SR & 1<<6);
}
void USART1_IRQHandler (void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
	Global_config->IRQ_CallBack();
 8000f18:	4b02      	ldr	r3, [pc, #8]	; (8000f24 <USART1_IRQHandler+0x10>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	691b      	ldr	r3, [r3, #16]
 8000f1e:	4798      	blx	r3
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000064 	.word	0x20000064

08000f28 <USART2_IRQHandler>:
void USART2_IRQHandler (void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	Global_config->IRQ_CallBack();
 8000f2c:	4b02      	ldr	r3, [pc, #8]	; (8000f38 <USART2_IRQHandler+0x10>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	691b      	ldr	r3, [r3, #16]
 8000f32:	4798      	blx	r3
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000064 	.word	0x20000064

08000f3c <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	Global_config->IRQ_CallBack();
 8000f40:	4b02      	ldr	r3, [pc, #8]	; (8000f4c <USART3_IRQHandler+0x10>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	691b      	ldr	r3, [r3, #16]
 8000f46:	4798      	blx	r3
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000064 	.word	0x20000064

08000f50 <__libc_init_array>:
 8000f50:	b570      	push	{r4, r5, r6, lr}
 8000f52:	2600      	movs	r6, #0
 8000f54:	4d0c      	ldr	r5, [pc, #48]	; (8000f88 <__libc_init_array+0x38>)
 8000f56:	4c0d      	ldr	r4, [pc, #52]	; (8000f8c <__libc_init_array+0x3c>)
 8000f58:	1b64      	subs	r4, r4, r5
 8000f5a:	10a4      	asrs	r4, r4, #2
 8000f5c:	42a6      	cmp	r6, r4
 8000f5e:	d109      	bne.n	8000f74 <__libc_init_array+0x24>
 8000f60:	f000 f81a 	bl	8000f98 <_init>
 8000f64:	2600      	movs	r6, #0
 8000f66:	4d0a      	ldr	r5, [pc, #40]	; (8000f90 <__libc_init_array+0x40>)
 8000f68:	4c0a      	ldr	r4, [pc, #40]	; (8000f94 <__libc_init_array+0x44>)
 8000f6a:	1b64      	subs	r4, r4, r5
 8000f6c:	10a4      	asrs	r4, r4, #2
 8000f6e:	42a6      	cmp	r6, r4
 8000f70:	d105      	bne.n	8000f7e <__libc_init_array+0x2e>
 8000f72:	bd70      	pop	{r4, r5, r6, pc}
 8000f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f78:	4798      	blx	r3
 8000f7a:	3601      	adds	r6, #1
 8000f7c:	e7ee      	b.n	8000f5c <__libc_init_array+0xc>
 8000f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f82:	4798      	blx	r3
 8000f84:	3601      	adds	r6, #1
 8000f86:	e7f2      	b.n	8000f6e <__libc_init_array+0x1e>
 8000f88:	08000fc8 	.word	0x08000fc8
 8000f8c:	08000fc8 	.word	0x08000fc8
 8000f90:	08000fc8 	.word	0x08000fc8
 8000f94:	08000fcc 	.word	0x08000fcc

08000f98 <_init>:
 8000f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f9a:	bf00      	nop
 8000f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f9e:	bc08      	pop	{r3}
 8000fa0:	469e      	mov	lr, r3
 8000fa2:	4770      	bx	lr

08000fa4 <_fini>:
 8000fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fa6:	bf00      	nop
 8000fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000faa:	bc08      	pop	{r3}
 8000fac:	469e      	mov	lr, r3
 8000fae:	4770      	bx	lr
