
Atmega32_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000069a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  0000069a  0000072e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000032  00800076  00800076  00000744  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000774  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000286b  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d10  00000000  00000000  00003233  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012b6  00000000  00000000  00003f43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000608  00000000  00000000  000051fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ab5  00000000  00000000  00005804  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000245d  00000000  00000000  000062b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  00008716  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__vector_1>
   8:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__vector_2>
   c:	0c 94 28 01 	jmp	0x250	; 0x250 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e9       	ldi	r30, 0x9A	; 154
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3a       	cpi	r26, 0xA8	; 168
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 26 02 	call	0x44c	; 0x44c <main>
  8a:	0c 94 4b 03 	jmp	0x696	; 0x696 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <gpio_pin_direction_intialize>:
	{
		*PORTX_Register[port] ^= 0xFF;
		ret = E_OK;
	}
	return ret;
}
  92:	fc 01       	movw	r30, r24
  94:	89 2b       	or	r24, r25
  96:	a9 f1       	breq	.+106    	; 0x102 <gpio_pin_direction_intialize+0x70>
  98:	20 81       	ld	r18, Z
  9a:	26 95       	lsr	r18
  9c:	26 95       	lsr	r18
  9e:	26 95       	lsr	r18
  a0:	27 70       	andi	r18, 0x07	; 7
  a2:	80 81       	ld	r24, Z
  a4:	86 fd       	sbrc	r24, 6
  a6:	16 c0       	rjmp	.+44     	; 0xd4 <gpio_pin_direction_intialize+0x42>
  a8:	e8 2f       	mov	r30, r24
  aa:	e7 70       	andi	r30, 0x07	; 7
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	ee 0f       	add	r30, r30
  b0:	ff 1f       	adc	r31, r31
  b2:	e8 59       	subi	r30, 0x98	; 152
  b4:	ff 4f       	sbci	r31, 0xFF	; 255
  b6:	01 90       	ld	r0, Z+
  b8:	f0 81       	ld	r31, Z
  ba:	e0 2d       	mov	r30, r0
  bc:	30 81       	ld	r19, Z
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <gpio_pin_direction_intialize+0x36>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	2a 95       	dec	r18
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <gpio_pin_direction_intialize+0x32>
  cc:	83 2b       	or	r24, r19
  ce:	80 83       	st	Z, r24
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	08 95       	ret
  d4:	e0 81       	ld	r30, Z
  d6:	e7 70       	andi	r30, 0x07	; 7
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	ee 0f       	add	r30, r30
  dc:	ff 1f       	adc	r31, r31
  de:	e8 59       	subi	r30, 0x98	; 152
  e0:	ff 4f       	sbci	r31, 0xFF	; 255
  e2:	01 90       	ld	r0, Z+
  e4:	f0 81       	ld	r31, Z
  e6:	e0 2d       	mov	r30, r0
  e8:	30 81       	ld	r19, Z
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <gpio_pin_direction_intialize+0x62>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	2a 95       	dec	r18
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <gpio_pin_direction_intialize+0x5e>
  f8:	80 95       	com	r24
  fa:	83 23       	and	r24, r19
  fc:	80 83       	st	Z, r24
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	08 95       	ret
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	08 95       	ret

00000106 <gpio_pin_write_logic>:
 106:	00 97       	sbiw	r24, 0x00	; 0
 108:	d1 f1       	breq	.+116    	; 0x17e <gpio_pin_write_logic+0x78>
 10a:	dc 01       	movw	r26, r24
 10c:	2c 91       	ld	r18, X
 10e:	26 95       	lsr	r18
 110:	26 95       	lsr	r18
 112:	26 95       	lsr	r18
 114:	27 70       	andi	r18, 0x07	; 7
 116:	66 23       	and	r22, r22
 118:	19 f0       	breq	.+6      	; 0x120 <gpio_pin_write_logic+0x1a>
 11a:	61 30       	cpi	r22, 0x01	; 1
 11c:	c9 f0       	breq	.+50     	; 0x150 <gpio_pin_write_logic+0x4a>
 11e:	31 c0       	rjmp	.+98     	; 0x182 <gpio_pin_write_logic+0x7c>
 120:	dc 01       	movw	r26, r24
 122:	ec 91       	ld	r30, X
 124:	e7 70       	andi	r30, 0x07	; 7
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	ee 0f       	add	r30, r30
 12a:	ff 1f       	adc	r31, r31
 12c:	e0 5a       	subi	r30, 0xA0	; 160
 12e:	ff 4f       	sbci	r31, 0xFF	; 255
 130:	01 90       	ld	r0, Z+
 132:	f0 81       	ld	r31, Z
 134:	e0 2d       	mov	r30, r0
 136:	30 81       	ld	r19, Z
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <gpio_pin_write_logic+0x3c>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	2a 95       	dec	r18
 144:	e2 f7       	brpl	.-8      	; 0x13e <gpio_pin_write_logic+0x38>
 146:	80 95       	com	r24
 148:	83 23       	and	r24, r19
 14a:	80 83       	st	Z, r24
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	08 95       	ret
 150:	dc 01       	movw	r26, r24
 152:	ec 91       	ld	r30, X
 154:	e7 70       	andi	r30, 0x07	; 7
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	ee 0f       	add	r30, r30
 15a:	ff 1f       	adc	r31, r31
 15c:	e0 5a       	subi	r30, 0xA0	; 160
 15e:	ff 4f       	sbci	r31, 0xFF	; 255
 160:	01 90       	ld	r0, Z+
 162:	f0 81       	ld	r31, Z
 164:	e0 2d       	mov	r30, r0
 166:	30 81       	ld	r19, Z
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <gpio_pin_write_logic+0x6c>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	2a 95       	dec	r18
 174:	e2 f7       	brpl	.-8      	; 0x16e <gpio_pin_write_logic+0x68>
 176:	83 2b       	or	r24, r19
 178:	80 83       	st	Z, r24
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	08 95       	ret
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	08 95       	ret
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	08 95       	ret

00000186 <gpio_pin_intialize>:
ReturnType gpio_pin_intialize(const Pin_Config *pin_config)
{
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
	ReturnType ret = E_NOT_OK;
	if((NULL == pin_config)||(pin_config->pin > PORT_PIN_MAX_NUMBER-1))
 18a:	00 97       	sbiw	r24, 0x00	; 0
 18c:	59 f0       	breq	.+22     	; 0x1a4 <gpio_pin_intialize+0x1e>
 18e:	ec 01       	movw	r28, r24
	{
		ret = E_NOT_OK;
	}
	else
	{
		ret = gpio_pin_direction_intialize(pin_config);
 190:	0e 94 49 00 	call	0x92	; 0x92 <gpio_pin_direction_intialize>
		ret = gpio_pin_write_logic(pin_config,pin_config->logic);
 194:	68 81       	ld	r22, Y
 196:	67 fb       	bst	r22, 7
 198:	66 27       	eor	r22, r22
 19a:	60 f9       	bld	r22, 0
 19c:	ce 01       	movw	r24, r28
 19e:	0e 94 83 00 	call	0x106	; 0x106 <gpio_pin_write_logic>
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <gpio_pin_intialize+0x20>
ReturnType gpio_pin_intialize(const Pin_Config *pin_config)
{
	ReturnType ret = E_NOT_OK;
	if((NULL == pin_config)||(pin_config->pin > PORT_PIN_MAX_NUMBER-1))
	{
		ret = E_NOT_OK;
 1a4:	80 e0       	ldi	r24, 0x00	; 0
	{
		ret = gpio_pin_direction_intialize(pin_config);
		ret = gpio_pin_write_logic(pin_config,pin_config->logic);
	}
	return ret;
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

000001ac <__vector_1>:
	}
}

// Interrupt service routine for INT0
ISR (INT0_vect)
{
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	2f 93       	push	r18
 1b8:	3f 93       	push	r19
 1ba:	4f 93       	push	r20
 1bc:	5f 93       	push	r21
 1be:	6f 93       	push	r22
 1c0:	7f 93       	push	r23
 1c2:	8f 93       	push	r24
 1c4:	9f 93       	push	r25
 1c6:	af 93       	push	r26
 1c8:	bf 93       	push	r27
 1ca:	ef 93       	push	r30
 1cc:	ff 93       	push	r31
	if (EXTI0_CallBack != NULL)
 1ce:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <EXTI0_CallBack>
 1d2:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <EXTI0_CallBack+0x1>
 1d6:	30 97       	sbiw	r30, 0x00	; 0
 1d8:	09 f0       	breq	.+2      	; 0x1dc <__vector_1+0x30>
	{
		EXTI0_CallBack();
 1da:	09 95       	icall
	}
}
 1dc:	ff 91       	pop	r31
 1de:	ef 91       	pop	r30
 1e0:	bf 91       	pop	r27
 1e2:	af 91       	pop	r26
 1e4:	9f 91       	pop	r25
 1e6:	8f 91       	pop	r24
 1e8:	7f 91       	pop	r23
 1ea:	6f 91       	pop	r22
 1ec:	5f 91       	pop	r21
 1ee:	4f 91       	pop	r20
 1f0:	3f 91       	pop	r19
 1f2:	2f 91       	pop	r18
 1f4:	0f 90       	pop	r0
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	0f 90       	pop	r0
 1fa:	1f 90       	pop	r1
 1fc:	18 95       	reti

000001fe <__vector_2>:
// Interrupt service routine for INT1
ISR (INT1_vect)
{
 1fe:	1f 92       	push	r1
 200:	0f 92       	push	r0
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	0f 92       	push	r0
 206:	11 24       	eor	r1, r1
 208:	2f 93       	push	r18
 20a:	3f 93       	push	r19
 20c:	4f 93       	push	r20
 20e:	5f 93       	push	r21
 210:	6f 93       	push	r22
 212:	7f 93       	push	r23
 214:	8f 93       	push	r24
 216:	9f 93       	push	r25
 218:	af 93       	push	r26
 21a:	bf 93       	push	r27
 21c:	ef 93       	push	r30
 21e:	ff 93       	push	r31
	if (EXTI1_CallBack != NULL)
 220:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <__data_end>
 224:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <__data_end+0x1>
 228:	30 97       	sbiw	r30, 0x00	; 0
 22a:	09 f0       	breq	.+2      	; 0x22e <__vector_2+0x30>
	{
		EXTI1_CallBack();
 22c:	09 95       	icall
	}
}
 22e:	ff 91       	pop	r31
 230:	ef 91       	pop	r30
 232:	bf 91       	pop	r27
 234:	af 91       	pop	r26
 236:	9f 91       	pop	r25
 238:	8f 91       	pop	r24
 23a:	7f 91       	pop	r23
 23c:	6f 91       	pop	r22
 23e:	5f 91       	pop	r21
 240:	4f 91       	pop	r20
 242:	3f 91       	pop	r19
 244:	2f 91       	pop	r18
 246:	0f 90       	pop	r0
 248:	0f be       	out	0x3f, r0	; 63
 24a:	0f 90       	pop	r0
 24c:	1f 90       	pop	r1
 24e:	18 95       	reti

00000250 <__vector_3>:

// Interrupt service routine for INT2
ISR (INT2_vect)
{
 250:	1f 92       	push	r1
 252:	0f 92       	push	r0
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
 25a:	2f 93       	push	r18
 25c:	3f 93       	push	r19
 25e:	4f 93       	push	r20
 260:	5f 93       	push	r21
 262:	6f 93       	push	r22
 264:	7f 93       	push	r23
 266:	8f 93       	push	r24
 268:	9f 93       	push	r25
 26a:	af 93       	push	r26
 26c:	bf 93       	push	r27
 26e:	ef 93       	push	r30
 270:	ff 93       	push	r31
	if (EXTI2_CallBack != NULL)
 272:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <EXTI2_CallBack>
 276:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <EXTI2_CallBack+0x1>
 27a:	30 97       	sbiw	r30, 0x00	; 0
 27c:	09 f0       	breq	.+2      	; 0x280 <__vector_3+0x30>
	{
		EXTI2_CallBack();
 27e:	09 95       	icall
	}
 280:	ff 91       	pop	r31
 282:	ef 91       	pop	r30
 284:	bf 91       	pop	r27
 286:	af 91       	pop	r26
 288:	9f 91       	pop	r25
 28a:	8f 91       	pop	r24
 28c:	7f 91       	pop	r23
 28e:	6f 91       	pop	r22
 290:	5f 91       	pop	r21
 292:	4f 91       	pop	r20
 294:	3f 91       	pop	r19
 296:	2f 91       	pop	r18
 298:	0f 90       	pop	r0
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	0f 90       	pop	r0
 29e:	1f 90       	pop	r1
 2a0:	18 95       	reti

000002a2 <Enable_GI>:

void Enable_GI(void)
{
	//SET_BIT(SREG,7);
	//SREG |= 1<<7;
	sei();
 2a2:	78 94       	sei
 2a4:	08 95       	ret

000002a6 <Disable_GI>:

void Disable_GI(void)
{
	//CLR_BIT(SREG,7);
	//SREG &= ~(1<<7);
	cli();
 2a6:	f8 94       	cli
 2a8:	08 95       	ret

000002aa <lcd_send_4bits>:
	switch(row)
	{
		case ROW1: LCD_4bit_SendCommand(LCD,(0x80+column));break;
		case ROW2: LCD_4bit_SendCommand(LCD,(0xC0+column));break;
		case ROW3: LCD_4bit_SendCommand(LCD,(0x94+column));break;
		case ROW4: LCD_4bit_SendCommand(LCD,(0xD4+column));break;
 2aa:	ef 92       	push	r14
 2ac:	ff 92       	push	r15
 2ae:	1f 93       	push	r17
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	7c 01       	movw	r14, r24
 2b6:	16 2f       	mov	r17, r22
 2b8:	c0 e0       	ldi	r28, 0x00	; 0
 2ba:	d0 e0       	ldi	r29, 0x00	; 0
 2bc:	10 c0       	rjmp	.+32     	; 0x2de <lcd_send_4bits+0x34>
 2be:	61 2f       	mov	r22, r17
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	0c 2e       	mov	r0, r28
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <lcd_send_4bits+0x20>
 2c6:	75 95       	asr	r23
 2c8:	67 95       	ror	r22
 2ca:	0a 94       	dec	r0
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <lcd_send_4bits+0x1c>
 2ce:	ce 01       	movw	r24, r28
 2d0:	02 96       	adiw	r24, 0x02	; 2
 2d2:	61 70       	andi	r22, 0x01	; 1
 2d4:	8e 0d       	add	r24, r14
 2d6:	9f 1d       	adc	r25, r15
 2d8:	0e 94 83 00 	call	0x106	; 0x106 <gpio_pin_write_logic>
 2dc:	21 96       	adiw	r28, 0x01	; 1
 2de:	c4 30       	cpi	r28, 0x04	; 4
 2e0:	d1 05       	cpc	r29, r1
 2e2:	6c f3       	brlt	.-38     	; 0x2be <lcd_send_4bits+0x14>
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	1f 91       	pop	r17
 2ea:	ff 90       	pop	r15
 2ec:	ef 90       	pop	r14
 2ee:	08 95       	ret

000002f0 <lcd_send_EnableSignal>:
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	ec 01       	movw	r28, r24
 2f6:	21 96       	adiw	r28, 0x01	; 1
 2f8:	61 e0       	ldi	r22, 0x01	; 1
 2fa:	ce 01       	movw	r24, r28
 2fc:	0e 94 83 00 	call	0x106	; 0x106 <gpio_pin_write_logic>
 300:	83 e0       	ldi	r24, 0x03	; 3
 302:	8a 95       	dec	r24
 304:	f1 f7       	brne	.-4      	; 0x302 <lcd_send_EnableSignal+0x12>
 306:	00 00       	nop
 308:	60 e0       	ldi	r22, 0x00	; 0
 30a:	ce 01       	movw	r24, r28
 30c:	0e 94 83 00 	call	0x106	; 0x106 <gpio_pin_write_logic>
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	08 95       	ret

00000316 <LCD_4bit_SendCommand>:
 316:	1f 93       	push	r17
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	00 97       	sbiw	r24, 0x00	; 0
 31e:	b9 f0       	breq	.+46     	; 0x34e <LCD_4bit_SendCommand+0x38>
 320:	16 2f       	mov	r17, r22
 322:	ec 01       	movw	r28, r24
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	0e 94 83 00 	call	0x106	; 0x106 <gpio_pin_write_logic>
 32a:	61 2f       	mov	r22, r17
 32c:	62 95       	swap	r22
 32e:	6f 70       	andi	r22, 0x0F	; 15
 330:	ce 01       	movw	r24, r28
 332:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_send_4bits>
 336:	ce 01       	movw	r24, r28
 338:	0e 94 78 01 	call	0x2f0	; 0x2f0 <lcd_send_EnableSignal>
 33c:	61 2f       	mov	r22, r17
 33e:	ce 01       	movw	r24, r28
 340:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_send_4bits>
 344:	ce 01       	movw	r24, r28
 346:	0e 94 78 01 	call	0x2f0	; 0x2f0 <lcd_send_EnableSignal>
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	01 c0       	rjmp	.+2      	; 0x350 <LCD_4bit_SendCommand+0x3a>
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	1f 91       	pop	r17
 356:	08 95       	ret

00000358 <LCD_4bit_Init>:
 358:	0f 93       	push	r16
 35a:	1f 93       	push	r17
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	00 97       	sbiw	r24, 0x00	; 0
 362:	09 f4       	brne	.+2      	; 0x366 <LCD_4bit_Init+0xe>
 364:	4c c0       	rjmp	.+152    	; 0x3fe <LCD_4bit_Init+0xa6>
 366:	ec 01       	movw	r28, r24
 368:	0e 94 c3 00 	call	0x186	; 0x186 <gpio_pin_intialize>
 36c:	ce 01       	movw	r24, r28
 36e:	01 96       	adiw	r24, 0x01	; 1
 370:	0e 94 c3 00 	call	0x186	; 0x186 <gpio_pin_intialize>
 374:	00 e0       	ldi	r16, 0x00	; 0
 376:	10 e0       	ldi	r17, 0x00	; 0
 378:	08 c0       	rjmp	.+16     	; 0x38a <LCD_4bit_Init+0x32>
 37a:	c8 01       	movw	r24, r16
 37c:	02 96       	adiw	r24, 0x02	; 2
 37e:	8c 0f       	add	r24, r28
 380:	9d 1f       	adc	r25, r29
 382:	0e 94 c3 00 	call	0x186	; 0x186 <gpio_pin_intialize>
 386:	0f 5f       	subi	r16, 0xFF	; 255
 388:	1f 4f       	sbci	r17, 0xFF	; 255
 38a:	04 30       	cpi	r16, 0x04	; 4
 38c:	11 05       	cpc	r17, r1
 38e:	ac f3       	brlt	.-22     	; 0x37a <LCD_4bit_Init+0x22>
 390:	87 e8       	ldi	r24, 0x87	; 135
 392:	93 e1       	ldi	r25, 0x13	; 19
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <LCD_4bit_Init+0x3c>
 398:	00 c0       	rjmp	.+0      	; 0x39a <LCD_4bit_Init+0x42>
 39a:	00 00       	nop
 39c:	68 e3       	ldi	r22, 0x38	; 56
 39e:	ce 01       	movw	r24, r28
 3a0:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_4bit_SendCommand>
 3a4:	81 ee       	ldi	r24, 0xE1	; 225
 3a6:	94 e0       	ldi	r25, 0x04	; 4
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <LCD_4bit_Init+0x50>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <LCD_4bit_Init+0x56>
 3ae:	00 00       	nop
 3b0:	68 e3       	ldi	r22, 0x38	; 56
 3b2:	ce 01       	movw	r24, r28
 3b4:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_4bit_SendCommand>
 3b8:	8b e7       	ldi	r24, 0x7B	; 123
 3ba:	92 e9       	ldi	r25, 0x92	; 146
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <LCD_4bit_Init+0x64>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <LCD_4bit_Init+0x6a>
 3c2:	00 00       	nop
 3c4:	68 e3       	ldi	r22, 0x38	; 56
 3c6:	ce 01       	movw	r24, r28
 3c8:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_4bit_SendCommand>
 3cc:	61 e0       	ldi	r22, 0x01	; 1
 3ce:	ce 01       	movw	r24, r28
 3d0:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_4bit_SendCommand>
 3d4:	62 e0       	ldi	r22, 0x02	; 2
 3d6:	ce 01       	movw	r24, r28
 3d8:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_4bit_SendCommand>
 3dc:	66 e0       	ldi	r22, 0x06	; 6
 3de:	ce 01       	movw	r24, r28
 3e0:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_4bit_SendCommand>
 3e4:	6e e0       	ldi	r22, 0x0E	; 14
 3e6:	ce 01       	movw	r24, r28
 3e8:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_4bit_SendCommand>
 3ec:	68 e2       	ldi	r22, 0x28	; 40
 3ee:	ce 01       	movw	r24, r28
 3f0:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_4bit_SendCommand>
 3f4:	60 e8       	ldi	r22, 0x80	; 128
 3f6:	ce 01       	movw	r24, r28
 3f8:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_4bit_SendCommand>
 3fc:	01 c0       	rjmp	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	1f 91       	pop	r17
 406:	0f 91       	pop	r16
 408:	08 95       	ret

0000040a <LCD_4bit_SendData>:
 * @param [in] 	-data: data i want to be showen on lcd
 * @retval 		-return if the function goes smooth and finished it's task
 * Note			-none
================================================================**/
ReturnType LCD_4bit_SendData(LCD_4bit_t *LCD,unsigned char data)
{
 40a:	1f 93       	push	r17
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
	ReturnType ret = E_NOT_OK;
	if(NULL == LCD)
 410:	00 97       	sbiw	r24, 0x00	; 0
 412:	b9 f0       	breq	.+46     	; 0x442 <LCD_4bit_SendData+0x38>
 414:	16 2f       	mov	r17, r22
 416:	ec 01       	movw	r28, r24
	}
	else
	{
		// R/W Pin connected to the GND -> Logic (0) "Hard Wired"
		// Write Logic (1) to the "Register Select" Pin to select the "Data Register"
		ret = gpio_pin_write_logic(&(LCD->RS), DIO_HIGH);
 418:	61 e0       	ldi	r22, 0x01	; 1
 41a:	0e 94 83 00 	call	0x106	; 0x106 <gpio_pin_write_logic>
		
		//send first high nibbles
		lcd_send_4bits(LCD,data >> 4);
 41e:	61 2f       	mov	r22, r17
 420:	62 95       	swap	r22
 422:	6f 70       	andi	r22, 0x0F	; 15
 424:	ce 01       	movw	r24, r28
 426:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_send_4bits>
		//send enable signal
		lcd_send_EnableSignal(LCD);
 42a:	ce 01       	movw	r24, r28
 42c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <lcd_send_EnableSignal>
		//send first high nibbles
		lcd_send_4bits(LCD,data);
 430:	61 2f       	mov	r22, r17
 432:	ce 01       	movw	r24, r28
 434:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_send_4bits>
		//send enable signal
		lcd_send_EnableSignal(LCD);
 438:	ce 01       	movw	r24, r28
 43a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <lcd_send_EnableSignal>
		ret = E_OK;
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	01 c0       	rjmp	.+2      	; 0x444 <LCD_4bit_SendData+0x3a>
ReturnType LCD_4bit_SendData(LCD_4bit_t *LCD,unsigned char data)
{
	ReturnType ret = E_NOT_OK;
	if(NULL == LCD)
	{
		ret = E_NOT_OK;
 442:	80 e0       	ldi	r24, 0x00	; 0
		//send enable signal
		lcd_send_EnableSignal(LCD);
		ret = E_OK;
	}
	return ret;
}
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	1f 91       	pop	r17
 44a:	08 95       	ret

0000044c <main>:
USART_CONFIG uartpinconfig;
uint8_t buffer[30];
uint8_t data;
int main(void)
{
	uartpinconfig.DATA_LENGTH = USART_8_DATA_BITS;
 44c:	ec e7       	ldi	r30, 0x7C	; 124
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	83 e0       	ldi	r24, 0x03	; 3
 452:	85 83       	std	Z+5, r24	; 0x05
	uartpinconfig.USART_BAUDRATE = USART_BAUD_RATE_9600;
 454:	83 e3       	ldi	r24, 0x33	; 51
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	a0 e0       	ldi	r26, 0x00	; 0
 45a:	b0 e0       	ldi	r27, 0x00	; 0
 45c:	81 83       	std	Z+1, r24	; 0x01
 45e:	92 83       	std	Z+2, r25	; 0x02
 460:	a3 83       	std	Z+3, r26	; 0x03
 462:	b4 83       	std	Z+4, r27	; 0x04
	uartpinconfig.IQR_ENABLE = UART_IRQ_Enable_NONE;
 464:	10 86       	std	Z+8, r1	; 0x08
	uartpinconfig.USART_MODE = USART_MODE_ASYNC;
 466:	10 82       	st	Z, r1
	uartpinconfig.STOPBITS = UART_1StopBits;
 468:	17 82       	std	Z+7, r1	; 0x07
	uartpinconfig.IRQ_CallBack = NULL;
 46a:	12 86       	std	Z+10, r1	; 0x0a
 46c:	11 86       	std	Z+9, r1	; 0x09
	uartpinconfig.PARITY = UART_NOParity;
 46e:	16 82       	std	Z+6, r1	; 0x06
	
	USART_Init(&uartpinconfig);
 470:	cf 01       	movw	r24, r30
 472:	0e 94 4e 02 	call	0x49c	; 0x49c <USART_Init>
	LCD_4bit_Init(&LCD1);
 476:	80 e7       	ldi	r24, 0x70	; 112
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_4bit_Init>
	//LCD_4bit_SendData_Position(&LCD1,'M',2,1);
	while (1)
	{
		data = UART_ReceiveData(enable);
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	0e 94 3f 03 	call	0x67e	; 0x67e <UART_ReceiveData>
 484:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <data>
		UART_SendData(data,enable);
 488:	60 e0       	ldi	r22, 0x00	; 0
 48a:	0e 94 31 03 	call	0x662	; 0x662 <UART_SendData>
		LCD_4bit_SendData(&LCD1,data);
 48e:	60 91 a5 00 	lds	r22, 0x00A5	; 0x8000a5 <data>
 492:	80 e7       	ldi	r24, 0x70	; 112
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 05 02 	call	0x40a	; 0x40a <LCD_4bit_SendData>
 49a:	f1 cf       	rjmp	.-30     	; 0x47e <main+0x32>

0000049c <USART_Init>:
 * @param [in] 	-none
 * @retval 		-none
 * Note			-none
 */
void USART_DeInit(void)
{
 49c:	fc 01       	movw	r30, r24
 49e:	81 81       	ldd	r24, Z+1	; 0x01
 4a0:	89 b9       	out	0x09, r24	; 9
 4a2:	8b b1       	in	r24, 0x0b	; 11
 4a4:	8d 7f       	andi	r24, 0xFD	; 253
 4a6:	8b b9       	out	0x0b, r24	; 11
 4a8:	85 81       	ldd	r24, Z+5	; 0x05
 4aa:	82 30       	cpi	r24, 0x02	; 2
 4ac:	29 f1       	breq	.+74     	; 0x4f8 <USART_Init+0x5c>
 4ae:	28 f4       	brcc	.+10     	; 0x4ba <USART_Init+0x1e>
 4b0:	88 23       	and	r24, r24
 4b2:	41 f0       	breq	.+16     	; 0x4c4 <USART_Init+0x28>
 4b4:	81 30       	cpi	r24, 0x01	; 1
 4b6:	99 f0       	breq	.+38     	; 0x4de <USART_Init+0x42>
 4b8:	45 c0       	rjmp	.+138    	; 0x544 <USART_Init+0xa8>
 4ba:	83 30       	cpi	r24, 0x03	; 3
 4bc:	51 f1       	breq	.+84     	; 0x512 <USART_Init+0x76>
 4be:	84 30       	cpi	r24, 0x04	; 4
 4c0:	a9 f1       	breq	.+106    	; 0x52c <USART_Init+0x90>
 4c2:	40 c0       	rjmp	.+128    	; 0x544 <USART_Init+0xa8>
 4c4:	80 b5       	in	r24, 0x20	; 32
 4c6:	80 68       	ori	r24, 0x80	; 128
 4c8:	80 bd       	out	0x20, r24	; 32
 4ca:	80 b5       	in	r24, 0x20	; 32
 4cc:	8d 7f       	andi	r24, 0xFD	; 253
 4ce:	80 bd       	out	0x20, r24	; 32
 4d0:	80 b5       	in	r24, 0x20	; 32
 4d2:	8b 7f       	andi	r24, 0xFB	; 251
 4d4:	80 bd       	out	0x20, r24	; 32
 4d6:	8a b1       	in	r24, 0x0a	; 10
 4d8:	8b 7f       	andi	r24, 0xFB	; 251
 4da:	8a b9       	out	0x0a, r24	; 10
 4dc:	33 c0       	rjmp	.+102    	; 0x544 <USART_Init+0xa8>
 4de:	80 b5       	in	r24, 0x20	; 32
 4e0:	80 68       	ori	r24, 0x80	; 128
 4e2:	80 bd       	out	0x20, r24	; 32
 4e4:	80 b5       	in	r24, 0x20	; 32
 4e6:	82 60       	ori	r24, 0x02	; 2
 4e8:	80 bd       	out	0x20, r24	; 32
 4ea:	80 b5       	in	r24, 0x20	; 32
 4ec:	8b 7f       	andi	r24, 0xFB	; 251
 4ee:	80 bd       	out	0x20, r24	; 32
 4f0:	8a b1       	in	r24, 0x0a	; 10
 4f2:	8b 7f       	andi	r24, 0xFB	; 251
 4f4:	8a b9       	out	0x0a, r24	; 10
 4f6:	26 c0       	rjmp	.+76     	; 0x544 <USART_Init+0xa8>
 4f8:	80 b5       	in	r24, 0x20	; 32
 4fa:	80 68       	ori	r24, 0x80	; 128
 4fc:	80 bd       	out	0x20, r24	; 32
 4fe:	80 b5       	in	r24, 0x20	; 32
 500:	8d 7f       	andi	r24, 0xFD	; 253
 502:	80 bd       	out	0x20, r24	; 32
 504:	80 b5       	in	r24, 0x20	; 32
 506:	84 60       	ori	r24, 0x04	; 4
 508:	80 bd       	out	0x20, r24	; 32
 50a:	8a b1       	in	r24, 0x0a	; 10
 50c:	8b 7f       	andi	r24, 0xFB	; 251
 50e:	8a b9       	out	0x0a, r24	; 10
 510:	19 c0       	rjmp	.+50     	; 0x544 <USART_Init+0xa8>
 512:	80 b5       	in	r24, 0x20	; 32
 514:	80 68       	ori	r24, 0x80	; 128
 516:	80 bd       	out	0x20, r24	; 32
 518:	80 b5       	in	r24, 0x20	; 32
 51a:	82 60       	ori	r24, 0x02	; 2
 51c:	80 bd       	out	0x20, r24	; 32
 51e:	80 b5       	in	r24, 0x20	; 32
 520:	84 60       	ori	r24, 0x04	; 4
 522:	80 bd       	out	0x20, r24	; 32
 524:	8a b1       	in	r24, 0x0a	; 10
 526:	8b 7f       	andi	r24, 0xFB	; 251
 528:	8a b9       	out	0x0a, r24	; 10
 52a:	0c c0       	rjmp	.+24     	; 0x544 <USART_Init+0xa8>
 52c:	80 b5       	in	r24, 0x20	; 32
 52e:	80 68       	ori	r24, 0x80	; 128
 530:	80 bd       	out	0x20, r24	; 32
 532:	80 b5       	in	r24, 0x20	; 32
 534:	82 60       	ori	r24, 0x02	; 2
 536:	80 bd       	out	0x20, r24	; 32
 538:	80 b5       	in	r24, 0x20	; 32
 53a:	84 60       	ori	r24, 0x04	; 4
 53c:	80 bd       	out	0x20, r24	; 32
 53e:	8a b1       	in	r24, 0x0a	; 10
 540:	84 60       	ori	r24, 0x04	; 4
 542:	8a b9       	out	0x0a, r24	; 10
 544:	86 81       	ldd	r24, Z+6	; 0x06
 546:	81 30       	cpi	r24, 0x01	; 1
 548:	71 f0       	breq	.+28     	; 0x566 <USART_Init+0xca>
 54a:	18 f0       	brcs	.+6      	; 0x552 <USART_Init+0xb6>
 54c:	82 30       	cpi	r24, 0x02	; 2
 54e:	a9 f0       	breq	.+42     	; 0x57a <USART_Init+0xde>
 550:	1d c0       	rjmp	.+58     	; 0x58c <USART_Init+0xf0>
 552:	80 b5       	in	r24, 0x20	; 32
 554:	80 68       	ori	r24, 0x80	; 128
 556:	80 bd       	out	0x20, r24	; 32
 558:	80 b5       	in	r24, 0x20	; 32
 55a:	8f 7e       	andi	r24, 0xEF	; 239
 55c:	80 bd       	out	0x20, r24	; 32
 55e:	80 b5       	in	r24, 0x20	; 32
 560:	8f 7d       	andi	r24, 0xDF	; 223
 562:	80 bd       	out	0x20, r24	; 32
 564:	13 c0       	rjmp	.+38     	; 0x58c <USART_Init+0xf0>
 566:	80 b5       	in	r24, 0x20	; 32
 568:	80 68       	ori	r24, 0x80	; 128
 56a:	80 bd       	out	0x20, r24	; 32
 56c:	80 b5       	in	r24, 0x20	; 32
 56e:	8f 7e       	andi	r24, 0xEF	; 239
 570:	80 bd       	out	0x20, r24	; 32
 572:	80 b5       	in	r24, 0x20	; 32
 574:	80 62       	ori	r24, 0x20	; 32
 576:	80 bd       	out	0x20, r24	; 32
 578:	09 c0       	rjmp	.+18     	; 0x58c <USART_Init+0xf0>
 57a:	80 b5       	in	r24, 0x20	; 32
 57c:	80 68       	ori	r24, 0x80	; 128
 57e:	80 bd       	out	0x20, r24	; 32
 580:	80 b5       	in	r24, 0x20	; 32
 582:	80 61       	ori	r24, 0x10	; 16
 584:	80 bd       	out	0x20, r24	; 32
 586:	80 b5       	in	r24, 0x20	; 32
 588:	80 62       	ori	r24, 0x20	; 32
 58a:	80 bd       	out	0x20, r24	; 32
 58c:	86 81       	ldd	r24, Z+6	; 0x06
 58e:	88 23       	and	r24, r24
 590:	19 f0       	breq	.+6      	; 0x598 <USART_Init+0xfc>
 592:	81 30       	cpi	r24, 0x01	; 1
 594:	41 f0       	breq	.+16     	; 0x5a6 <USART_Init+0x10a>
 596:	0d c0       	rjmp	.+26     	; 0x5b2 <USART_Init+0x116>
 598:	80 b5       	in	r24, 0x20	; 32
 59a:	80 68       	ori	r24, 0x80	; 128
 59c:	80 bd       	out	0x20, r24	; 32
 59e:	80 b5       	in	r24, 0x20	; 32
 5a0:	87 7f       	andi	r24, 0xF7	; 247
 5a2:	80 bd       	out	0x20, r24	; 32
 5a4:	06 c0       	rjmp	.+12     	; 0x5b2 <USART_Init+0x116>
 5a6:	80 b5       	in	r24, 0x20	; 32
 5a8:	80 68       	ori	r24, 0x80	; 128
 5aa:	80 bd       	out	0x20, r24	; 32
 5ac:	80 b5       	in	r24, 0x20	; 32
 5ae:	88 60       	ori	r24, 0x08	; 8
 5b0:	80 bd       	out	0x20, r24	; 32
 5b2:	80 81       	ld	r24, Z
 5b4:	88 23       	and	r24, r24
 5b6:	19 f0       	breq	.+6      	; 0x5be <USART_Init+0x122>
 5b8:	81 30       	cpi	r24, 0x01	; 1
 5ba:	41 f0       	breq	.+16     	; 0x5cc <USART_Init+0x130>
 5bc:	0d c0       	rjmp	.+26     	; 0x5d8 <USART_Init+0x13c>
 5be:	80 b5       	in	r24, 0x20	; 32
 5c0:	80 68       	ori	r24, 0x80	; 128
 5c2:	80 bd       	out	0x20, r24	; 32
 5c4:	80 b5       	in	r24, 0x20	; 32
 5c6:	8f 7b       	andi	r24, 0xBF	; 191
 5c8:	80 bd       	out	0x20, r24	; 32
 5ca:	06 c0       	rjmp	.+12     	; 0x5d8 <USART_Init+0x13c>
 5cc:	80 b5       	in	r24, 0x20	; 32
 5ce:	80 68       	ori	r24, 0x80	; 128
 5d0:	80 bd       	out	0x20, r24	; 32
 5d2:	80 b5       	in	r24, 0x20	; 32
 5d4:	80 64       	ori	r24, 0x40	; 64
 5d6:	80 bd       	out	0x20, r24	; 32
 5d8:	8a b1       	in	r24, 0x0a	; 10
 5da:	88 60       	ori	r24, 0x08	; 8
 5dc:	8a b9       	out	0x0a, r24	; 10
 5de:	8a b1       	in	r24, 0x0a	; 10
 5e0:	80 61       	ori	r24, 0x10	; 16
 5e2:	8a b9       	out	0x0a, r24	; 10
 5e4:	80 85       	ldd	r24, Z+8	; 0x08
 5e6:	81 30       	cpi	r24, 0x01	; 1
 5e8:	79 f0       	breq	.+30     	; 0x608 <USART_Init+0x16c>
 5ea:	28 f0       	brcs	.+10     	; 0x5f6 <USART_Init+0x15a>
 5ec:	82 30       	cpi	r24, 0x02	; 2
 5ee:	d9 f0       	breq	.+54     	; 0x626 <USART_Init+0x18a>
 5f0:	83 30       	cpi	r24, 0x03	; 3
 5f2:	41 f1       	breq	.+80     	; 0x644 <USART_Init+0x1a8>
 5f4:	08 95       	ret
 5f6:	8a b1       	in	r24, 0x0a	; 10
 5f8:	8f 7b       	andi	r24, 0xBF	; 191
 5fa:	8a b9       	out	0x0a, r24	; 10
 5fc:	8a b1       	in	r24, 0x0a	; 10
 5fe:	8f 77       	andi	r24, 0x7F	; 127
 600:	8a b9       	out	0x0a, r24	; 10
 602:	0e 94 53 01 	call	0x2a6	; 0x2a6 <Disable_GI>
 606:	08 95       	ret
 608:	8a b1       	in	r24, 0x0a	; 10
 60a:	80 64       	ori	r24, 0x40	; 64
 60c:	8a b9       	out	0x0a, r24	; 10
 60e:	8a b1       	in	r24, 0x0a	; 10
 610:	8f 77       	andi	r24, 0x7F	; 127
 612:	8a b9       	out	0x0a, r24	; 10
 614:	81 85       	ldd	r24, Z+9	; 0x09
 616:	92 85       	ldd	r25, Z+10	; 0x0a
 618:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <IRQ_CallBack+0x1>
 61c:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <IRQ_CallBack>
 620:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Enable_GI>
 624:	08 95       	ret
 626:	8a b1       	in	r24, 0x0a	; 10
 628:	8f 7b       	andi	r24, 0xBF	; 191
 62a:	8a b9       	out	0x0a, r24	; 10
 62c:	8a b1       	in	r24, 0x0a	; 10
 62e:	80 68       	ori	r24, 0x80	; 128
 630:	8a b9       	out	0x0a, r24	; 10
 632:	81 85       	ldd	r24, Z+9	; 0x09
 634:	92 85       	ldd	r25, Z+10	; 0x0a
 636:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <IRQ_CallBack+0x1>
 63a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <IRQ_CallBack>
 63e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Enable_GI>
 642:	08 95       	ret
 644:	8a b1       	in	r24, 0x0a	; 10
 646:	80 64       	ori	r24, 0x40	; 64
 648:	8a b9       	out	0x0a, r24	; 10
 64a:	8a b1       	in	r24, 0x0a	; 10
 64c:	80 68       	ori	r24, 0x80	; 128
 64e:	8a b9       	out	0x0a, r24	; 10
 650:	81 85       	ldd	r24, Z+9	; 0x09
 652:	92 85       	ldd	r25, Z+10	; 0x0a
 654:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <IRQ_CallBack+0x1>
 658:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <IRQ_CallBack>
 65c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Enable_GI>
 660:	08 95       	ret

00000662 <UART_SendData>:
 * @retval 		-none
 * Note			-none
 */
void UART_SendData(uint8_t TxBuffer,Polling_mechism PollingEn)
{
	if(PollingEn == enable)
 662:	61 11       	cpse	r22, r1
 664:	02 c0       	rjmp	.+4      	; 0x66a <UART_SendData+0x8>
	{
		while(!(USART->UCSRA.bits.UDRE));
 666:	5d 9b       	sbis	0x0b, 5	; 11
 668:	fe cf       	rjmp	.-4      	; 0x666 <UART_SendData+0x4>
	}
	//TXB8 is the ninth data bit of the received character 
	//Must be written before writing the low bits from UDR
	if(USART->UCSRB.bits.UCSZ2)
 66a:	52 9b       	sbis	0x0a, 2	; 10
 66c:	06 c0       	rjmp	.+12     	; 0x67a <UART_SendData+0x18>
	{
		USART->UCSRB.bits.TXB8 = (TxBuffer & (1<<8)>>8);
 66e:	9a b1       	in	r25, 0x0a	; 10
 670:	80 fb       	bst	r24, 0
 672:	90 f9       	bld	r25, 0
 674:	9a b9       	out	0x0a, r25	; 10
		USART->UDR = (uint8_t)TxBuffer;
 676:	8c b9       	out	0x0c, r24	; 12
 678:	08 95       	ret
	}
	else
	{
		USART->UDR = (uint8_t)TxBuffer;
 67a:	8c b9       	out	0x0c, r24	; 12
 67c:	08 95       	ret

0000067e <UART_ReceiveData>:
 * Note			-none
 */
uint16_t UART_ReceiveData(Polling_mechism PollingEn)
{
	uint8_t RxBuffer = 0;
	if(PollingEn == enable)
 67e:	81 11       	cpse	r24, r1
 680:	02 c0       	rjmp	.+4      	; 0x686 <UART_ReceiveData+0x8>
	{
		while(!(USART->UCSRA.bits.RXC));
 682:	5f 9b       	sbis	0x0b, 7	; 11
 684:	fe cf       	rjmp	.-4      	; 0x682 <UART_ReceiveData+0x4>
	}
	//RXB8 is the ninth data bit of the received character
	//Must be read before read the low bits from UDR
	if(USART->UCSRB.bits.UCSZ2)
 686:	52 9b       	sbis	0x0a, 2	; 10
 688:	03 c0       	rjmp	.+6      	; 0x690 <UART_ReceiveData+0x12>
	{
		RxBuffer |= USART->UCSRB.bits.RXB8 << 8;
 68a:	8a b1       	in	r24, 0x0a	; 10
		RxBuffer |= USART->UDR;
 68c:	8c b1       	in	r24, 0x0c	; 12
 68e:	01 c0       	rjmp	.+2      	; 0x692 <UART_ReceiveData+0x14>
	}
	else
	{
		RxBuffer = USART->UDR;
 690:	8c b1       	in	r24, 0x0c	; 12
	}
	return RxBuffer;
}
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	08 95       	ret

00000696 <_exit>:
 696:	f8 94       	cli

00000698 <__stop_program>:
 698:	ff cf       	rjmp	.-2      	; 0x698 <__stop_program>
