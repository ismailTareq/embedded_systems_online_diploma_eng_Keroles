
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d04  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08000e34  08000e34  00010e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e70  08000e70  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000e70  08000e70  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e70  08000e70  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e70  08000e70  00010e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e74  08000e74  00010e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000e78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000020  08000e98  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000050  08000e98  00020050  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000e05  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005a7  00000000  00000000  00020e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00000758  00000000  00000000  00021438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000150  00000000  00000000  00021b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000108  00000000  00000000  00021ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000022be  00000000  00000000  00021de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000202f  00000000  00000000  000240a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000083ad  00000000  00000000  000260d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000003e8  00000000  00000000  0002e484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08000e1c 	.word	0x08000e1c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08000e1c 	.word	0x08000e1c

08000170 <_delay_ms>:
#include "STM32F103X6.h"
#include "GPIO.h"
#include "KPD.h"
#include "LCD.h"

void _delay_ms(unsigned long time){
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	unsigned long i,j;
	for(i=0 ;i<time;i++){
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <_delay_ms+0x26>
		for(j=0;j<255;j++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <_delay_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <_delay_ms+0x14>
	for(i=0 ;i<time;i++){
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <_delay_ms+0xe>
	}
}
 800019e:	bf00      	nop
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
	...

080001ac <Clock_Init>:
void Clock_Init()
{
 80001ac:	b480      	push	{r7}
 80001ae:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();//enable clock for GPIOA
 80001b0:	4b07      	ldr	r3, [pc, #28]	; (80001d0 <Clock_Init+0x24>)
 80001b2:	699b      	ldr	r3, [r3, #24]
 80001b4:	4a06      	ldr	r2, [pc, #24]	; (80001d0 <Clock_Init+0x24>)
 80001b6:	f043 0304 	orr.w	r3, r3, #4
 80001ba:	6193      	str	r3, [r2, #24]

	RCC_GPIOB_CLK_EN();//enable clock for GPIOB
 80001bc:	4b04      	ldr	r3, [pc, #16]	; (80001d0 <Clock_Init+0x24>)
 80001be:	699b      	ldr	r3, [r3, #24]
 80001c0:	4a03      	ldr	r2, [pc, #12]	; (80001d0 <Clock_Init+0x24>)
 80001c2:	f043 0308 	orr.w	r3, r3, #8
 80001c6:	6193      	str	r3, [r2, #24]
}
 80001c8:	bf00      	nop
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr
 80001d0:	40021000 	.word	0x40021000

080001d4 <main>:
unsigned char pressed;

int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0

	Clock_Init();
 80001da:	f7ff ffe7 	bl	80001ac <Clock_Init>
	LCD_INIT();
 80001de:	f000 fc1d 	bl	8000a1c <LCD_INIT>
	unsigned char LCD_number[] = {'0','1','2','3','4','5','6','7','8','9'};
 80001e2:	4a21      	ldr	r2, [pc, #132]	; (8000268 <main+0x94>)
 80001e4:	463b      	mov	r3, r7
 80001e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80001e8:	c303      	stmia	r3!, {r0, r1}
 80001ea:	801a      	strh	r2, [r3, #0]
	LCD_WRITE_STRING("hi there ismail");
 80001ec:	481f      	ldr	r0, [pc, #124]	; (800026c <main+0x98>)
 80001ee:	f000 fd2b 	bl	8000c48 <LCD_WRITE_STRING>
	_delay_ms(1000);
 80001f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001f6:	f7ff ffbb 	bl	8000170 <_delay_ms>
	LCD_clearscreen();
 80001fa:	f000 fc39 	bl	8000a70 <LCD_clearscreen>

	for(int i =0 ; i<11 ; i++)
 80001fe:	2300      	movs	r3, #0
 8000200:	60fb      	str	r3, [r7, #12]
 8000202:	e00d      	b.n	8000220 <main+0x4c>
	{
		LCD_WRITE_DATA(LCD_number[i]);
 8000204:	463a      	mov	r2, r7
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	4413      	add	r3, r2
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	4618      	mov	r0, r3
 800020e:	f000 fca9 	bl	8000b64 <LCD_WRITE_DATA>
		_delay_ms(1000);
 8000212:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000216:	f7ff ffab 	bl	8000170 <_delay_ms>
	for(int i =0 ; i<11 ; i++)
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	3301      	adds	r3, #1
 800021e:	60fb      	str	r3, [r7, #12]
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	2b0a      	cmp	r3, #10
 8000224:	ddee      	ble.n	8000204 <main+0x30>
	}
	LCD_clearscreen();
 8000226:	f000 fc23 	bl	8000a70 <LCD_clearscreen>
	Keypad_Init();
 800022a:	f000 fa11 	bl	8000650 <Keypad_Init>
	LCD_WRITE_STRING("keypad is ready");
 800022e:	4810      	ldr	r0, [pc, #64]	; (8000270 <main+0x9c>)
 8000230:	f000 fd0a 	bl	8000c48 <LCD_WRITE_STRING>
	_delay_ms(500);
 8000234:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000238:	f7ff ff9a 	bl	8000170 <_delay_ms>
	LCD_clearscreen();
 800023c:	f000 fc18 	bl	8000a70 <LCD_clearscreen>
	LCD_WRITE_STRING("pressed key:");
 8000240:	480c      	ldr	r0, [pc, #48]	; (8000274 <main+0xa0>)
 8000242:	f000 fd01 	bl	8000c48 <LCD_WRITE_STRING>
	LCD_GOTO_XY(1,13);
 8000246:	210d      	movs	r1, #13
 8000248:	2001      	movs	r0, #1
 800024a:	f000 fd69 	bl	8000d20 <LCD_GOTO_XY>
    while(1)
    {
    	pressed = get_pressed_key();
 800024e:	f000 fa75 	bl	800073c <get_pressed_key>
 8000252:	4603      	mov	r3, r0
 8000254:	461a      	mov	r2, r3
 8000256:	4b08      	ldr	r3, [pc, #32]	; (8000278 <main+0xa4>)
 8000258:	701a      	strb	r2, [r3, #0]
    	switch(pressed)
    	{
    	default:
    		LCD_WRITE_DATA(pressed);
 800025a:	4b07      	ldr	r3, [pc, #28]	; (8000278 <main+0xa4>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	4618      	mov	r0, r3
 8000260:	f000 fc80 	bl	8000b64 <LCD_WRITE_DATA>
    		break;
 8000264:	bf00      	nop
    	pressed = get_pressed_key();
 8000266:	e7f2      	b.n	800024e <main+0x7a>
 8000268:	08000e64 	.word	0x08000e64
 800026c:	08000e34 	.word	0x08000e34
 8000270:	08000e44 	.word	0x08000e44
 8000274:	08000e54 	.word	0x08000e54
 8000278:	2000003c 	.word	0x2000003c

0800027c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800027c:	480d      	ldr	r0, [pc, #52]	; (80002b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800027e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000280:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000284:	480c      	ldr	r0, [pc, #48]	; (80002b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000286:	490d      	ldr	r1, [pc, #52]	; (80002bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000288:	4a0d      	ldr	r2, [pc, #52]	; (80002c0 <LoopForever+0xe>)
  movs r3, #0
 800028a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800028c:	e002      	b.n	8000294 <LoopCopyDataInit>

0800028e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800028e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000292:	3304      	adds	r3, #4

08000294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000298:	d3f9      	bcc.n	800028e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800029a:	4a0a      	ldr	r2, [pc, #40]	; (80002c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800029c:	4c0a      	ldr	r4, [pc, #40]	; (80002c8 <LoopForever+0x16>)
  movs r3, #0
 800029e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a0:	e001      	b.n	80002a6 <LoopFillZerobss>

080002a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a4:	3204      	adds	r2, #4

080002a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a8:	d3fb      	bcc.n	80002a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002aa:	f000 fd93 	bl	8000dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ae:	f7ff ff91 	bl	80001d4 <main>

080002b2 <LoopForever>:

LoopForever:
  b LoopForever
 80002b2:	e7fe      	b.n	80002b2 <LoopForever>
  ldr   r0, =_estack
 80002b4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002bc:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80002c0:	08000e78 	.word	0x08000e78
  ldr r2, =_sbss
 80002c4:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80002c8:	20000050 	.word	0x20000050

080002cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002cc:	e7fe      	b.n	80002cc <ADC1_2_IRQHandler>
	...

080002d0 <Get_PinPostion>:
 *  Created on: Jul 3, 2024
 *      Author: ismail
 */
#include "GPIO.h"
uint8_t Get_PinPostion(uint16_t PinNumber)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 80002da:	88fb      	ldrh	r3, [r7, #6]
 80002dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80002e0:	f000 808f 	beq.w	8000402 <Get_PinPostion+0x132>
 80002e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80002e8:	f300 808d 	bgt.w	8000406 <Get_PinPostion+0x136>
 80002ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80002f0:	f000 8085 	beq.w	80003fe <Get_PinPostion+0x12e>
 80002f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80002f8:	f300 8085 	bgt.w	8000406 <Get_PinPostion+0x136>
 80002fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000300:	d07b      	beq.n	80003fa <Get_PinPostion+0x12a>
 8000302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000306:	dc7e      	bgt.n	8000406 <Get_PinPostion+0x136>
 8000308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800030c:	d073      	beq.n	80003f6 <Get_PinPostion+0x126>
 800030e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000312:	dc78      	bgt.n	8000406 <Get_PinPostion+0x136>
 8000314:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000318:	d06b      	beq.n	80003f2 <Get_PinPostion+0x122>
 800031a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800031e:	dc72      	bgt.n	8000406 <Get_PinPostion+0x136>
 8000320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000324:	d063      	beq.n	80003ee <Get_PinPostion+0x11e>
 8000326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800032a:	dc6c      	bgt.n	8000406 <Get_PinPostion+0x136>
 800032c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000330:	d05b      	beq.n	80003ea <Get_PinPostion+0x11a>
 8000332:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000336:	dc66      	bgt.n	8000406 <Get_PinPostion+0x136>
 8000338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800033c:	d053      	beq.n	80003e6 <Get_PinPostion+0x116>
 800033e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000342:	dc60      	bgt.n	8000406 <Get_PinPostion+0x136>
 8000344:	2b80      	cmp	r3, #128	; 0x80
 8000346:	d05c      	beq.n	8000402 <Get_PinPostion+0x132>
 8000348:	2b80      	cmp	r3, #128	; 0x80
 800034a:	dc5c      	bgt.n	8000406 <Get_PinPostion+0x136>
 800034c:	2b20      	cmp	r3, #32
 800034e:	dc47      	bgt.n	80003e0 <Get_PinPostion+0x110>
 8000350:	2b00      	cmp	r3, #0
 8000352:	dd58      	ble.n	8000406 <Get_PinPostion+0x136>
 8000354:	3b01      	subs	r3, #1
 8000356:	2b1f      	cmp	r3, #31
 8000358:	d855      	bhi.n	8000406 <Get_PinPostion+0x136>
 800035a:	a201      	add	r2, pc, #4	; (adr r2, 8000360 <Get_PinPostion+0x90>)
 800035c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000360:	080003e7 	.word	0x080003e7
 8000364:	080003eb 	.word	0x080003eb
 8000368:	08000407 	.word	0x08000407
 800036c:	080003ef 	.word	0x080003ef
 8000370:	08000407 	.word	0x08000407
 8000374:	08000407 	.word	0x08000407
 8000378:	08000407 	.word	0x08000407
 800037c:	080003f3 	.word	0x080003f3
 8000380:	08000407 	.word	0x08000407
 8000384:	08000407 	.word	0x08000407
 8000388:	08000407 	.word	0x08000407
 800038c:	08000407 	.word	0x08000407
 8000390:	08000407 	.word	0x08000407
 8000394:	08000407 	.word	0x08000407
 8000398:	08000407 	.word	0x08000407
 800039c:	080003f7 	.word	0x080003f7
 80003a0:	08000407 	.word	0x08000407
 80003a4:	08000407 	.word	0x08000407
 80003a8:	08000407 	.word	0x08000407
 80003ac:	08000407 	.word	0x08000407
 80003b0:	08000407 	.word	0x08000407
 80003b4:	08000407 	.word	0x08000407
 80003b8:	08000407 	.word	0x08000407
 80003bc:	08000407 	.word	0x08000407
 80003c0:	08000407 	.word	0x08000407
 80003c4:	08000407 	.word	0x08000407
 80003c8:	08000407 	.word	0x08000407
 80003cc:	08000407 	.word	0x08000407
 80003d0:	08000407 	.word	0x08000407
 80003d4:	08000407 	.word	0x08000407
 80003d8:	08000407 	.word	0x08000407
 80003dc:	080003fb 	.word	0x080003fb
 80003e0:	2b40      	cmp	r3, #64	; 0x40
 80003e2:	d00c      	beq.n	80003fe <Get_PinPostion+0x12e>
 80003e4:	e00f      	b.n	8000406 <Get_PinPostion+0x136>
	{
	case GPIO_PIN_0:
	case GPIO_PIN_8:
		return 0;
 80003e6:	2300      	movs	r3, #0
 80003e8:	e00e      	b.n	8000408 <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_1:
	case GPIO_PIN_9:
		return 4;
 80003ea:	2304      	movs	r3, #4
 80003ec:	e00c      	b.n	8000408 <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_2:
	case GPIO_PIN_10:
		return 8;
 80003ee:	2308      	movs	r3, #8
 80003f0:	e00a      	b.n	8000408 <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_3:
	case GPIO_PIN_11:
		return 12;
 80003f2:	230c      	movs	r3, #12
 80003f4:	e008      	b.n	8000408 <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_4:
	case GPIO_PIN_12:
		return 16;
 80003f6:	2310      	movs	r3, #16
 80003f8:	e006      	b.n	8000408 <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_5:
	case GPIO_PIN_13:
		return 20;
 80003fa:	2314      	movs	r3, #20
 80003fc:	e004      	b.n	8000408 <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_6:
	case GPIO_PIN_14:
		return 24;
 80003fe:	2318      	movs	r3, #24
 8000400:	e002      	b.n	8000408 <Get_PinPostion+0x138>
		break;

	case GPIO_PIN_7:
	case GPIO_PIN_15:
		return 28;
 8000402:	231c      	movs	r3, #28
 8000404:	e000      	b.n	8000408 <Get_PinPostion+0x138>
		break;
	}
	return 0;
 8000406:	2300      	movs	r3, #0
}
 8000408:	4618      	mov	r0, r3
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	bc80      	pop	{r7}
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop

08000414 <GPIO_Init>:
 * @retval 		-none
 * Note			-STM32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 but LQFP48 Package has only GPIO A,B Part of C,D exported as external PINs from the MCU
================================================================**/
void GPIO_Init(GPIO_t *GPIOx,GPIO_Config_t *PinConfig)
{
 8000414:	b590      	push	{r4, r7, lr}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	6039      	str	r1, [r7, #0]
	// Port configuration register high (GPIOx_CRH) configure PINs from 0 >> 7
	// Port configuration register high (GPIOx_CRH) configure PINs from 8 >> 15
	volatile uint32_t *Config_Register = NULL;
 800041e:	2300      	movs	r3, #0
 8000420:	60bb      	str	r3, [r7, #8]
	uint8_t Pin_config = 0;
 8000422:	2300      	movs	r3, #0
 8000424:	73fb      	strb	r3, [r7, #15]
	//see if it's CRL or CRH
	Config_Register = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)?	&GPIOx->CRL : &GPIOx->CRH;
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	881b      	ldrh	r3, [r3, #0]
 800042a:	2bff      	cmp	r3, #255	; 0xff
 800042c:	d801      	bhi.n	8000432 <GPIO_Init+0x1e>
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	e001      	b.n	8000436 <GPIO_Init+0x22>
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	3304      	adds	r3, #4
 8000436:	60bb      	str	r3, [r7, #8]
	//Reset CNF and MODE
	(*Config_Register) &= ~(0xf << Get_PinPostion(PinConfig->GPIO_PinNumber));	/*
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	881b      	ldrh	r3, [r3, #0]
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff ff47 	bl	80002d0 <Get_PinPostion>
 8000442:	4603      	mov	r3, r0
 8000444:	461a      	mov	r2, r3
 8000446:	230f      	movs	r3, #15
 8000448:	4093      	lsls	r3, r2
 800044a:	43da      	mvns	r2, r3
 800044c:	68bb      	ldr	r3, [r7, #8]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	401a      	ands	r2, r3
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	601a      	str	r2, [r3, #0]
	 * ------------------
	 * |  3	| 2 | 1	| 0	| //clear it to write what i want
	 * ------------------
	 */
	//see if the pin is Input or Output so that if it's output i put the speed with it if input then it's only mode
	if((PinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_PP)||(PinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_OD)||(PinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_AF_PP)||(PinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_AF_OD))
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	885b      	ldrh	r3, [r3, #2]
 800045a:	2b04      	cmp	r3, #4
 800045c:	d00b      	beq.n	8000476 <GPIO_Init+0x62>
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	885b      	ldrh	r3, [r3, #2]
 8000462:	2b05      	cmp	r3, #5
 8000464:	d007      	beq.n	8000476 <GPIO_Init+0x62>
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	885b      	ldrh	r3, [r3, #2]
 800046a:	2b06      	cmp	r3, #6
 800046c:	d003      	beq.n	8000476 <GPIO_Init+0x62>
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	885b      	ldrh	r3, [r3, #2]
 8000472:	2b07      	cmp	r3, #7
 8000474:	d11c      	bne.n	80004b0 <GPIO_Init+0x9c>
		 * 00: General purpose output push-pull		--> GPIO_MODE_OUTPUT_PP		>>	0x00000004u
		 * 01: General purpose output Open-drain	--> GPIO_MODE_OUTPUT_OD		>>	0x00000005u
		 * 10: Alternate function output Push-pull	--> GPIO_MODE_OUTPUT_AF_PP	>>	0x00000006u
		 * 11: Alternate function output Open-drain	--> GPIO_MODE_OUTPUT_AF_OD	>>	0x00000007u
		 */
		Pin_config = ( ( ( (PinConfig->GPIO_PinMode - 4 ) << 2 ) | (PinConfig->GPIO_PinSpeed)) & 0x0F );
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	885b      	ldrh	r3, [r3, #2]
 800047a:	3b04      	subs	r3, #4
 800047c:	009b      	lsls	r3, r3, #2
 800047e:	b25a      	sxtb	r2, r3
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	889b      	ldrh	r3, [r3, #4]
 8000484:	b25b      	sxtb	r3, r3
 8000486:	4313      	orrs	r3, r2
 8000488:	b25b      	sxtb	r3, r3
 800048a:	b2db      	uxtb	r3, r3
 800048c:	f003 030f 	and.w	r3, r3, #15
 8000490:	73fb      	strb	r3, [r7, #15]
		(*Config_Register) |= ( Pin_config << Get_PinPostion(PinConfig->GPIO_PinNumber) );
 8000492:	7bfc      	ldrb	r4, [r7, #15]
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	881b      	ldrh	r3, [r3, #0]
 8000498:	4618      	mov	r0, r3
 800049a:	f7ff ff19 	bl	80002d0 <Get_PinPostion>
 800049e:	4603      	mov	r3, r0
 80004a0:	fa04 f203 	lsl.w	r2, r4, r3
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	431a      	orrs	r2, r3
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	e072      	b.n	8000596 <GPIO_Init+0x182>
		 * 11: Input with PU or PD	--> GPIO_MODE_INPUT_PU
		 * //the only thing to diff from PU or PD
		 * 		PU: ODR --> 1
		 * 		PD: ODR --> 0
		 */
		if((PinConfig->GPIO_PinMode  == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_PinMode  == GPIO_MODE_ANALOG))
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	885b      	ldrh	r3, [r3, #2]
 80004b4:	2b01      	cmp	r3, #1
 80004b6:	d003      	beq.n	80004c0 <GPIO_Init+0xac>
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	885b      	ldrh	r3, [r3, #2]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d115      	bne.n	80004ec <GPIO_Init+0xd8>
		{
			Pin_config = ((((PinConfig ->GPIO_PinMode) << 2) | (0)) & 0x0F );
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	885b      	ldrh	r3, [r3, #2]
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	f003 030f 	and.w	r3, r3, #15
 80004cc:	73fb      	strb	r3, [r7, #15]
			(*Config_Register) |= ( Pin_config << Get_PinPostion(PinConfig->GPIO_PinNumber) );
 80004ce:	7bfc      	ldrb	r4, [r7, #15]
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	881b      	ldrh	r3, [r3, #0]
 80004d4:	4618      	mov	r0, r3
 80004d6:	f7ff fefb 	bl	80002d0 <Get_PinPostion>
 80004da:	4603      	mov	r3, r0
 80004dc:	fa04 f203 	lsl.w	r2, r4, r3
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	431a      	orrs	r2, r3
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	e054      	b.n	8000596 <GPIO_Init+0x182>
		}
		else if((PinConfig->GPIO_PinMode  == GPIO_MODE_INPUT_PU)||(PinConfig->GPIO_PinMode  == GPIO_MODE_INPUT_PD ))
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	885b      	ldrh	r3, [r3, #2]
 80004f0:	2b02      	cmp	r3, #2
 80004f2:	d003      	beq.n	80004fc <GPIO_Init+0xe8>
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	885b      	ldrh	r3, [r3, #2]
 80004f8:	2b03      	cmp	r3, #3
 80004fa:	d135      	bne.n	8000568 <GPIO_Init+0x154>
		{
			switch(PinConfig->GPIO_PinMode)
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	885b      	ldrh	r3, [r3, #2]
 8000500:	2b02      	cmp	r3, #2
 8000502:	d002      	beq.n	800050a <GPIO_Init+0xf6>
 8000504:	2b03      	cmp	r3, #3
 8000506:	d00f      	beq.n	8000528 <GPIO_Init+0x114>
 8000508:	e01f      	b.n	800054a <GPIO_Init+0x136>
			{
			case  GPIO_MODE_INPUT_PU :
				GPIOx->ODR |= (PinConfig->GPIO_PinNumber);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	68db      	ldr	r3, [r3, #12]
 800050e:	683a      	ldr	r2, [r7, #0]
 8000510:	8812      	ldrh	r2, [r2, #0]
 8000512:	431a      	orrs	r2, r3
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	60da      	str	r2, [r3, #12]
				Pin_config = (((PinConfig->GPIO_PinMode << 2 )|(0))&0x0F);
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	885b      	ldrh	r3, [r3, #2]
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	b2db      	uxtb	r3, r3
 8000520:	f003 030f 	and.w	r3, r3, #15
 8000524:	73fb      	strb	r3, [r7, #15]
				break;
 8000526:	e010      	b.n	800054a <GPIO_Init+0x136>
			case GPIO_MODE_INPUT_PD :
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	68db      	ldr	r3, [r3, #12]
 800052c:	683a      	ldr	r2, [r7, #0]
 800052e:	8812      	ldrh	r2, [r2, #0]
 8000530:	43d2      	mvns	r2, r2
 8000532:	401a      	ands	r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	60da      	str	r2, [r3, #12]
				Pin_config = ((((PinConfig->GPIO_PinMode-1) << 2 )|(0))&0x0F);
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	885b      	ldrh	r3, [r3, #2]
 800053c:	3b01      	subs	r3, #1
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	b2db      	uxtb	r3, r3
 8000542:	f003 030f 	and.w	r3, r3, #15
 8000546:	73fb      	strb	r3, [r7, #15]
				break;
 8000548:	bf00      	nop
			}
			( *Config_Register ) |= ( Pin_config << Get_PinPostion(PinConfig->GPIO_PinNumber) );
 800054a:	7bfc      	ldrb	r4, [r7, #15]
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	881b      	ldrh	r3, [r3, #0]
 8000550:	4618      	mov	r0, r3
 8000552:	f7ff febd 	bl	80002d0 <Get_PinPostion>
 8000556:	4603      	mov	r3, r0
 8000558:	fa04 f203 	lsl.w	r2, r4, r3
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	431a      	orrs	r2, r3
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	e016      	b.n	8000596 <GPIO_Init+0x182>
		}
		else
		{ 	//pin is alternative input (same as input floating)
			Pin_config = ( (((PinConfig->GPIO_PinMode-7) << 2) | (0)) & 0x0F	);
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	885b      	ldrh	r3, [r3, #2]
 800056c:	3b07      	subs	r3, #7
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	b2db      	uxtb	r3, r3
 8000572:	f003 030f 	and.w	r3, r3, #15
 8000576:	73fb      	strb	r3, [r7, #15]
			(*Config_Register) |= ( Pin_config << Get_PinPostion(PinConfig->GPIO_PinNumber) );
 8000578:	7bfc      	ldrb	r4, [r7, #15]
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	881b      	ldrh	r3, [r3, #0]
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff fea6 	bl	80002d0 <Get_PinPostion>
 8000584:	4603      	mov	r3, r0
 8000586:	fa04 f203 	lsl.w	r2, r4, r3
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	431a      	orrs	r2, r3
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	601a      	str	r2, [r3, #0]

		}
	}
}
 8000594:	bf00      	nop
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	bd90      	pop	{r4, r7, pc}

0800059e <GPIO_READ_Pin>:
 * @param [in] 	-PinNumber: Set PIN number according to @ref GPIO_PIN_DEFINE.
 * @retval 		-the I/P PIN Value (Two Values based on @ref GPIO_PIN_STATE >> SET or RESET)
 * Note			-none
================================================================**/
uint8_t GPIO_READ_Pin(GPIO_t *GPIOx,uint16_t pinnumber)
{
 800059e:	b480      	push	{r7}
 80005a0:	b083      	sub	sp, #12
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
 80005a6:	460b      	mov	r3, r1
 80005a8:	807b      	strh	r3, [r7, #2]
	if((GPIOx->IDR & pinnumber) != GPIO_LOW)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	689a      	ldr	r2, [r3, #8]
 80005ae:	887b      	ldrh	r3, [r7, #2]
 80005b0:	4013      	ands	r3, r2
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <GPIO_READ_Pin+0x1c>
		return GPIO_HIGH;
 80005b6:	2301      	movs	r3, #1
 80005b8:	e000      	b.n	80005bc <GPIO_READ_Pin+0x1e>
	else
		return GPIO_LOW;
 80005ba:	2300      	movs	r3, #0
}
 80005bc:	4618      	mov	r0, r3
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr

080005c6 <GPIO_WRITE_Pin>:
 * @param [in] 	-Value: The value that will write to PIN (Two Values based on @ref GPIO_PIN_STATE >> SET or RESET).
 * @retval 		-none
 * Note			-none
================================================================**/
void GPIO_WRITE_Pin(GPIO_t *GPIOx,uint16_t pinnumber,uint8_t value)
{
 80005c6:	b480      	push	{r7}
 80005c8:	b083      	sub	sp, #12
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	6078      	str	r0, [r7, #4]
 80005ce:	460b      	mov	r3, r1
 80005d0:	807b      	strh	r3, [r7, #2]
 80005d2:	4613      	mov	r3, r2
 80005d4:	707b      	strb	r3, [r7, #1]
	 * Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
	 * These bits are write-only and can be accessed in Word mode only.
	 * 0: No action on the corresponding ODRx bit
	 * 1: Set the corresponding ODRx bit
	 */
	if(value != GPIO_LOW)
 80005d6:	787b      	ldrb	r3, [r7, #1]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d003      	beq.n	80005e4 <GPIO_WRITE_Pin+0x1e>
	{
		//GPIOx->ODR |= pinnumber;
		GPIOx->BSRR = (uint32_t)pinnumber;
 80005dc:	887a      	ldrh	r2, [r7, #2]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	611a      	str	r2, [r3, #16]
		 * These bits are write-only and can be accessed in Word mode only.
		 * 0: No action on the corresponding ODRx bit
		 * 1: Reset the corresponding ODRx bit
		 */
		GPIOx->BRR = (uint32_t)pinnumber;
}
 80005e2:	e002      	b.n	80005ea <GPIO_WRITE_Pin+0x24>
		GPIOx->BRR = (uint32_t)pinnumber;
 80005e4:	887a      	ldrh	r2, [r7, #2]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	615a      	str	r2, [r3, #20]
}
 80005ea:	bf00      	nop
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr

080005f4 <GPIO_WRITE_Port>:
void GPIO_WRITE_Port(GPIO_t *GPIOx,uint8_t value)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	460b      	mov	r3, r1
 80005fe:	70fb      	strb	r3, [r7, #3]
	GPIOx->ODR |= (uint32_t)value;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	68da      	ldr	r2, [r3, #12]
 8000604:	78fb      	ldrb	r3, [r7, #3]
 8000606:	431a      	orrs	r2, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	60da      	str	r2, [r3, #12]
}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	bc80      	pop	{r7}
 8000614:	4770      	bx	lr

08000616 <delay>:
 */
#include "KPD.h"
int rows[] = { R0, R1, R2, R3 };
int columns[] = { C0, C1, C2, C3 };

void delay(uint32_t time) {
 8000616:	b480      	push	{r7}
 8000618:	b085      	sub	sp, #20
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	e00b      	b.n	800063c <delay+0x26>
		for (j = 0; j < 255; j++)
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	e002      	b.n	8000630 <delay+0x1a>
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	3301      	adds	r3, #1
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	2bfe      	cmp	r3, #254	; 0xfe
 8000634:	d9f9      	bls.n	800062a <delay+0x14>
	for (i = 0; i < time; i++)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	3301      	adds	r3, #1
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fa      	ldr	r2, [r7, #12]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	429a      	cmp	r2, r3
 8000642:	d3ef      	bcc.n	8000624 <delay+0xe>
			;
}
 8000644:	bf00      	nop
 8000646:	bf00      	nop
 8000648:	3714      	adds	r7, #20
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr

08000650 <Keypad_Init>:
 * @brief 		-init the pins of keypad
 * @param [in] 	-none
 * @retval 		-none
 * Note			-make the rows output and column output and pins can be found @ref:keypad_PINS
================================================================**/
void Keypad_Init() {
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0


	keypad.GPIO_PinNumber = R0;
 8000654:	4b37      	ldr	r3, [pc, #220]	; (8000734 <Keypad_Init+0xe4>)
 8000656:	2201      	movs	r2, #1
 8000658:	801a      	strh	r2, [r3, #0]
	keypad.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 800065a:	4b36      	ldr	r3, [pc, #216]	; (8000734 <Keypad_Init+0xe4>)
 800065c:	2204      	movs	r2, #4
 800065e:	805a      	strh	r2, [r3, #2]
	keypad.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 8000660:	4b34      	ldr	r3, [pc, #208]	; (8000734 <Keypad_Init+0xe4>)
 8000662:	2201      	movs	r2, #1
 8000664:	809a      	strh	r2, [r3, #4]
	GPIO_Init(KEYPAD_PORT, &keypad);
 8000666:	4933      	ldr	r1, [pc, #204]	; (8000734 <Keypad_Init+0xe4>)
 8000668:	4833      	ldr	r0, [pc, #204]	; (8000738 <Keypad_Init+0xe8>)
 800066a:	f7ff fed3 	bl	8000414 <GPIO_Init>

	keypad.GPIO_PinNumber = R1;
 800066e:	4b31      	ldr	r3, [pc, #196]	; (8000734 <Keypad_Init+0xe4>)
 8000670:	2202      	movs	r2, #2
 8000672:	801a      	strh	r2, [r3, #0]
	keypad.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 8000674:	4b2f      	ldr	r3, [pc, #188]	; (8000734 <Keypad_Init+0xe4>)
 8000676:	2204      	movs	r2, #4
 8000678:	805a      	strh	r2, [r3, #2]
	keypad.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 800067a:	4b2e      	ldr	r3, [pc, #184]	; (8000734 <Keypad_Init+0xe4>)
 800067c:	2201      	movs	r2, #1
 800067e:	809a      	strh	r2, [r3, #4]
	GPIO_Init(KEYPAD_PORT, &keypad);
 8000680:	492c      	ldr	r1, [pc, #176]	; (8000734 <Keypad_Init+0xe4>)
 8000682:	482d      	ldr	r0, [pc, #180]	; (8000738 <Keypad_Init+0xe8>)
 8000684:	f7ff fec6 	bl	8000414 <GPIO_Init>

	keypad.GPIO_PinNumber = R2;
 8000688:	4b2a      	ldr	r3, [pc, #168]	; (8000734 <Keypad_Init+0xe4>)
 800068a:	2208      	movs	r2, #8
 800068c:	801a      	strh	r2, [r3, #0]
	keypad.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 800068e:	4b29      	ldr	r3, [pc, #164]	; (8000734 <Keypad_Init+0xe4>)
 8000690:	2204      	movs	r2, #4
 8000692:	805a      	strh	r2, [r3, #2]
	keypad.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 8000694:	4b27      	ldr	r3, [pc, #156]	; (8000734 <Keypad_Init+0xe4>)
 8000696:	2201      	movs	r2, #1
 8000698:	809a      	strh	r2, [r3, #4]
	GPIO_Init(KEYPAD_PORT, &keypad);
 800069a:	4926      	ldr	r1, [pc, #152]	; (8000734 <Keypad_Init+0xe4>)
 800069c:	4826      	ldr	r0, [pc, #152]	; (8000738 <Keypad_Init+0xe8>)
 800069e:	f7ff feb9 	bl	8000414 <GPIO_Init>

	keypad.GPIO_PinNumber = R3;
 80006a2:	4b24      	ldr	r3, [pc, #144]	; (8000734 <Keypad_Init+0xe4>)
 80006a4:	2210      	movs	r2, #16
 80006a6:	801a      	strh	r2, [r3, #0]
	keypad.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <Keypad_Init+0xe4>)
 80006aa:	2204      	movs	r2, #4
 80006ac:	805a      	strh	r2, [r3, #2]
	keypad.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 80006ae:	4b21      	ldr	r3, [pc, #132]	; (8000734 <Keypad_Init+0xe4>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	809a      	strh	r2, [r3, #4]
	GPIO_Init(KEYPAD_PORT, &keypad);
 80006b4:	491f      	ldr	r1, [pc, #124]	; (8000734 <Keypad_Init+0xe4>)
 80006b6:	4820      	ldr	r0, [pc, #128]	; (8000738 <Keypad_Init+0xe8>)
 80006b8:	f7ff feac 	bl	8000414 <GPIO_Init>

	keypad.GPIO_PinNumber = C0;
 80006bc:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <Keypad_Init+0xe4>)
 80006be:	2220      	movs	r2, #32
 80006c0:	801a      	strh	r2, [r3, #0]
	keypad.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 80006c2:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <Keypad_Init+0xe4>)
 80006c4:	2204      	movs	r2, #4
 80006c6:	805a      	strh	r2, [r3, #2]
	keypad.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 80006c8:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <Keypad_Init+0xe4>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	809a      	strh	r2, [r3, #4]
	GPIO_Init(KEYPAD_PORT, &keypad);
 80006ce:	4919      	ldr	r1, [pc, #100]	; (8000734 <Keypad_Init+0xe4>)
 80006d0:	4819      	ldr	r0, [pc, #100]	; (8000738 <Keypad_Init+0xe8>)
 80006d2:	f7ff fe9f 	bl	8000414 <GPIO_Init>

	keypad.GPIO_PinNumber = C1;
 80006d6:	4b17      	ldr	r3, [pc, #92]	; (8000734 <Keypad_Init+0xe4>)
 80006d8:	2240      	movs	r2, #64	; 0x40
 80006da:	801a      	strh	r2, [r3, #0]
	keypad.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <Keypad_Init+0xe4>)
 80006de:	2204      	movs	r2, #4
 80006e0:	805a      	strh	r2, [r3, #2]
	keypad.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 80006e2:	4b14      	ldr	r3, [pc, #80]	; (8000734 <Keypad_Init+0xe4>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	809a      	strh	r2, [r3, #4]
	GPIO_Init(KEYPAD_PORT, &keypad);
 80006e8:	4912      	ldr	r1, [pc, #72]	; (8000734 <Keypad_Init+0xe4>)
 80006ea:	4813      	ldr	r0, [pc, #76]	; (8000738 <Keypad_Init+0xe8>)
 80006ec:	f7ff fe92 	bl	8000414 <GPIO_Init>

	keypad.GPIO_PinNumber = C2;
 80006f0:	4b10      	ldr	r3, [pc, #64]	; (8000734 <Keypad_Init+0xe4>)
 80006f2:	2280      	movs	r2, #128	; 0x80
 80006f4:	801a      	strh	r2, [r3, #0]
	keypad.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 80006f6:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <Keypad_Init+0xe4>)
 80006f8:	2204      	movs	r2, #4
 80006fa:	805a      	strh	r2, [r3, #2]
	keypad.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 80006fc:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <Keypad_Init+0xe4>)
 80006fe:	2201      	movs	r2, #1
 8000700:	809a      	strh	r2, [r3, #4]
	GPIO_Init(KEYPAD_PORT, &keypad);
 8000702:	490c      	ldr	r1, [pc, #48]	; (8000734 <Keypad_Init+0xe4>)
 8000704:	480c      	ldr	r0, [pc, #48]	; (8000738 <Keypad_Init+0xe8>)
 8000706:	f7ff fe85 	bl	8000414 <GPIO_Init>

	keypad.GPIO_PinNumber = C3;
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <Keypad_Init+0xe4>)
 800070c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000710:	801a      	strh	r2, [r3, #0]
	keypad.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <Keypad_Init+0xe4>)
 8000714:	2204      	movs	r2, #4
 8000716:	805a      	strh	r2, [r3, #2]
	keypad.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <Keypad_Init+0xe4>)
 800071a:	2201      	movs	r2, #1
 800071c:	809a      	strh	r2, [r3, #4]
	GPIO_Init(KEYPAD_PORT, &keypad);
 800071e:	4905      	ldr	r1, [pc, #20]	; (8000734 <Keypad_Init+0xe4>)
 8000720:	4805      	ldr	r0, [pc, #20]	; (8000738 <Keypad_Init+0xe8>)
 8000722:	f7ff fe77 	bl	8000414 <GPIO_Init>

	GPIO_WRITE_Port(KEYPAD_PORT, 0xFF);
 8000726:	21ff      	movs	r1, #255	; 0xff
 8000728:	4803      	ldr	r0, [pc, #12]	; (8000738 <Keypad_Init+0xe8>)
 800072a:	f7ff ff63 	bl	80005f4 <GPIO_WRITE_Port>

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000040 	.word	0x20000040
 8000738:	40010c00 	.word	0x40010c00

0800073c <get_pressed_key>:
 * @brief 		-get the pressed button
 * @param [in] 	-none
 * @retval 		-the pressed key
 * Note			-none
================================================================**/
unsigned char get_pressed_key() {
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
	int row, column , Init;
	for (column = 0; column < 4; column++)
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	e0ae      	b.n	80008a6 <get_pressed_key+0x16a>
	{
		for(Init = 0; Init < 4; Init++)
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	e00f      	b.n	800076e <get_pressed_key+0x32>
		{
			GPIO_WRITE_Pin(KEYPAD_PORT, columns[Init], GPIO_HIGH);
 800074e:	4a5a      	ldr	r2, [pc, #360]	; (80008b8 <get_pressed_key+0x17c>)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000756:	b29b      	uxth	r3, r3
 8000758:	2201      	movs	r2, #1
 800075a:	4619      	mov	r1, r3
 800075c:	4857      	ldr	r0, [pc, #348]	; (80008bc <get_pressed_key+0x180>)
 800075e:	f7ff ff32 	bl	80005c6 <GPIO_WRITE_Pin>
			delay(1);
 8000762:	2001      	movs	r0, #1
 8000764:	f7ff ff57 	bl	8000616 <delay>
		for(Init = 0; Init < 4; Init++)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3301      	adds	r3, #1
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2b03      	cmp	r3, #3
 8000772:	ddec      	ble.n	800074e <get_pressed_key+0x12>
		}
		//Turning off each column to check which button pressed
		GPIO_WRITE_Pin(KEYPAD_PORT, columns[column], GPIO_LOW);
 8000774:	4a50      	ldr	r2, [pc, #320]	; (80008b8 <get_pressed_key+0x17c>)
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800077c:	b29b      	uxth	r3, r3
 800077e:	2200      	movs	r2, #0
 8000780:	4619      	mov	r1, r3
 8000782:	484e      	ldr	r0, [pc, #312]	; (80008bc <get_pressed_key+0x180>)
 8000784:	f7ff ff1f 	bl	80005c6 <GPIO_WRITE_Pin>
		delay(1);
 8000788:	2001      	movs	r0, #1
 800078a:	f7ff ff44 	bl	8000616 <delay>
		for (row = 0; row < 4; row++) {
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	e081      	b.n	8000898 <get_pressed_key+0x15c>
			if (GPIO_READ_Pin(KEYPAD_PORT, rows[row]) == 0) {
 8000794:	4a4a      	ldr	r2, [pc, #296]	; (80008c0 <get_pressed_key+0x184>)
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800079c:	b29b      	uxth	r3, r3
 800079e:	4619      	mov	r1, r3
 80007a0:	4846      	ldr	r0, [pc, #280]	; (80008bc <get_pressed_key+0x180>)
 80007a2:	f7ff fefc 	bl	800059e <GPIO_READ_Pin>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d172      	bne.n	8000892 <get_pressed_key+0x156>
				//just to make sure it's a single Press
				while (GPIO_READ_Pin(KEYPAD_PORT, rows[row]) == 0);
 80007ac:	bf00      	nop
 80007ae:	4a44      	ldr	r2, [pc, #272]	; (80008c0 <get_pressed_key+0x184>)
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	4619      	mov	r1, r3
 80007ba:	4840      	ldr	r0, [pc, #256]	; (80008bc <get_pressed_key+0x180>)
 80007bc:	f7ff feef 	bl	800059e <GPIO_READ_Pin>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d0f3      	beq.n	80007ae <get_pressed_key+0x72>
				switch (column) {
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	2b03      	cmp	r3, #3
 80007ca:	d862      	bhi.n	8000892 <get_pressed_key+0x156>
 80007cc:	a201      	add	r2, pc, #4	; (adr r2, 80007d4 <get_pressed_key+0x98>)
 80007ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d2:	bf00      	nop
 80007d4:	080007e5 	.word	0x080007e5
 80007d8:	0800080d 	.word	0x0800080d
 80007dc:	08000835 	.word	0x08000835
 80007e0:	0800085d 	.word	0x0800085d
				case 0:
					if(row == 0)return '7';
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d101      	bne.n	80007ee <get_pressed_key+0xb2>
 80007ea:	2337      	movs	r3, #55	; 0x37
 80007ec:	e05f      	b.n	80008ae <get_pressed_key+0x172>
					else if(row == 1)return '4';
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d101      	bne.n	80007f8 <get_pressed_key+0xbc>
 80007f4:	2334      	movs	r3, #52	; 0x34
 80007f6:	e05a      	b.n	80008ae <get_pressed_key+0x172>
					else if(row == 2)return '1';
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	d101      	bne.n	8000802 <get_pressed_key+0xc6>
 80007fe:	2331      	movs	r3, #49	; 0x31
 8000800:	e055      	b.n	80008ae <get_pressed_key+0x172>
					else if(row == 3)return 'A';
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	2b03      	cmp	r3, #3
 8000806:	d13d      	bne.n	8000884 <get_pressed_key+0x148>
 8000808:	2341      	movs	r3, #65	; 0x41
 800080a:	e050      	b.n	80008ae <get_pressed_key+0x172>
					break;
				case 1:
					if(row == 0)return '8';
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d101      	bne.n	8000816 <get_pressed_key+0xda>
 8000812:	2338      	movs	r3, #56	; 0x38
 8000814:	e04b      	b.n	80008ae <get_pressed_key+0x172>
					else if(row == 1)return '5';
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d101      	bne.n	8000820 <get_pressed_key+0xe4>
 800081c:	2335      	movs	r3, #53	; 0x35
 800081e:	e046      	b.n	80008ae <get_pressed_key+0x172>
					else if(row == 2)return '2';
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	2b02      	cmp	r3, #2
 8000824:	d101      	bne.n	800082a <get_pressed_key+0xee>
 8000826:	2332      	movs	r3, #50	; 0x32
 8000828:	e041      	b.n	80008ae <get_pressed_key+0x172>
					else if(row == 3)return '0';
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	2b03      	cmp	r3, #3
 800082e:	d12b      	bne.n	8000888 <get_pressed_key+0x14c>
 8000830:	2330      	movs	r3, #48	; 0x30
 8000832:	e03c      	b.n	80008ae <get_pressed_key+0x172>
					break;
				case 2:
					if(row == 0)return '9';
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d101      	bne.n	800083e <get_pressed_key+0x102>
 800083a:	2339      	movs	r3, #57	; 0x39
 800083c:	e037      	b.n	80008ae <get_pressed_key+0x172>
					else if(row == 1)return '6';
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d101      	bne.n	8000848 <get_pressed_key+0x10c>
 8000844:	2336      	movs	r3, #54	; 0x36
 8000846:	e032      	b.n	80008ae <get_pressed_key+0x172>
					else if(row == 2)return '3';
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b02      	cmp	r3, #2
 800084c:	d101      	bne.n	8000852 <get_pressed_key+0x116>
 800084e:	2333      	movs	r3, #51	; 0x33
 8000850:	e02d      	b.n	80008ae <get_pressed_key+0x172>
					else if(row == 3)return '=';
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	2b03      	cmp	r3, #3
 8000856:	d119      	bne.n	800088c <get_pressed_key+0x150>
 8000858:	233d      	movs	r3, #61	; 0x3d
 800085a:	e028      	b.n	80008ae <get_pressed_key+0x172>
					break;
				case 3:
				if(row == 0)return '/';
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d101      	bne.n	8000866 <get_pressed_key+0x12a>
 8000862:	232f      	movs	r3, #47	; 0x2f
 8000864:	e023      	b.n	80008ae <get_pressed_key+0x172>
				else if(row == 1)return '*';
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d101      	bne.n	8000870 <get_pressed_key+0x134>
 800086c:	232a      	movs	r3, #42	; 0x2a
 800086e:	e01e      	b.n	80008ae <get_pressed_key+0x172>
				else if(row == 2)return '-';
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	2b02      	cmp	r3, #2
 8000874:	d101      	bne.n	800087a <get_pressed_key+0x13e>
 8000876:	232d      	movs	r3, #45	; 0x2d
 8000878:	e019      	b.n	80008ae <get_pressed_key+0x172>
				else if(row == 3)return '+';
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	2b03      	cmp	r3, #3
 800087e:	d107      	bne.n	8000890 <get_pressed_key+0x154>
 8000880:	232b      	movs	r3, #43	; 0x2b
 8000882:	e014      	b.n	80008ae <get_pressed_key+0x172>
					break;
 8000884:	bf00      	nop
 8000886:	e004      	b.n	8000892 <get_pressed_key+0x156>
					break;
 8000888:	bf00      	nop
 800088a:	e002      	b.n	8000892 <get_pressed_key+0x156>
					break;
 800088c:	bf00      	nop
 800088e:	e000      	b.n	8000892 <get_pressed_key+0x156>
					break;
 8000890:	bf00      	nop
		for (row = 0; row < 4; row++) {
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	3301      	adds	r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	2b03      	cmp	r3, #3
 800089c:	f77f af7a 	ble.w	8000794 <get_pressed_key+0x58>
	for (column = 0; column < 4; column++)
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	3301      	adds	r3, #1
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	2b03      	cmp	r3, #3
 80008aa:	f77f af4d 	ble.w	8000748 <get_pressed_key+0xc>
				}
			}
		}
	}
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000010 	.word	0x20000010
 80008bc:	40010c00 	.word	0x40010c00
 80008c0:	20000000 	.word	0x20000000

080008c4 <LCD_GPIO_init>:


//***************************LCD INIT FUNCTION***********************************

void LCD_GPIO_init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	LCD.GPIO_PinNumber = RS;
 80008c8:	4b52      	ldr	r3, [pc, #328]	; (8000a14 <LCD_GPIO_init+0x150>)
 80008ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008ce:	801a      	strh	r2, [r3, #0]
	LCD.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 80008d0:	4b50      	ldr	r3, [pc, #320]	; (8000a14 <LCD_GPIO_init+0x150>)
 80008d2:	2204      	movs	r2, #4
 80008d4:	805a      	strh	r2, [r3, #2]
	LCD.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 80008d6:	4b4f      	ldr	r3, [pc, #316]	; (8000a14 <LCD_GPIO_init+0x150>)
 80008d8:	2201      	movs	r2, #1
 80008da:	809a      	strh	r2, [r3, #4]
	GPIO_Init(LCD_PORT, &LCD);
 80008dc:	494d      	ldr	r1, [pc, #308]	; (8000a14 <LCD_GPIO_init+0x150>)
 80008de:	484e      	ldr	r0, [pc, #312]	; (8000a18 <LCD_GPIO_init+0x154>)
 80008e0:	f7ff fd98 	bl	8000414 <GPIO_Init>

	LCD.GPIO_PinNumber = RW;
 80008e4:	4b4b      	ldr	r3, [pc, #300]	; (8000a14 <LCD_GPIO_init+0x150>)
 80008e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ea:	801a      	strh	r2, [r3, #0]
	LCD.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 80008ec:	4b49      	ldr	r3, [pc, #292]	; (8000a14 <LCD_GPIO_init+0x150>)
 80008ee:	2204      	movs	r2, #4
 80008f0:	805a      	strh	r2, [r3, #2]
	LCD.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 80008f2:	4b48      	ldr	r3, [pc, #288]	; (8000a14 <LCD_GPIO_init+0x150>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	809a      	strh	r2, [r3, #4]
	GPIO_Init(LCD_PORT, &LCD);
 80008f8:	4946      	ldr	r1, [pc, #280]	; (8000a14 <LCD_GPIO_init+0x150>)
 80008fa:	4847      	ldr	r0, [pc, #284]	; (8000a18 <LCD_GPIO_init+0x154>)
 80008fc:	f7ff fd8a 	bl	8000414 <GPIO_Init>

	LCD.GPIO_PinNumber = EN;
 8000900:	4b44      	ldr	r3, [pc, #272]	; (8000a14 <LCD_GPIO_init+0x150>)
 8000902:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000906:	801a      	strh	r2, [r3, #0]
	LCD.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 8000908:	4b42      	ldr	r3, [pc, #264]	; (8000a14 <LCD_GPIO_init+0x150>)
 800090a:	2204      	movs	r2, #4
 800090c:	805a      	strh	r2, [r3, #2]
	LCD.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 800090e:	4b41      	ldr	r3, [pc, #260]	; (8000a14 <LCD_GPIO_init+0x150>)
 8000910:	2201      	movs	r2, #1
 8000912:	809a      	strh	r2, [r3, #4]
	GPIO_Init(LCD_PORT, &LCD);
 8000914:	493f      	ldr	r1, [pc, #252]	; (8000a14 <LCD_GPIO_init+0x150>)
 8000916:	4840      	ldr	r0, [pc, #256]	; (8000a18 <LCD_GPIO_init+0x154>)
 8000918:	f7ff fd7c 	bl	8000414 <GPIO_Init>


	//Setting Pin 0->7 to be output with 10Mhz speed for LCD DATA D0->D7
	LCD.GPIO_PinNumber = LCD_D0_PIN;
 800091c:	4b3d      	ldr	r3, [pc, #244]	; (8000a14 <LCD_GPIO_init+0x150>)
 800091e:	2201      	movs	r2, #1
 8000920:	801a      	strh	r2, [r3, #0]
	LCD.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 8000922:	4b3c      	ldr	r3, [pc, #240]	; (8000a14 <LCD_GPIO_init+0x150>)
 8000924:	2204      	movs	r2, #4
 8000926:	805a      	strh	r2, [r3, #2]
	LCD.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 8000928:	4b3a      	ldr	r3, [pc, #232]	; (8000a14 <LCD_GPIO_init+0x150>)
 800092a:	2201      	movs	r2, #1
 800092c:	809a      	strh	r2, [r3, #4]
	GPIO_Init(LCD_PORT, &LCD);
 800092e:	4939      	ldr	r1, [pc, #228]	; (8000a14 <LCD_GPIO_init+0x150>)
 8000930:	4839      	ldr	r0, [pc, #228]	; (8000a18 <LCD_GPIO_init+0x154>)
 8000932:	f7ff fd6f 	bl	8000414 <GPIO_Init>

	LCD.GPIO_PinNumber =	LCD_D1_PIN;
 8000936:	4b37      	ldr	r3, [pc, #220]	; (8000a14 <LCD_GPIO_init+0x150>)
 8000938:	2202      	movs	r2, #2
 800093a:	801a      	strh	r2, [r3, #0]
	LCD.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 800093c:	4b35      	ldr	r3, [pc, #212]	; (8000a14 <LCD_GPIO_init+0x150>)
 800093e:	2204      	movs	r2, #4
 8000940:	805a      	strh	r2, [r3, #2]
	LCD.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 8000942:	4b34      	ldr	r3, [pc, #208]	; (8000a14 <LCD_GPIO_init+0x150>)
 8000944:	2201      	movs	r2, #1
 8000946:	809a      	strh	r2, [r3, #4]
	GPIO_Init(LCD_PORT, &LCD);
 8000948:	4932      	ldr	r1, [pc, #200]	; (8000a14 <LCD_GPIO_init+0x150>)
 800094a:	4833      	ldr	r0, [pc, #204]	; (8000a18 <LCD_GPIO_init+0x154>)
 800094c:	f7ff fd62 	bl	8000414 <GPIO_Init>


	LCD.GPIO_PinNumber = LCD_D2_PIN;
 8000950:	4b30      	ldr	r3, [pc, #192]	; (8000a14 <LCD_GPIO_init+0x150>)
 8000952:	2204      	movs	r2, #4
 8000954:	801a      	strh	r2, [r3, #0]
	LCD.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 8000956:	4b2f      	ldr	r3, [pc, #188]	; (8000a14 <LCD_GPIO_init+0x150>)
 8000958:	2204      	movs	r2, #4
 800095a:	805a      	strh	r2, [r3, #2]
	LCD.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 800095c:	4b2d      	ldr	r3, [pc, #180]	; (8000a14 <LCD_GPIO_init+0x150>)
 800095e:	2201      	movs	r2, #1
 8000960:	809a      	strh	r2, [r3, #4]
	GPIO_Init(LCD_PORT, &LCD);
 8000962:	492c      	ldr	r1, [pc, #176]	; (8000a14 <LCD_GPIO_init+0x150>)
 8000964:	482c      	ldr	r0, [pc, #176]	; (8000a18 <LCD_GPIO_init+0x154>)
 8000966:	f7ff fd55 	bl	8000414 <GPIO_Init>


	LCD.GPIO_PinNumber = LCD_D3_PIN;
 800096a:	4b2a      	ldr	r3, [pc, #168]	; (8000a14 <LCD_GPIO_init+0x150>)
 800096c:	2208      	movs	r2, #8
 800096e:	801a      	strh	r2, [r3, #0]
	LCD.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 8000970:	4b28      	ldr	r3, [pc, #160]	; (8000a14 <LCD_GPIO_init+0x150>)
 8000972:	2204      	movs	r2, #4
 8000974:	805a      	strh	r2, [r3, #2]
	LCD.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 8000976:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <LCD_GPIO_init+0x150>)
 8000978:	2201      	movs	r2, #1
 800097a:	809a      	strh	r2, [r3, #4]
	GPIO_Init(LCD_PORT, &LCD);
 800097c:	4925      	ldr	r1, [pc, #148]	; (8000a14 <LCD_GPIO_init+0x150>)
 800097e:	4826      	ldr	r0, [pc, #152]	; (8000a18 <LCD_GPIO_init+0x154>)
 8000980:	f7ff fd48 	bl	8000414 <GPIO_Init>


	LCD.GPIO_PinNumber = LCD_D4_PIN;
 8000984:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <LCD_GPIO_init+0x150>)
 8000986:	2210      	movs	r2, #16
 8000988:	801a      	strh	r2, [r3, #0]
	LCD.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 800098a:	4b22      	ldr	r3, [pc, #136]	; (8000a14 <LCD_GPIO_init+0x150>)
 800098c:	2204      	movs	r2, #4
 800098e:	805a      	strh	r2, [r3, #2]
	LCD.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 8000990:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <LCD_GPIO_init+0x150>)
 8000992:	2201      	movs	r2, #1
 8000994:	809a      	strh	r2, [r3, #4]
	GPIO_Init(LCD_PORT, &LCD);
 8000996:	491f      	ldr	r1, [pc, #124]	; (8000a14 <LCD_GPIO_init+0x150>)
 8000998:	481f      	ldr	r0, [pc, #124]	; (8000a18 <LCD_GPIO_init+0x154>)
 800099a:	f7ff fd3b 	bl	8000414 <GPIO_Init>


	LCD.GPIO_PinNumber = LCD_D5_PIN;
 800099e:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <LCD_GPIO_init+0x150>)
 80009a0:	2220      	movs	r2, #32
 80009a2:	801a      	strh	r2, [r3, #0]
	LCD.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 80009a4:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <LCD_GPIO_init+0x150>)
 80009a6:	2204      	movs	r2, #4
 80009a8:	805a      	strh	r2, [r3, #2]
	LCD.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 80009aa:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <LCD_GPIO_init+0x150>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	809a      	strh	r2, [r3, #4]
	GPIO_Init(LCD_PORT, &LCD);
 80009b0:	4918      	ldr	r1, [pc, #96]	; (8000a14 <LCD_GPIO_init+0x150>)
 80009b2:	4819      	ldr	r0, [pc, #100]	; (8000a18 <LCD_GPIO_init+0x154>)
 80009b4:	f7ff fd2e 	bl	8000414 <GPIO_Init>


	LCD.GPIO_PinNumber = LCD_D6_PIN;
 80009b8:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <LCD_GPIO_init+0x150>)
 80009ba:	2240      	movs	r2, #64	; 0x40
 80009bc:	801a      	strh	r2, [r3, #0]
	LCD.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <LCD_GPIO_init+0x150>)
 80009c0:	2204      	movs	r2, #4
 80009c2:	805a      	strh	r2, [r3, #2]
	LCD.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <LCD_GPIO_init+0x150>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	809a      	strh	r2, [r3, #4]
	GPIO_Init(LCD_PORT, &LCD);
 80009ca:	4912      	ldr	r1, [pc, #72]	; (8000a14 <LCD_GPIO_init+0x150>)
 80009cc:	4812      	ldr	r0, [pc, #72]	; (8000a18 <LCD_GPIO_init+0x154>)
 80009ce:	f7ff fd21 	bl	8000414 <GPIO_Init>


	LCD.GPIO_PinNumber = LCD_D7_PIN;
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <LCD_GPIO_init+0x150>)
 80009d4:	2280      	movs	r2, #128	; 0x80
 80009d6:	801a      	strh	r2, [r3, #0]
	LCD.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 80009d8:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <LCD_GPIO_init+0x150>)
 80009da:	2204      	movs	r2, #4
 80009dc:	805a      	strh	r2, [r3, #2]
	LCD.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <LCD_GPIO_init+0x150>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	809a      	strh	r2, [r3, #4]
	GPIO_Init(LCD_PORT, &LCD);
 80009e4:	490b      	ldr	r1, [pc, #44]	; (8000a14 <LCD_GPIO_init+0x150>)
 80009e6:	480c      	ldr	r0, [pc, #48]	; (8000a18 <LCD_GPIO_init+0x154>)
 80009e8:	f7ff fd14 	bl	8000414 <GPIO_Init>

	//RS->0 instruction register
	GPIO_WRITE_Pin(LCD_PORT, RS, GPIO_LOW);
 80009ec:	2200      	movs	r2, #0
 80009ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f2:	4809      	ldr	r0, [pc, #36]	; (8000a18 <LCD_GPIO_init+0x154>)
 80009f4:	f7ff fde7 	bl	80005c6 <GPIO_WRITE_Pin>
	//RW->0 Write
	GPIO_WRITE_Pin(LCD_PORT, RW, GPIO_LOW);
 80009f8:	2200      	movs	r2, #0
 80009fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009fe:	4806      	ldr	r0, [pc, #24]	; (8000a18 <LCD_GPIO_init+0x154>)
 8000a00:	f7ff fde1 	bl	80005c6 <GPIO_WRITE_Pin>
	//EN->0
	GPIO_WRITE_Pin(LCD_PORT, EN, GPIO_LOW);
 8000a04:	2200      	movs	r2, #0
 8000a06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a0a:	4803      	ldr	r0, [pc, #12]	; (8000a18 <LCD_GPIO_init+0x154>)
 8000a0c:	f7ff fddb 	bl	80005c6 <GPIO_WRITE_Pin>

}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000048 	.word	0x20000048
 8000a18:	40010800 	.word	0x40010800

08000a1c <LCD_INIT>:
void LCD_INIT(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	LCD_GPIO_init();
 8000a20:	f7ff ff50 	bl	80008c4 <LCD_GPIO_init>
	_delay_ms(20);
 8000a24:	2014      	movs	r0, #20
 8000a26:	f000 f9b7 	bl	8000d98 <_delay_ms>
	LCD_WRITE_COMMAND(LCD_8BIT_MODE_2_LINE);
 8000a2a:	2038      	movs	r0, #56	; 0x38
 8000a2c:	f000 f828 	bl	8000a80 <LCD_WRITE_COMMAND>
	_delay_ms(5);
 8000a30:	2005      	movs	r0, #5
 8000a32:	f000 f9b1 	bl	8000d98 <_delay_ms>
	LCD_WRITE_COMMAND(LCD_8BIT_MODE_2_LINE);
 8000a36:	2038      	movs	r0, #56	; 0x38
 8000a38:	f000 f822 	bl	8000a80 <LCD_WRITE_COMMAND>
	_delay_ms(150);
 8000a3c:	2096      	movs	r0, #150	; 0x96
 8000a3e:	f000 f9ab 	bl	8000d98 <_delay_ms>
	LCD_WRITE_COMMAND(LCD_8BIT_MODE_2_LINE);
 8000a42:	2038      	movs	r0, #56	; 0x38
 8000a44:	f000 f81c 	bl	8000a80 <LCD_WRITE_COMMAND>

	LCD_WRITE_COMMAND(LCD_CLEAR);
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f000 f819 	bl	8000a80 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_RETURN_HOME);
 8000a4e:	2002      	movs	r0, #2
 8000a50:	f000 f816 	bl	8000a80 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE_INC_SHIFT_OFF);
 8000a54:	2006      	movs	r0, #6
 8000a56:	f000 f813 	bl	8000a80 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISPLAY_ON_UNDERLINE_ON_CURSOR_ON);
 8000a5a:	200f      	movs	r0, #15
 8000a5c:	f000 f810 	bl	8000a80 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_8BIT_MODE_2_LINE);
 8000a60:	2038      	movs	r0, #56	; 0x38
 8000a62:	f000 f80d 	bl	8000a80 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DDRAM_START);
 8000a66:	2080      	movs	r0, #128	; 0x80
 8000a68:	f000 f80a 	bl	8000a80 <LCD_WRITE_COMMAND>

}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <LCD_clearscreen>:

//***************************LCD CLEAR FUNCTION***********************************

void LCD_clearscreen(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR);
 8000a74:	2001      	movs	r0, #1
 8000a76:	f000 f803 	bl	8000a80 <LCD_WRITE_COMMAND>
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <LCD_WRITE_COMMAND>:



//***************************COMMAND FUNCTION***********************************

void LCD_WRITE_COMMAND(unsigned char command){
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]

	LCDisbusy();
 8000a8a:	f000 f90b 	bl	8000ca4 <LCDisbusy>

	//RS == 0 (instruction register)
	GPIO_WRITE_Pin(LCD_PORT, RS, GPIO_LOW);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a94:	4832      	ldr	r0, [pc, #200]	; (8000b60 <LCD_WRITE_COMMAND+0xe0>)
 8000a96:	f7ff fd96 	bl	80005c6 <GPIO_WRITE_Pin>
	//RW == 0 (Write mode)
	GPIO_WRITE_Pin(LCD_PORT, RW, GPIO_LOW);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aa0:	482f      	ldr	r0, [pc, #188]	; (8000b60 <LCD_WRITE_COMMAND+0xe0>)
 8000aa2:	f7ff fd90 	bl	80005c6 <GPIO_WRITE_Pin>

	GPIO_WRITE_Pin(LCD_PORT, LCD_D0_PIN, READ_BIT(command,0)  );
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	461a      	mov	r2, r3
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	482b      	ldr	r0, [pc, #172]	; (8000b60 <LCD_WRITE_COMMAND+0xe0>)
 8000ab4:	f7ff fd87 	bl	80005c6 <GPIO_WRITE_Pin>
	GPIO_WRITE_Pin(LCD_PORT, LCD_D1_PIN, READ_BIT(command,1)  );
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	085b      	lsrs	r3, r3, #1
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	2102      	movs	r1, #2
 8000ac8:	4825      	ldr	r0, [pc, #148]	; (8000b60 <LCD_WRITE_COMMAND+0xe0>)
 8000aca:	f7ff fd7c 	bl	80005c6 <GPIO_WRITE_Pin>
	GPIO_WRITE_Pin(LCD_PORT, LCD_D2_PIN, READ_BIT(command,2)  );
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	089b      	lsrs	r3, r3, #2
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	461a      	mov	r2, r3
 8000adc:	2104      	movs	r1, #4
 8000ade:	4820      	ldr	r0, [pc, #128]	; (8000b60 <LCD_WRITE_COMMAND+0xe0>)
 8000ae0:	f7ff fd71 	bl	80005c6 <GPIO_WRITE_Pin>
	GPIO_WRITE_Pin(LCD_PORT, LCD_D3_PIN, READ_BIT(command,3)  );
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	08db      	lsrs	r3, r3, #3
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	461a      	mov	r2, r3
 8000af2:	2108      	movs	r1, #8
 8000af4:	481a      	ldr	r0, [pc, #104]	; (8000b60 <LCD_WRITE_COMMAND+0xe0>)
 8000af6:	f7ff fd66 	bl	80005c6 <GPIO_WRITE_Pin>
	GPIO_WRITE_Pin(LCD_PORT, LCD_D4_PIN, READ_BIT(command,4)  );
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	091b      	lsrs	r3, r3, #4
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	461a      	mov	r2, r3
 8000b08:	2110      	movs	r1, #16
 8000b0a:	4815      	ldr	r0, [pc, #84]	; (8000b60 <LCD_WRITE_COMMAND+0xe0>)
 8000b0c:	f7ff fd5b 	bl	80005c6 <GPIO_WRITE_Pin>
	GPIO_WRITE_Pin(LCD_PORT, LCD_D5_PIN, READ_BIT(command,5)  );
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	095b      	lsrs	r3, r3, #5
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	2120      	movs	r1, #32
 8000b20:	480f      	ldr	r0, [pc, #60]	; (8000b60 <LCD_WRITE_COMMAND+0xe0>)
 8000b22:	f7ff fd50 	bl	80005c6 <GPIO_WRITE_Pin>
	GPIO_WRITE_Pin(LCD_PORT, LCD_D6_PIN, READ_BIT(command,6)  );
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	099b      	lsrs	r3, r3, #6
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	461a      	mov	r2, r3
 8000b34:	2140      	movs	r1, #64	; 0x40
 8000b36:	480a      	ldr	r0, [pc, #40]	; (8000b60 <LCD_WRITE_COMMAND+0xe0>)
 8000b38:	f7ff fd45 	bl	80005c6 <GPIO_WRITE_Pin>
	GPIO_WRITE_Pin(LCD_PORT, LCD_D7_PIN, READ_BIT(command,7)  );
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	09db      	lsrs	r3, r3, #7
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	461a      	mov	r2, r3
 8000b44:	2180      	movs	r1, #128	; 0x80
 8000b46:	4806      	ldr	r0, [pc, #24]	; (8000b60 <LCD_WRITE_COMMAND+0xe0>)
 8000b48:	f7ff fd3d 	bl	80005c6 <GPIO_WRITE_Pin>

	_delay_ms(5);
 8000b4c:	2005      	movs	r0, #5
 8000b4e:	f000 f923 	bl	8000d98 <_delay_ms>
	LCD_ENABLE_SIGNAL();
 8000b52:	f000 f90b 	bl	8000d6c <LCD_ENABLE_SIGNAL>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40010800 	.word	0x40010800

08000b64 <LCD_WRITE_DATA>:

//******************************CHARACTER FUNCTION********************************


void LCD_WRITE_DATA(unsigned char data){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]


	LCDisbusy();
 8000b6e:	f000 f899 	bl	8000ca4 <LCDisbusy>

	//RS == 0 (instruction register)
	GPIO_WRITE_Pin(LCD_PORT, RS, GPIO_HIGH);
 8000b72:	2201      	movs	r2, #1
 8000b74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b78:	4832      	ldr	r0, [pc, #200]	; (8000c44 <LCD_WRITE_DATA+0xe0>)
 8000b7a:	f7ff fd24 	bl	80005c6 <GPIO_WRITE_Pin>
	//RW == 0 (Write mode)
	GPIO_WRITE_Pin(LCD_PORT, RW, GPIO_LOW);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b84:	482f      	ldr	r0, [pc, #188]	; (8000c44 <LCD_WRITE_DATA+0xe0>)
 8000b86:	f7ff fd1e 	bl	80005c6 <GPIO_WRITE_Pin>

	GPIO_WRITE_Pin(LCD_PORT, LCD_D0_PIN, READ_BIT(data,0)  );
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	461a      	mov	r2, r3
 8000b94:	2101      	movs	r1, #1
 8000b96:	482b      	ldr	r0, [pc, #172]	; (8000c44 <LCD_WRITE_DATA+0xe0>)
 8000b98:	f7ff fd15 	bl	80005c6 <GPIO_WRITE_Pin>
	GPIO_WRITE_Pin(LCD_PORT, LCD_D1_PIN, READ_BIT(data,1)  );
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	085b      	lsrs	r3, r3, #1
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	461a      	mov	r2, r3
 8000baa:	2102      	movs	r1, #2
 8000bac:	4825      	ldr	r0, [pc, #148]	; (8000c44 <LCD_WRITE_DATA+0xe0>)
 8000bae:	f7ff fd0a 	bl	80005c6 <GPIO_WRITE_Pin>
	GPIO_WRITE_Pin(LCD_PORT, LCD_D2_PIN, READ_BIT(data,2)  );
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	089b      	lsrs	r3, r3, #2
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	2104      	movs	r1, #4
 8000bc2:	4820      	ldr	r0, [pc, #128]	; (8000c44 <LCD_WRITE_DATA+0xe0>)
 8000bc4:	f7ff fcff 	bl	80005c6 <GPIO_WRITE_Pin>
	GPIO_WRITE_Pin(LCD_PORT, LCD_D3_PIN, READ_BIT(data,3)  );
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	08db      	lsrs	r3, r3, #3
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	2108      	movs	r1, #8
 8000bd8:	481a      	ldr	r0, [pc, #104]	; (8000c44 <LCD_WRITE_DATA+0xe0>)
 8000bda:	f7ff fcf4 	bl	80005c6 <GPIO_WRITE_Pin>
	GPIO_WRITE_Pin(LCD_PORT, LCD_D4_PIN, READ_BIT(data,4)  );
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	091b      	lsrs	r3, r3, #4
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	461a      	mov	r2, r3
 8000bec:	2110      	movs	r1, #16
 8000bee:	4815      	ldr	r0, [pc, #84]	; (8000c44 <LCD_WRITE_DATA+0xe0>)
 8000bf0:	f7ff fce9 	bl	80005c6 <GPIO_WRITE_Pin>
	GPIO_WRITE_Pin(LCD_PORT, LCD_D5_PIN, READ_BIT(data,5)  );
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	095b      	lsrs	r3, r3, #5
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	461a      	mov	r2, r3
 8000c02:	2120      	movs	r1, #32
 8000c04:	480f      	ldr	r0, [pc, #60]	; (8000c44 <LCD_WRITE_DATA+0xe0>)
 8000c06:	f7ff fcde 	bl	80005c6 <GPIO_WRITE_Pin>
	GPIO_WRITE_Pin(LCD_PORT, LCD_D6_PIN, READ_BIT(data,6)  );
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	099b      	lsrs	r3, r3, #6
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	461a      	mov	r2, r3
 8000c18:	2140      	movs	r1, #64	; 0x40
 8000c1a:	480a      	ldr	r0, [pc, #40]	; (8000c44 <LCD_WRITE_DATA+0xe0>)
 8000c1c:	f7ff fcd3 	bl	80005c6 <GPIO_WRITE_Pin>
	GPIO_WRITE_Pin(LCD_PORT, LCD_D7_PIN, READ_BIT(data,7)  );
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	09db      	lsrs	r3, r3, #7
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	461a      	mov	r2, r3
 8000c28:	2180      	movs	r1, #128	; 0x80
 8000c2a:	4806      	ldr	r0, [pc, #24]	; (8000c44 <LCD_WRITE_DATA+0xe0>)
 8000c2c:	f7ff fccb 	bl	80005c6 <GPIO_WRITE_Pin>

	_delay_ms(5);
 8000c30:	2005      	movs	r0, #5
 8000c32:	f000 f8b1 	bl	8000d98 <_delay_ms>
	LCD_ENABLE_SIGNAL();
 8000c36:	f000 f899 	bl	8000d6c <LCD_ENABLE_SIGNAL>

}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40010800 	.word	0x40010800

08000c48 <LCD_WRITE_STRING>:

//*************************STRING FUNCTION*************************************



void LCD_WRITE_STRING(char* string){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

	int counter  = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]
	while(*string){
 8000c54:	e01c      	b.n	8000c90 <LCD_WRITE_STRING+0x48>
		LCD_WRITE_DATA(*string++);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	1c5a      	adds	r2, r3, #1
 8000c5a:	607a      	str	r2, [r7, #4]
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff ff80 	bl	8000b64 <LCD_WRITE_DATA>
		counter++;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	3301      	adds	r3, #1
 8000c68:	60fb      	str	r3, [r7, #12]

		if(counter == 16){
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	2b10      	cmp	r3, #16
 8000c6e:	d104      	bne.n	8000c7a <LCD_WRITE_STRING+0x32>

			LCD_GOTO_XY(2,0);
 8000c70:	2100      	movs	r1, #0
 8000c72:	2002      	movs	r0, #2
 8000c74:	f000 f854 	bl	8000d20 <LCD_GOTO_XY>
 8000c78:	e00a      	b.n	8000c90 <LCD_WRITE_STRING+0x48>


		}

		else if(counter == 32){
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	2b20      	cmp	r3, #32
 8000c7e:	d107      	bne.n	8000c90 <LCD_WRITE_STRING+0x48>
			LCD_clearscreen();
 8000c80:	f7ff fef6 	bl	8000a70 <LCD_clearscreen>
			LCD_GOTO_XY(1,0);
 8000c84:	2100      	movs	r1, #0
 8000c86:	2001      	movs	r0, #1
 8000c88:	f000 f84a 	bl	8000d20 <LCD_GOTO_XY>
			counter = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60fb      	str	r3, [r7, #12]
	while(*string){
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d1de      	bne.n	8000c56 <LCD_WRITE_STRING+0xe>


	}


}
 8000c98:	bf00      	nop
 8000c9a:	bf00      	nop
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <LCDisbusy>:

//****************************BUSY FUNCTION**********************************

void LCDisbusy(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	LCD.GPIO_PinNumber = LCD_D7_PIN;
 8000ca8:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <LCDisbusy+0x74>)
 8000caa:	2280      	movs	r2, #128	; 0x80
 8000cac:	801a      	strh	r2, [r3, #0]
	LCD.GPIO_PinMode = GPIO_MODE_INPUT_FLO;
 8000cae:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <LCDisbusy+0x74>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	805a      	strh	r2, [r3, #2]
	GPIO_Init(LCD_PORT, &LCD);
 8000cb4:	4918      	ldr	r1, [pc, #96]	; (8000d18 <LCDisbusy+0x74>)
 8000cb6:	4819      	ldr	r0, [pc, #100]	; (8000d1c <LCDisbusy+0x78>)
 8000cb8:	f7ff fbac 	bl	8000414 <GPIO_Init>

	//RW == 1 (READ MODE)
	GPIO_WRITE_Pin(LCD_PORT, RW, GPIO_HIGH);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc2:	4816      	ldr	r0, [pc, #88]	; (8000d1c <LCDisbusy+0x78>)
 8000cc4:	f7ff fc7f 	bl	80005c6 <GPIO_WRITE_Pin>
	//RS == 0 (Command Mode)
	GPIO_WRITE_Pin(LCD_PORT, RS, GPIO_LOW);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cce:	4813      	ldr	r0, [pc, #76]	; (8000d1c <LCDisbusy+0x78>)
 8000cd0:	f7ff fc79 	bl	80005c6 <GPIO_WRITE_Pin>

	while(GPIO_READ_Pin(LCD_PORT, LCD_D7_PIN) & 1);//checking on pin D7 if it's busy or not
 8000cd4:	bf00      	nop
 8000cd6:	2180      	movs	r1, #128	; 0x80
 8000cd8:	4810      	ldr	r0, [pc, #64]	; (8000d1c <LCDisbusy+0x78>)
 8000cda:	f7ff fc60 	bl	800059e <GPIO_READ_Pin>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d1f6      	bne.n	8000cd6 <LCDisbusy+0x32>

	LCD_ENABLE_SIGNAL();
 8000ce8:	f000 f840 	bl	8000d6c <LCD_ENABLE_SIGNAL>

	//set D7 to to be output
	LCD.GPIO_PinNumber = LCD_D7_PIN;
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <LCDisbusy+0x74>)
 8000cee:	2280      	movs	r2, #128	; 0x80
 8000cf0:	801a      	strh	r2, [r3, #0]
	LCD.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <LCDisbusy+0x74>)
 8000cf4:	2204      	movs	r2, #4
 8000cf6:	805a      	strh	r2, [r3, #2]
	LCD.GPIO_PinSpeed = GPIO_SPEED_10MHz;
 8000cf8:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <LCDisbusy+0x74>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	809a      	strh	r2, [r3, #4]
	GPIO_Init(LCD_PORT, &LCD);
 8000cfe:	4906      	ldr	r1, [pc, #24]	; (8000d18 <LCDisbusy+0x74>)
 8000d00:	4806      	ldr	r0, [pc, #24]	; (8000d1c <LCDisbusy+0x78>)
 8000d02:	f7ff fb87 	bl	8000414 <GPIO_Init>

	//RW == 0 (Write Mode)
	GPIO_WRITE_Pin(LCD_PORT, RW, GPIO_LOW);
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d0c:	4803      	ldr	r0, [pc, #12]	; (8000d1c <LCDisbusy+0x78>)
 8000d0e:	f7ff fc5a 	bl	80005c6 <GPIO_WRITE_Pin>


}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000048 	.word	0x20000048
 8000d1c:	40010800 	.word	0x40010800

08000d20 <LCD_GOTO_XY>:

//*****************************POSITION FUNCTION*********************************

void LCD_GOTO_XY(unsigned char row, unsigned char column){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	460a      	mov	r2, r1
 8000d2a:	71fb      	strb	r3, [r7, #7]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	71bb      	strb	r3, [r7, #6]

	if(row == 1){
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d109      	bne.n	8000d4a <LCD_GOTO_XY+0x2a>

		if(column < 16 &&  column >=0)
 8000d36:	79bb      	ldrb	r3, [r7, #6]
 8000d38:	2b0f      	cmp	r3, #15
 8000d3a:	d812      	bhi.n	8000d62 <LCD_GOTO_XY+0x42>
		{
			LCD_WRITE_COMMAND(0x80 + column);
 8000d3c:	79bb      	ldrb	r3, [r7, #6]
 8000d3e:	3b80      	subs	r3, #128	; 0x80
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fe9c 	bl	8000a80 <LCD_WRITE_COMMAND>
		if(column < 32  && column >=0)
		{
			LCD_WRITE_COMMAND(0xC0 + column);
		}
	}
}
 8000d48:	e00b      	b.n	8000d62 <LCD_GOTO_XY+0x42>
	else if(row == 2){
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d108      	bne.n	8000d62 <LCD_GOTO_XY+0x42>
		if(column < 32  && column >=0)
 8000d50:	79bb      	ldrb	r3, [r7, #6]
 8000d52:	2b1f      	cmp	r3, #31
 8000d54:	d805      	bhi.n	8000d62 <LCD_GOTO_XY+0x42>
			LCD_WRITE_COMMAND(0xC0 + column);
 8000d56:	79bb      	ldrb	r3, [r7, #6]
 8000d58:	3b40      	subs	r3, #64	; 0x40
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fe8f 	bl	8000a80 <LCD_WRITE_COMMAND>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <LCD_ENABLE_SIGNAL>:
void LCD_ENABLE_SIGNAL(void){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0

	GPIO_WRITE_Pin(LCD_PORT, EN, GPIO_HIGH);
 8000d70:	2201      	movs	r2, #1
 8000d72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d76:	4807      	ldr	r0, [pc, #28]	; (8000d94 <LCD_ENABLE_SIGNAL+0x28>)
 8000d78:	f7ff fc25 	bl	80005c6 <GPIO_WRITE_Pin>
	_delay_ms(10);
 8000d7c:	200a      	movs	r0, #10
 8000d7e:	f000 f80b 	bl	8000d98 <_delay_ms>
	GPIO_WRITE_Pin(LCD_PORT, EN, GPIO_LOW);
 8000d82:	2200      	movs	r2, #0
 8000d84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <LCD_ENABLE_SIGNAL+0x28>)
 8000d8a:	f7ff fc1c 	bl	80005c6 <GPIO_WRITE_Pin>
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40010800 	.word	0x40010800

08000d98 <_delay_ms>:
void _delay_ms(unsigned long time){
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	unsigned long i,j;
	for(i=0 ;i<time;i++){
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	e00b      	b.n	8000dbe <_delay_ms+0x26>
		for(j=0;j<255;j++);
 8000da6:	2300      	movs	r3, #0
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	e002      	b.n	8000db2 <_delay_ms+0x1a>
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	3301      	adds	r3, #1
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	2bfe      	cmp	r3, #254	; 0xfe
 8000db6:	d9f9      	bls.n	8000dac <_delay_ms+0x14>
	for(i=0 ;i<time;i++){
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d3ef      	bcc.n	8000da6 <_delay_ms+0xe>
	}
}
 8000dc6:	bf00      	nop
 8000dc8:	bf00      	nop
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr
	...

08000dd4 <__libc_init_array>:
 8000dd4:	b570      	push	{r4, r5, r6, lr}
 8000dd6:	2600      	movs	r6, #0
 8000dd8:	4d0c      	ldr	r5, [pc, #48]	; (8000e0c <__libc_init_array+0x38>)
 8000dda:	4c0d      	ldr	r4, [pc, #52]	; (8000e10 <__libc_init_array+0x3c>)
 8000ddc:	1b64      	subs	r4, r4, r5
 8000dde:	10a4      	asrs	r4, r4, #2
 8000de0:	42a6      	cmp	r6, r4
 8000de2:	d109      	bne.n	8000df8 <__libc_init_array+0x24>
 8000de4:	f000 f81a 	bl	8000e1c <_init>
 8000de8:	2600      	movs	r6, #0
 8000dea:	4d0a      	ldr	r5, [pc, #40]	; (8000e14 <__libc_init_array+0x40>)
 8000dec:	4c0a      	ldr	r4, [pc, #40]	; (8000e18 <__libc_init_array+0x44>)
 8000dee:	1b64      	subs	r4, r4, r5
 8000df0:	10a4      	asrs	r4, r4, #2
 8000df2:	42a6      	cmp	r6, r4
 8000df4:	d105      	bne.n	8000e02 <__libc_init_array+0x2e>
 8000df6:	bd70      	pop	{r4, r5, r6, pc}
 8000df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dfc:	4798      	blx	r3
 8000dfe:	3601      	adds	r6, #1
 8000e00:	e7ee      	b.n	8000de0 <__libc_init_array+0xc>
 8000e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e06:	4798      	blx	r3
 8000e08:	3601      	adds	r6, #1
 8000e0a:	e7f2      	b.n	8000df2 <__libc_init_array+0x1e>
 8000e0c:	08000e70 	.word	0x08000e70
 8000e10:	08000e70 	.word	0x08000e70
 8000e14:	08000e70 	.word	0x08000e70
 8000e18:	08000e74 	.word	0x08000e74

08000e1c <_init>:
 8000e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e1e:	bf00      	nop
 8000e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e22:	bc08      	pop	{r3}
 8000e24:	469e      	mov	lr, r3
 8000e26:	4770      	bx	lr

08000e28 <_fini>:
 8000e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e2a:	bf00      	nop
 8000e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e2e:	bc08      	pop	{r3}
 8000e30:	469e      	mov	lr, r3
 8000e32:	4770      	bx	lr
