
task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000158  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000158  000001ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800068  00800068  000001f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000059c  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000520  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001bd  00000000  00000000  00000d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000efc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002cc  00000000  00000000  00000f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000011ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e5       	ldi	r30, 0x58	; 88
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

unsigned char LEDS[] = {PIN0,PIN1,PIN2,PIN3,PIN4,PIN5,PIN6,PIN7};
int i=0;
int main(void)
{
    SET_BIT(DDRA,PIN0);
  92:	8a b3       	in	r24, 0x1a	; 26
  94:	81 60       	ori	r24, 0x01	; 1
  96:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRA,PIN1);
  98:	8a b3       	in	r24, 0x1a	; 26
  9a:	82 60       	ori	r24, 0x02	; 2
  9c:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRA,PIN2);
  9e:	8a b3       	in	r24, 0x1a	; 26
  a0:	84 60       	ori	r24, 0x04	; 4
  a2:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRA,PIN3);
  a4:	8a b3       	in	r24, 0x1a	; 26
  a6:	88 60       	ori	r24, 0x08	; 8
  a8:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRA,PIN4);
  aa:	8a b3       	in	r24, 0x1a	; 26
  ac:	80 61       	ori	r24, 0x10	; 16
  ae:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRA,PIN5);
  b0:	8a b3       	in	r24, 0x1a	; 26
  b2:	80 62       	ori	r24, 0x20	; 32
  b4:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRA,PIN6);
  b6:	8a b3       	in	r24, 0x1a	; 26
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRA,PIN7);
  bc:	8a b3       	in	r24, 0x1a	; 26
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	8a bb       	out	0x1a, r24	; 26
	
	CLR_BIT(DDRD,PIN0);//pinA1 is input
  c2:	81 b3       	in	r24, 0x11	; 17
  c4:	8e 7f       	andi	r24, 0xFE	; 254
  c6:	81 bb       	out	0x11, r24	; 17
  c8:	1a c0       	rjmp	.+52     	; 0xfe <main+0x6c>
	
    while (1) 
    {
		while(i<8)
		{
			if(READ_BIT(PIND,PIN0) == 1)
  ca:	80 9b       	sbis	0x10, 0	; 16
  cc:	18 c0       	rjmp	.+48     	; 0xfe <main+0x6c>
			{
				SET_BIT(PORTA,LEDS[i++]);
  ce:	9c 01       	movw	r18, r24
  d0:	2f 5f       	subi	r18, 0xFF	; 255
  d2:	3f 4f       	sbci	r19, 0xFF	; 255
  d4:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <__data_end+0x1>
  d8:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <__data_end>
  dc:	fc 01       	movw	r30, r24
  de:	e0 5a       	subi	r30, 0xA0	; 160
  e0:	ff 4f       	sbci	r31, 0xFF	; 255
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	c9 01       	movw	r24, r18
  e8:	00 80       	ld	r0, Z
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <main+0x5e>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	0a 94       	dec	r0
  f2:	e2 f7       	brpl	.-8      	; 0xec <main+0x5a>
  f4:	9b b3       	in	r25, 0x1b	; 27
  f6:	89 2b       	or	r24, r25
  f8:	8b bb       	out	0x1b, r24	; 27
				while(READ_BIT(PIND,PIN0) == 1);//waiting until the button is released
  fa:	80 99       	sbic	0x10, 0	; 16
  fc:	fe cf       	rjmp	.-4      	; 0xfa <main+0x68>
	
	CLR_BIT(DDRD,PIN0);//pinA1 is input
	
    while (1) 
    {
		while(i<8)
  fe:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 102:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <__data_end+0x1>
 106:	88 30       	cpi	r24, 0x08	; 8
 108:	91 05       	cpc	r25, r1
 10a:	fc f2       	brlt	.-66     	; 0xca <main+0x38>
 10c:	1c c0       	rjmp	.+56     	; 0x146 <main+0xb4>
				while(READ_BIT(PIND,PIN0) == 1);//waiting until the button is released
			}
		}
		while(i>=0)
		{
			if(READ_BIT(PIND,PIN0) == 1)
 10e:	80 9b       	sbis	0x10, 0	; 16
 110:	1a c0       	rjmp	.+52     	; 0x146 <main+0xb4>
			{
				CLR_BIT(PORTA,LEDS[i--]);
 112:	9c 01       	movw	r18, r24
 114:	21 50       	subi	r18, 0x01	; 1
 116:	31 09       	sbc	r19, r1
 118:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <__data_end+0x1>
 11c:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <__data_end>
 120:	fc 01       	movw	r30, r24
 122:	e0 5a       	subi	r30, 0xA0	; 160
 124:	ff 4f       	sbci	r31, 0xFF	; 255
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	c9 01       	movw	r24, r18
 12c:	00 80       	ld	r0, Z
 12e:	02 c0       	rjmp	.+4      	; 0x134 <main+0xa2>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	0a 94       	dec	r0
 136:	e2 f7       	brpl	.-8      	; 0x130 <main+0x9e>
 138:	80 95       	com	r24
 13a:	90 95       	com	r25
 13c:	9b b3       	in	r25, 0x1b	; 27
 13e:	89 23       	and	r24, r25
 140:	8b bb       	out	0x1b, r24	; 27
				while(READ_BIT(PIND,PIN0) == 1);//waiting until the button is released
 142:	80 99       	sbic	0x10, 0	; 16
 144:	fe cf       	rjmp	.-4      	; 0x142 <main+0xb0>
			{
				SET_BIT(PORTA,LEDS[i++]);
				while(READ_BIT(PIND,PIN0) == 1);//waiting until the button is released
			}
		}
		while(i>=0)
 146:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 14a:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <__data_end+0x1>
 14e:	99 23       	and	r25, r25
 150:	f4 f6       	brge	.-68     	; 0x10e <main+0x7c>
 152:	d5 cf       	rjmp	.-86     	; 0xfe <main+0x6c>

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
