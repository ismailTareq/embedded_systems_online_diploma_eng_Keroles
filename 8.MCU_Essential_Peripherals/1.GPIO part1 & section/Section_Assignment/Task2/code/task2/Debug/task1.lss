
task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000158  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000158  000001cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ec  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ca  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c8  00000000  00000000  00000f16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000317  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000120  00000000  00000000  0000151b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000163b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e5       	ldi	r30, 0x58	; 88
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "util/delay.h"

unsigned char LEDS[] = {PIN0,PIN1,PIN2,PIN3,PIN4,PIN5,PIN6,PIN7};
int main(void)
{
    SET_BIT(DDRA,PIN0);
  82:	8a b3       	in	r24, 0x1a	; 26
  84:	81 60       	ori	r24, 0x01	; 1
  86:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRA,PIN1);
  88:	8a b3       	in	r24, 0x1a	; 26
  8a:	82 60       	ori	r24, 0x02	; 2
  8c:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRA,PIN2);
  8e:	8a b3       	in	r24, 0x1a	; 26
  90:	84 60       	ori	r24, 0x04	; 4
  92:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRA,PIN3);
  94:	8a b3       	in	r24, 0x1a	; 26
  96:	88 60       	ori	r24, 0x08	; 8
  98:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRA,PIN4);
  9a:	8a b3       	in	r24, 0x1a	; 26
  9c:	80 61       	ori	r24, 0x10	; 16
  9e:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRA,PIN5);
  a0:	8a b3       	in	r24, 0x1a	; 26
  a2:	80 62       	ori	r24, 0x20	; 32
  a4:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRA,PIN6);
  a6:	8a b3       	in	r24, 0x1a	; 26
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(DDRA,PIN7);
  ac:	8a b3       	in	r24, 0x1a	; 26
  ae:	80 68       	ori	r24, 0x80	; 128
  b0:	8a bb       	out	0x1a, r24	; 26
	
    while (1) 
    {
		for (int i =0; i<8 ; i++)
  b2:	20 e0       	ldi	r18, 0x00	; 0
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	19 c0       	rjmp	.+50     	; 0xea <main+0x68>
		{
			SET_BIT(PORTA,LEDS[i]);
  b8:	4b b3       	in	r20, 0x1b	; 27
  ba:	f9 01       	movw	r30, r18
  bc:	e0 5a       	subi	r30, 0xA0	; 160
  be:	ff 4f       	sbci	r31, 0xFF	; 255
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	00 80       	ld	r0, Z
  c6:	02 c0       	rjmp	.+4      	; 0xcc <main+0x4a>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	0a 94       	dec	r0
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <main+0x46>
  d0:	84 2b       	or	r24, r20
  d2:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	4f ef       	ldi	r20, 0xFF	; 255
  d6:	84 e3       	ldi	r24, 0x34	; 52
  d8:	9c e0       	ldi	r25, 0x0C	; 12
  da:	41 50       	subi	r20, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x58>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x62>
  e4:	00 00       	nop
	SET_BIT(DDRA,PIN6);
	SET_BIT(DDRA,PIN7);
	
    while (1) 
    {
		for (int i =0; i<8 ; i++)
  e6:	2f 5f       	subi	r18, 0xFF	; 255
  e8:	3f 4f       	sbci	r19, 0xFF	; 255
  ea:	28 30       	cpi	r18, 0x08	; 8
  ec:	31 05       	cpc	r19, r1
  ee:	24 f3       	brlt	.-56     	; 0xb8 <main+0x36>
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	44 e3       	ldi	r20, 0x34	; 52
  f4:	8c e0       	ldi	r24, 0x0C	; 12
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	40 40       	sbci	r20, 0x00	; 0
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x74>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x7e>
 100:	00 00       	nop
		{
			SET_BIT(PORTA,LEDS[i]);
			_delay_ms(500);
		}
		_delay_ms(500);
		for (int i =7; i>=0 ; i--)
 102:	27 e0       	ldi	r18, 0x07	; 7
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	1a c0       	rjmp	.+52     	; 0x13c <main+0xba>
		{
			CLR_BIT(PORTA,LEDS[i]);
 108:	4b b3       	in	r20, 0x1b	; 27
 10a:	f9 01       	movw	r30, r18
 10c:	e0 5a       	subi	r30, 0xA0	; 160
 10e:	ff 4f       	sbci	r31, 0xFF	; 255
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	00 80       	ld	r0, Z
 116:	02 c0       	rjmp	.+4      	; 0x11c <main+0x9a>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	0a 94       	dec	r0
 11e:	e2 f7       	brpl	.-8      	; 0x118 <main+0x96>
 120:	80 95       	com	r24
 122:	84 23       	and	r24, r20
 124:	8b bb       	out	0x1b, r24	; 27
 126:	9f ef       	ldi	r25, 0xFF	; 255
 128:	44 e3       	ldi	r20, 0x34	; 52
 12a:	8c e0       	ldi	r24, 0x0C	; 12
 12c:	91 50       	subi	r25, 0x01	; 1
 12e:	40 40       	sbci	r20, 0x00	; 0
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0xaa>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0xb4>
 136:	00 00       	nop
		{
			SET_BIT(PORTA,LEDS[i]);
			_delay_ms(500);
		}
		_delay_ms(500);
		for (int i =7; i>=0 ; i--)
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	31 09       	sbc	r19, r1
 13c:	33 23       	and	r19, r19
 13e:	24 f7       	brge	.-56     	; 0x108 <main+0x86>
 140:	9f ef       	ldi	r25, 0xFF	; 255
 142:	24 e3       	ldi	r18, 0x34	; 52
 144:	4c e0       	ldi	r20, 0x0C	; 12
 146:	91 50       	subi	r25, 0x01	; 1
 148:	20 40       	sbci	r18, 0x00	; 0
 14a:	40 40       	sbci	r20, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <main+0xc4>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0xce>
 150:	00 00       	nop
 152:	af cf       	rjmp	.-162    	; 0xb2 <main+0x30>

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
