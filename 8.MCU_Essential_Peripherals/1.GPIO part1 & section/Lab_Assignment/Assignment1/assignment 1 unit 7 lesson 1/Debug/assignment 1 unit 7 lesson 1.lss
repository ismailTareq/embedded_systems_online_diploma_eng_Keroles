
assignment 1 unit 7 lesson 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000000f4  00000168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000628  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000593  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026e  00000000  00000000  00000db3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001024  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000345  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006c  00000000  00000000  0000138d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ef       	ldi	r30, 0xF4	; 244
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
//PORT	-> WRITE
//DDR	-> CONFIG TO I/O
unsigned char PINS[] = {PIN5,PIN6,PIN7,PIN4};//5lit el PIN4 fi 25ir di bta4t el Buzzer
int main(void)
{
    SET_BIT(DDRD,PIN4);//output
  82:	81 b3       	in	r24, 0x11	; 17
  84:	80 61       	ori	r24, 0x10	; 16
  86:	81 bb       	out	0x11, r24	; 17
	SET_BIT(DDRD,PIN5);//output
  88:	81 b3       	in	r24, 0x11	; 17
  8a:	80 62       	ori	r24, 0x20	; 32
  8c:	81 bb       	out	0x11, r24	; 17
	SET_BIT(DDRD,PIN6);//output
  8e:	81 b3       	in	r24, 0x11	; 17
  90:	80 64       	ori	r24, 0x40	; 64
  92:	81 bb       	out	0x11, r24	; 17
	SET_BIT(DDRD,PIN7);//output
  94:	81 b3       	in	r24, 0x11	; 17
  96:	80 68       	ori	r24, 0x80	; 128
  98:	81 bb       	out	0x11, r24	; 17
	
	
    while (1) 
    {
		for (int i =0;i<4;i++)
  9a:	20 e0       	ldi	r18, 0x00	; 0
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	24 c0       	rjmp	.+72     	; 0xe8 <main+0x66>
		{
			SET_BIT(PORTD,PINS[i]);
  a0:	62 b3       	in	r22, 0x12	; 18
  a2:	f9 01       	movw	r30, r18
  a4:	e0 5a       	subi	r30, 0xA0	; 160
  a6:	ff 4f       	sbci	r31, 0xFF	; 255
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	ac 01       	movw	r20, r24
  ae:	00 80       	ld	r0, Z
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <main+0x34>
  b2:	44 0f       	add	r20, r20
  b4:	55 1f       	adc	r21, r21
  b6:	0a 94       	dec	r0
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <main+0x30>
  ba:	46 2b       	or	r20, r22
  bc:	42 bb       	out	0x12, r20	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	4f e7       	ldi	r20, 0x7F	; 127
  c0:	5a e1       	ldi	r21, 0x1A	; 26
  c2:	66 e0       	ldi	r22, 0x06	; 6
  c4:	41 50       	subi	r20, 0x01	; 1
  c6:	50 40       	sbci	r21, 0x00	; 0
  c8:	60 40       	sbci	r22, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x42>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x4c>
  ce:	00 00       	nop
			_delay_ms(2000);
			CLR_BIT(PORTD,PINS[i]);
  d0:	42 b3       	in	r20, 0x12	; 18
  d2:	00 80       	ld	r0, Z
  d4:	02 c0       	rjmp	.+4      	; 0xda <main+0x58>
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	0a 94       	dec	r0
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <main+0x54>
  de:	80 95       	com	r24
  e0:	84 23       	and	r24, r20
  e2:	82 bb       	out	0x12, r24	; 18
	SET_BIT(DDRD,PIN7);//output
	
	
    while (1) 
    {
		for (int i =0;i<4;i++)
  e4:	2f 5f       	subi	r18, 0xFF	; 255
  e6:	3f 4f       	sbci	r19, 0xFF	; 255
  e8:	24 30       	cpi	r18, 0x04	; 4
  ea:	31 05       	cpc	r19, r1
  ec:	cc f2       	brlt	.-78     	; 0xa0 <main+0x1e>
  ee:	d5 cf       	rjmp	.-86     	; 0x9a <main+0x18>

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
