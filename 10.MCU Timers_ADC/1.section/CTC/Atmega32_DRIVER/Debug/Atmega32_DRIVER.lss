
Atmega32_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000007ca  0000085e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800076  00800076  00000874  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c86  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bf9  00000000  00000000  0000276e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fdf  00000000  00000000  00003367  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000514  00000000  00000000  00004348  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000be2  00000000  00000000  0000485c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001207  00000000  00000000  0000543e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  00006645  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 20 01 	jmp	0x240	; 0x240 <__vector_1>
   8:	0c 94 49 01 	jmp	0x292	; 0x292 <__vector_2>
   c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <__vector_10>
  2c:	0c 94 90 02 	jmp	0x520	; 0x520 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	fa 01       	movw	r30, r20
  56:	ff 01       	movw	r30, r30
  58:	04 02       	muls	r16, r20
  5a:	09 02       	muls	r16, r25
  5c:	0e 02       	muls	r16, r30
  5e:	13 02       	muls	r17, r19
  60:	18 02       	muls	r17, r24
  62:	1d 02       	muls	r17, r29
  64:	22 02       	muls	r18, r18
  66:	27 02       	muls	r18, r23

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf e5       	ldi	r28, 0x5F	; 95
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	10 e0       	ldi	r17, 0x00	; 0
  76:	a0 e6       	ldi	r26, 0x60	; 96
  78:	b0 e0       	ldi	r27, 0x00	; 0
  7a:	ea ec       	ldi	r30, 0xCA	; 202
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 37       	cpi	r26, 0x76	; 118
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	20 e0       	ldi	r18, 0x00	; 0
  8c:	a6 e7       	ldi	r26, 0x76	; 118
  8e:	b0 e0       	ldi	r27, 0x00	; 0
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 38       	cpi	r26, 0x8A	; 138
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 55 02 	call	0x4aa	; 0x4aa <main>
  9e:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <gpio_pin_direction_intialize>:
	{
		*PORTX_Register[port] ^= 0xFF;
		ret = E_OK;
	}
	return ret;
}
  a6:	fc 01       	movw	r30, r24
  a8:	89 2b       	or	r24, r25
  aa:	a9 f1       	breq	.+106    	; 0x116 <gpio_pin_direction_intialize+0x70>
  ac:	20 81       	ld	r18, Z
  ae:	26 95       	lsr	r18
  b0:	26 95       	lsr	r18
  b2:	26 95       	lsr	r18
  b4:	27 70       	andi	r18, 0x07	; 7
  b6:	80 81       	ld	r24, Z
  b8:	86 fd       	sbrc	r24, 6
  ba:	16 c0       	rjmp	.+44     	; 0xe8 <gpio_pin_direction_intialize+0x42>
  bc:	e8 2f       	mov	r30, r24
  be:	e7 70       	andi	r30, 0x07	; 7
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	ee 0f       	add	r30, r30
  c4:	ff 1f       	adc	r31, r31
  c6:	e8 59       	subi	r30, 0x98	; 152
  c8:	ff 4f       	sbci	r31, 0xFF	; 255
  ca:	01 90       	ld	r0, Z+
  cc:	f0 81       	ld	r31, Z
  ce:	e0 2d       	mov	r30, r0
  d0:	30 81       	ld	r19, Z
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <gpio_pin_direction_intialize+0x36>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	2a 95       	dec	r18
  de:	e2 f7       	brpl	.-8      	; 0xd8 <gpio_pin_direction_intialize+0x32>
  e0:	83 2b       	or	r24, r19
  e2:	80 83       	st	Z, r24
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	08 95       	ret
  e8:	e0 81       	ld	r30, Z
  ea:	e7 70       	andi	r30, 0x07	; 7
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	ee 0f       	add	r30, r30
  f0:	ff 1f       	adc	r31, r31
  f2:	e8 59       	subi	r30, 0x98	; 152
  f4:	ff 4f       	sbci	r31, 0xFF	; 255
  f6:	01 90       	ld	r0, Z+
  f8:	f0 81       	ld	r31, Z
  fa:	e0 2d       	mov	r30, r0
  fc:	30 81       	ld	r19, Z
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <gpio_pin_direction_intialize+0x62>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	2a 95       	dec	r18
 10a:	e2 f7       	brpl	.-8      	; 0x104 <gpio_pin_direction_intialize+0x5e>
 10c:	80 95       	com	r24
 10e:	83 23       	and	r24, r19
 110:	80 83       	st	Z, r24
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	08 95       	ret
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	08 95       	ret

0000011a <gpio_port_direction_intialize>:
 11a:	84 30       	cpi	r24, 0x04	; 4
 11c:	60 f4       	brcc	.+24     	; 0x136 <gpio_port_direction_intialize+0x1c>
 11e:	e8 2f       	mov	r30, r24
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	ee 0f       	add	r30, r30
 124:	ff 1f       	adc	r31, r31
 126:	e8 59       	subi	r30, 0x98	; 152
 128:	ff 4f       	sbci	r31, 0xFF	; 255
 12a:	01 90       	ld	r0, Z+
 12c:	f0 81       	ld	r31, Z
 12e:	e0 2d       	mov	r30, r0
 130:	60 83       	st	Z, r22
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	08 95       	ret
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	08 95       	ret

0000013a <gpio_pin_write_logic>:
 13a:	00 97       	sbiw	r24, 0x00	; 0
 13c:	d1 f1       	breq	.+116    	; 0x1b2 <gpio_pin_write_logic+0x78>
 13e:	dc 01       	movw	r26, r24
 140:	2c 91       	ld	r18, X
 142:	26 95       	lsr	r18
 144:	26 95       	lsr	r18
 146:	26 95       	lsr	r18
 148:	27 70       	andi	r18, 0x07	; 7
 14a:	66 23       	and	r22, r22
 14c:	19 f0       	breq	.+6      	; 0x154 <gpio_pin_write_logic+0x1a>
 14e:	61 30       	cpi	r22, 0x01	; 1
 150:	c9 f0       	breq	.+50     	; 0x184 <gpio_pin_write_logic+0x4a>
 152:	31 c0       	rjmp	.+98     	; 0x1b6 <gpio_pin_write_logic+0x7c>
 154:	dc 01       	movw	r26, r24
 156:	ec 91       	ld	r30, X
 158:	e7 70       	andi	r30, 0x07	; 7
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	ee 0f       	add	r30, r30
 15e:	ff 1f       	adc	r31, r31
 160:	e0 5a       	subi	r30, 0xA0	; 160
 162:	ff 4f       	sbci	r31, 0xFF	; 255
 164:	01 90       	ld	r0, Z+
 166:	f0 81       	ld	r31, Z
 168:	e0 2d       	mov	r30, r0
 16a:	30 81       	ld	r19, Z
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <gpio_pin_write_logic+0x3c>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	2a 95       	dec	r18
 178:	e2 f7       	brpl	.-8      	; 0x172 <gpio_pin_write_logic+0x38>
 17a:	80 95       	com	r24
 17c:	83 23       	and	r24, r19
 17e:	80 83       	st	Z, r24
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	08 95       	ret
 184:	dc 01       	movw	r26, r24
 186:	ec 91       	ld	r30, X
 188:	e7 70       	andi	r30, 0x07	; 7
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	ee 0f       	add	r30, r30
 18e:	ff 1f       	adc	r31, r31
 190:	e0 5a       	subi	r30, 0xA0	; 160
 192:	ff 4f       	sbci	r31, 0xFF	; 255
 194:	01 90       	ld	r0, Z+
 196:	f0 81       	ld	r31, Z
 198:	e0 2d       	mov	r30, r0
 19a:	30 81       	ld	r19, Z
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <gpio_pin_write_logic+0x6c>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	2a 95       	dec	r18
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <gpio_pin_write_logic+0x68>
 1aa:	83 2b       	or	r24, r19
 1ac:	80 83       	st	Z, r24
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	08 95       	ret
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	08 95       	ret
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	08 95       	ret

000001ba <gpio_port_write_logic>:
 1ba:	84 30       	cpi	r24, 0x04	; 4
 1bc:	60 f4       	brcc	.+24     	; 0x1d6 <gpio_port_write_logic+0x1c>
 1be:	e8 2f       	mov	r30, r24
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	ee 0f       	add	r30, r30
 1c4:	ff 1f       	adc	r31, r31
 1c6:	e0 5a       	subi	r30, 0xA0	; 160
 1c8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ca:	01 90       	ld	r0, Z+
 1cc:	f0 81       	ld	r31, Z
 1ce:	e0 2d       	mov	r30, r0
 1d0:	60 83       	st	Z, r22
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	08 95       	ret
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	08 95       	ret

000001da <gpio_pin_toggle_logic>:
 1da:	00 97       	sbiw	r24, 0x00	; 0
 1dc:	e1 f0       	breq	.+56     	; 0x216 <gpio_pin_toggle_logic+0x3c>
 1de:	dc 01       	movw	r26, r24
 1e0:	2c 91       	ld	r18, X
 1e2:	26 95       	lsr	r18
 1e4:	26 95       	lsr	r18
 1e6:	26 95       	lsr	r18
 1e8:	27 70       	andi	r18, 0x07	; 7
 1ea:	ec 91       	ld	r30, X
 1ec:	e7 70       	andi	r30, 0x07	; 7
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	ee 0f       	add	r30, r30
 1f2:	ff 1f       	adc	r31, r31
 1f4:	e0 5a       	subi	r30, 0xA0	; 160
 1f6:	ff 4f       	sbci	r31, 0xFF	; 255
 1f8:	01 90       	ld	r0, Z+
 1fa:	f0 81       	ld	r31, Z
 1fc:	e0 2d       	mov	r30, r0
 1fe:	30 81       	ld	r19, Z
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <gpio_pin_toggle_logic+0x30>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	2a 95       	dec	r18
 20c:	e2 f7       	brpl	.-8      	; 0x206 <gpio_pin_toggle_logic+0x2c>
 20e:	83 27       	eor	r24, r19
 210:	80 83       	st	Z, r24
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	08 95       	ret
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	08 95       	ret

0000021a <gpio_pin_intialize>:
ReturnType gpio_pin_intialize(const Pin_Config *pin_config)
{
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
	ReturnType ret = E_NOT_OK;
	if((NULL == pin_config)||(pin_config->pin > PORT_PIN_MAX_NUMBER-1))
 21e:	00 97       	sbiw	r24, 0x00	; 0
 220:	59 f0       	breq	.+22     	; 0x238 <gpio_pin_intialize+0x1e>
 222:	ec 01       	movw	r28, r24
	{
		ret = E_NOT_OK;
	}
	else
	{
		ret = gpio_pin_direction_intialize(pin_config);
 224:	0e 94 53 00 	call	0xa6	; 0xa6 <gpio_pin_direction_intialize>
		ret = gpio_pin_write_logic(pin_config,pin_config->logic);
 228:	68 81       	ld	r22, Y
 22a:	67 fb       	bst	r22, 7
 22c:	66 27       	eor	r22, r22
 22e:	60 f9       	bld	r22, 0
 230:	ce 01       	movw	r24, r28
 232:	0e 94 9d 00 	call	0x13a	; 0x13a <gpio_pin_write_logic>
 236:	01 c0       	rjmp	.+2      	; 0x23a <gpio_pin_intialize+0x20>
ReturnType gpio_pin_intialize(const Pin_Config *pin_config)
{
	ReturnType ret = E_NOT_OK;
	if((NULL == pin_config)||(pin_config->pin > PORT_PIN_MAX_NUMBER-1))
	{
		ret = E_NOT_OK;
 238:	80 e0       	ldi	r24, 0x00	; 0
	{
		ret = gpio_pin_direction_intialize(pin_config);
		ret = gpio_pin_write_logic(pin_config,pin_config->logic);
	}
	return ret;
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	08 95       	ret

00000240 <__vector_1>:
	}
}

// Interrupt service routine for INT0
ISR (INT0_vect)
{
 240:	1f 92       	push	r1
 242:	0f 92       	push	r0
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	0f 92       	push	r0
 248:	11 24       	eor	r1, r1
 24a:	2f 93       	push	r18
 24c:	3f 93       	push	r19
 24e:	4f 93       	push	r20
 250:	5f 93       	push	r21
 252:	6f 93       	push	r22
 254:	7f 93       	push	r23
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
 25a:	af 93       	push	r26
 25c:	bf 93       	push	r27
 25e:	ef 93       	push	r30
 260:	ff 93       	push	r31
	if (EXTI0_CallBack != NULL)
 262:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <EXTI0_CallBack>
 266:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <EXTI0_CallBack+0x1>
 26a:	30 97       	sbiw	r30, 0x00	; 0
 26c:	09 f0       	breq	.+2      	; 0x270 <__vector_1+0x30>
	{
		EXTI0_CallBack();
 26e:	09 95       	icall
	}
}
 270:	ff 91       	pop	r31
 272:	ef 91       	pop	r30
 274:	bf 91       	pop	r27
 276:	af 91       	pop	r26
 278:	9f 91       	pop	r25
 27a:	8f 91       	pop	r24
 27c:	7f 91       	pop	r23
 27e:	6f 91       	pop	r22
 280:	5f 91       	pop	r21
 282:	4f 91       	pop	r20
 284:	3f 91       	pop	r19
 286:	2f 91       	pop	r18
 288:	0f 90       	pop	r0
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	0f 90       	pop	r0
 28e:	1f 90       	pop	r1
 290:	18 95       	reti

00000292 <__vector_2>:
// Interrupt service routine for INT1
ISR (INT1_vect)
{
 292:	1f 92       	push	r1
 294:	0f 92       	push	r0
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	0f 92       	push	r0
 29a:	11 24       	eor	r1, r1
 29c:	2f 93       	push	r18
 29e:	3f 93       	push	r19
 2a0:	4f 93       	push	r20
 2a2:	5f 93       	push	r21
 2a4:	6f 93       	push	r22
 2a6:	7f 93       	push	r23
 2a8:	8f 93       	push	r24
 2aa:	9f 93       	push	r25
 2ac:	af 93       	push	r26
 2ae:	bf 93       	push	r27
 2b0:	ef 93       	push	r30
 2b2:	ff 93       	push	r31
	if (EXTI1_CallBack != NULL)
 2b4:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <__data_end>
 2b8:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <__data_end+0x1>
 2bc:	30 97       	sbiw	r30, 0x00	; 0
 2be:	09 f0       	breq	.+2      	; 0x2c2 <__vector_2+0x30>
	{
		EXTI1_CallBack();
 2c0:	09 95       	icall
	}
}
 2c2:	ff 91       	pop	r31
 2c4:	ef 91       	pop	r30
 2c6:	bf 91       	pop	r27
 2c8:	af 91       	pop	r26
 2ca:	9f 91       	pop	r25
 2cc:	8f 91       	pop	r24
 2ce:	7f 91       	pop	r23
 2d0:	6f 91       	pop	r22
 2d2:	5f 91       	pop	r21
 2d4:	4f 91       	pop	r20
 2d6:	3f 91       	pop	r19
 2d8:	2f 91       	pop	r18
 2da:	0f 90       	pop	r0
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	0f 90       	pop	r0
 2e0:	1f 90       	pop	r1
 2e2:	18 95       	reti

000002e4 <__vector_3>:

// Interrupt service routine for INT2
ISR (INT2_vect)
{
 2e4:	1f 92       	push	r1
 2e6:	0f 92       	push	r0
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	0f 92       	push	r0
 2ec:	11 24       	eor	r1, r1
 2ee:	2f 93       	push	r18
 2f0:	3f 93       	push	r19
 2f2:	4f 93       	push	r20
 2f4:	5f 93       	push	r21
 2f6:	6f 93       	push	r22
 2f8:	7f 93       	push	r23
 2fa:	8f 93       	push	r24
 2fc:	9f 93       	push	r25
 2fe:	af 93       	push	r26
 300:	bf 93       	push	r27
 302:	ef 93       	push	r30
 304:	ff 93       	push	r31
	if (EXTI2_CallBack != NULL)
 306:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <EXTI2_CallBack>
 30a:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <EXTI2_CallBack+0x1>
 30e:	30 97       	sbiw	r30, 0x00	; 0
 310:	09 f0       	breq	.+2      	; 0x314 <__vector_3+0x30>
	{
		EXTI2_CallBack();
 312:	09 95       	icall
	}
 314:	ff 91       	pop	r31
 316:	ef 91       	pop	r30
 318:	bf 91       	pop	r27
 31a:	af 91       	pop	r26
 31c:	9f 91       	pop	r25
 31e:	8f 91       	pop	r24
 320:	7f 91       	pop	r23
 322:	6f 91       	pop	r22
 324:	5f 91       	pop	r21
 326:	4f 91       	pop	r20
 328:	3f 91       	pop	r19
 32a:	2f 91       	pop	r18
 32c:	0f 90       	pop	r0
 32e:	0f be       	out	0x3f, r0	; 63
 330:	0f 90       	pop	r0
 332:	1f 90       	pop	r1
 334:	18 95       	reti

00000336 <Enable_GI>:

void Enable_GI(void)
{
	//SET_BIT(SREG,7);
	//SREG |= 1<<7;
	sei();
 336:	78 94       	sei
 338:	08 95       	ret

0000033a <led_initialize>:
         Pin_Config pin_obj = { .port = led->port_name, .pin = led->pin, 
                                  .direction = DIO_DIRECTION_OUTPUT,.logic = led->led_status };
         gpio_pin_write_logic(&pin_obj, DIO_LOW);
     }
    return ret;
}
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	1f 92       	push	r1
 340:	cd b7       	in	r28, 0x3d	; 61
 342:	de b7       	in	r29, 0x3e	; 62
 344:	00 97       	sbiw	r24, 0x00	; 0
 346:	f1 f0       	breq	.+60     	; 0x384 <led_initialize+0x4a>
 348:	fc 01       	movw	r30, r24
 34a:	20 81       	ld	r18, Z
 34c:	92 2f       	mov	r25, r18
 34e:	97 70       	andi	r25, 0x07	; 7
 350:	89 81       	ldd	r24, Y+1	; 0x01
 352:	88 7f       	andi	r24, 0xF8	; 248
 354:	89 2b       	or	r24, r25
 356:	92 2f       	mov	r25, r18
 358:	96 95       	lsr	r25
 35a:	96 95       	lsr	r25
 35c:	96 95       	lsr	r25
 35e:	97 70       	andi	r25, 0x07	; 7
 360:	99 0f       	add	r25, r25
 362:	99 0f       	add	r25, r25
 364:	99 0f       	add	r25, r25
 366:	87 7c       	andi	r24, 0xC7	; 199
 368:	89 2b       	or	r24, r25
 36a:	26 fb       	bst	r18, 6
 36c:	22 27       	eor	r18, r18
 36e:	20 f9       	bld	r18, 0
 370:	8f 7b       	andi	r24, 0xBF	; 191
 372:	20 fb       	bst	r18, 0
 374:	87 f9       	bld	r24, 7
 376:	89 83       	std	Y+1, r24	; 0x01
 378:	ce 01       	movw	r24, r28
 37a:	01 96       	adiw	r24, 0x01	; 1
 37c:	0e 94 0d 01 	call	0x21a	; 0x21a <gpio_pin_intialize>
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	01 c0       	rjmp	.+2      	; 0x386 <led_initialize+0x4c>
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	0f 90       	pop	r0
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	08 95       	ret

0000038e <led_toggle>:

ReturnType led_toggle(const led_t *led){
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	1f 92       	push	r1
 394:	cd b7       	in	r28, 0x3d	; 61
 396:	de b7       	in	r29, 0x3e	; 62
    ReturnType ret = E_OK;
     if(NULL == led){
 398:	00 97       	sbiw	r24, 0x00	; 0
 39a:	f1 f0       	breq	.+60     	; 0x3d8 <led_toggle+0x4a>
 39c:	fc 01       	movw	r30, r24
         ret = E_NOT_OK;
     }
     else{
         Pin_Config pin_obj = { .port = led->port_name, .pin = led->pin, 
 39e:	20 81       	ld	r18, Z
 3a0:	92 2f       	mov	r25, r18
 3a2:	97 70       	andi	r25, 0x07	; 7
 3a4:	89 81       	ldd	r24, Y+1	; 0x01
 3a6:	88 7f       	andi	r24, 0xF8	; 248
 3a8:	89 2b       	or	r24, r25
 3aa:	92 2f       	mov	r25, r18
 3ac:	96 95       	lsr	r25
 3ae:	96 95       	lsr	r25
 3b0:	96 95       	lsr	r25
 3b2:	97 70       	andi	r25, 0x07	; 7
 3b4:	99 0f       	add	r25, r25
 3b6:	99 0f       	add	r25, r25
 3b8:	99 0f       	add	r25, r25
 3ba:	87 7c       	andi	r24, 0xC7	; 199
 3bc:	89 2b       	or	r24, r25
                                  .direction = DIO_DIRECTION_OUTPUT,.logic = led->led_status };
 3be:	26 fb       	bst	r18, 6
 3c0:	22 27       	eor	r18, r18
 3c2:	20 f9       	bld	r18, 0
    ReturnType ret = E_OK;
     if(NULL == led){
         ret = E_NOT_OK;
     }
     else{
         Pin_Config pin_obj = { .port = led->port_name, .pin = led->pin, 
 3c4:	8f 7b       	andi	r24, 0xBF	; 191
 3c6:	20 fb       	bst	r18, 0
 3c8:	87 f9       	bld	r24, 7
 3ca:	89 83       	std	Y+1, r24	; 0x01
                                  .direction = DIO_DIRECTION_OUTPUT,.logic = led->led_status };
         gpio_pin_toggle_logic(&pin_obj);
 3cc:	ce 01       	movw	r24, r28
 3ce:	01 96       	adiw	r24, 0x01	; 1
 3d0:	0e 94 ed 00 	call	0x1da	; 0x1da <gpio_pin_toggle_logic>
     }
    return ret;
}

ReturnType led_toggle(const led_t *led){
    ReturnType ret = E_OK;
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	01 c0       	rjmp	.+2      	; 0x3da <led_toggle+0x4c>
     if(NULL == led){
         ret = E_NOT_OK;
 3d8:	80 e0       	ldi	r24, 0x00	; 0
         Pin_Config pin_obj = { .port = led->port_name, .pin = led->pin, 
                                  .direction = DIO_DIRECTION_OUTPUT,.logic = led->led_status };
         gpio_pin_toggle_logic(&pin_obj);
     }
    return ret;
}
 3da:	0f 90       	pop	r0
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	08 95       	ret

000003e2 <display>:
	.OC0Mode_CTC = TMR0_OC0Disabled,
	.TCNT0_Value = 0
};
void display(uint8_t value)
{
	switch (value)
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	8a 30       	cpi	r24, 0x0A	; 10
 3e6:	91 05       	cpc	r25, r1
 3e8:	b0 f5       	brcc	.+108    	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 3ea:	fc 01       	movw	r30, r24
 3ec:	e6 5d       	subi	r30, 0xD6	; 214
 3ee:	ff 4f       	sbci	r31, 0xFF	; 255
 3f0:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <__tablejump2__>
	{
		case 0:
		gpio_port_write_logic(PORTA_INDEX,0x7F);
 3f4:	6f e7       	ldi	r22, 0x7F	; 127
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <gpio_port_write_logic>
		break;
 3fc:	08 95       	ret
		case 1:
		gpio_port_write_logic(PORTA_INDEX,0x0D);
 3fe:	6d e0       	ldi	r22, 0x0D	; 13
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	0e 94 dd 00 	call	0x1ba	; 0x1ba <gpio_port_write_logic>
		break;
 406:	08 95       	ret
		case 2:
		gpio_port_write_logic(PORTA_INDEX,0xB7);
 408:	67 eb       	ldi	r22, 0xB7	; 183
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <gpio_port_write_logic>
		break;
 410:	08 95       	ret
		case 3:
		gpio_port_write_logic(PORTA_INDEX,0x9F);
 412:	6f e9       	ldi	r22, 0x9F	; 159
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	0e 94 dd 00 	call	0x1ba	; 0x1ba <gpio_port_write_logic>
		break;
 41a:	08 95       	ret
		case 4:
		gpio_port_write_logic(PORTA_INDEX,0xCD);
 41c:	6d ec       	ldi	r22, 0xCD	; 205
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	0e 94 dd 00 	call	0x1ba	; 0x1ba <gpio_port_write_logic>
		break;
 424:	08 95       	ret
		case 5:
		gpio_port_write_logic(PORTA_INDEX,0xDB);
 426:	6b ed       	ldi	r22, 0xDB	; 219
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <gpio_port_write_logic>
		break;
 42e:	08 95       	ret
		case 6:
		gpio_port_write_logic(PORTA_INDEX,0xFB);
 430:	6b ef       	ldi	r22, 0xFB	; 251
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	0e 94 dd 00 	call	0x1ba	; 0x1ba <gpio_port_write_logic>
		break;
 438:	08 95       	ret
		case 7:
		gpio_port_write_logic(PORTA_INDEX,0x0F);
 43a:	6f e0       	ldi	r22, 0x0F	; 15
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <gpio_port_write_logic>
		break;
 442:	08 95       	ret
		case 8:
		gpio_port_write_logic(PORTA_INDEX,0xFF);
 444:	6f ef       	ldi	r22, 0xFF	; 255
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	0e 94 dd 00 	call	0x1ba	; 0x1ba <gpio_port_write_logic>
		break;
 44c:	08 95       	ret
		case 9:
		gpio_port_write_logic(PORTA_INDEX,0xDF);
 44e:	6f ed       	ldi	r22, 0xDF	; 223
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	0e 94 dd 00 	call	0x1ba	; 0x1ba <gpio_port_write_logic>
 456:	08 95       	ret

00000458 <CTC_callback>:
	}
}
led_t led = {.port_name = PORTC_INDEX, .pin = DIO_PIN0, .led_status = DIO_LOW};
void CTC_callback()
{
	tick++;
 458:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <tick>
 45c:	8f 5f       	subi	r24, 0xFF	; 255
 45e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <tick>
	if(tick == 250)
 462:	8a 3f       	cpi	r24, 0xFA	; 250
 464:	99 f4       	brne	.+38     	; 0x48c <CTC_callback+0x34>
	{
		count++;
 466:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <count>
 46a:	8f 5f       	subi	r24, 0xFF	; 255
 46c:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <count>
		if(count == 10)
 470:	8a 30       	cpi	r24, 0x0A	; 10
 472:	11 f4       	brne	.+4      	; 0x478 <CTC_callback+0x20>
		{
			count =0;
 474:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <count>
		}
		display(count);
 478:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <count>
 47c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <display>
		led_toggle(&led);
 480:	80 e7       	ldi	r24, 0x70	; 112
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	0e 94 c7 01 	call	0x38e	; 0x38e <led_toggle>
		tick = 0;
 488:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <tick>
 48c:	08 95       	ret

0000048e <Timer0_CTC>:
	}
	
}
void Timer0_CTC(void)
{
	TIMER0SetCompareMatch(240);
 48e:	80 ef       	ldi	r24, 0xF0	; 240
 490:	0e 94 db 03 	call	0x7b6	; 0x7b6 <TIMER0SetCompareMatch>
	TIMER0_Init(&timer0);
 494:	81 e7       	ldi	r24, 0x71	; 113
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 94 bc 02 	call	0x578	; 0x578 <TIMER0_Init>
	//TIMER0_Blocking(&timer0);
	TIMER0_Enable_Interrupt(&timer0,CTC_callback);
 49c:	6c e2       	ldi	r22, 0x2C	; 44
 49e:	72 e0       	ldi	r23, 0x02	; 2
 4a0:	81 e7       	ldi	r24, 0x71	; 113
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	0e 94 b3 03 	call	0x766	; 0x766 <TIMER0_Enable_Interrupt>
 4a8:	08 95       	ret

000004aa <main>:
}


int main(void)
{	gpio_port_direction_intialize(PORTA_INDEX, 0xFE);
 4aa:	6e ef       	ldi	r22, 0xFE	; 254
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	0e 94 8d 00 	call	0x11a	; 0x11a <gpio_port_direction_intialize>
	gpio_port_write_logic(PORTA_INDEX,0x7F);
 4b2:	6f e7       	ldi	r22, 0x7F	; 127
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <gpio_port_write_logic>
	led_initialize(&led);
 4ba:	80 e7       	ldi	r24, 0x70	; 112
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	0e 94 9d 01 	call	0x33a	; 0x33a <led_initialize>
	Timer0_CTC();
 4c2:	0e 94 47 02 	call	0x48e	; 0x48e <Timer0_CTC>
 4c6:	ff cf       	rjmp	.-2      	; 0x4c6 <main+0x1c>

000004c8 <__vector_10>:
void PWM0_CALLBACK_CompareMatch_INTERRUPT(Timer0callback callback){
	PWM_CALLBACK_COMPARE=callback;
}

ISR(TIMER0_COMP_vect)
{
 4c8:	1f 92       	push	r1
 4ca:	0f 92       	push	r0
 4cc:	0f b6       	in	r0, 0x3f	; 63
 4ce:	0f 92       	push	r0
 4d0:	11 24       	eor	r1, r1
 4d2:	2f 93       	push	r18
 4d4:	3f 93       	push	r19
 4d6:	4f 93       	push	r20
 4d8:	5f 93       	push	r21
 4da:	6f 93       	push	r22
 4dc:	7f 93       	push	r23
 4de:	8f 93       	push	r24
 4e0:	9f 93       	push	r25
 4e2:	af 93       	push	r26
 4e4:	bf 93       	push	r27
 4e6:	ef 93       	push	r30
 4e8:	ff 93       	push	r31
	PWM_Compare_Number++;
 4ea:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <PWM_Compare_Number>
 4ee:	8f 5f       	subi	r24, 0xFF	; 255
 4f0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <PWM_Compare_Number>
	PWM_CALLBACK_COMPARE();
 4f4:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <PWM_CALLBACK_COMPARE>
 4f8:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <PWM_CALLBACK_COMPARE+0x1>
 4fc:	09 95       	icall
}
 4fe:	ff 91       	pop	r31
 500:	ef 91       	pop	r30
 502:	bf 91       	pop	r27
 504:	af 91       	pop	r26
 506:	9f 91       	pop	r25
 508:	8f 91       	pop	r24
 50a:	7f 91       	pop	r23
 50c:	6f 91       	pop	r22
 50e:	5f 91       	pop	r21
 510:	4f 91       	pop	r20
 512:	3f 91       	pop	r19
 514:	2f 91       	pop	r18
 516:	0f 90       	pop	r0
 518:	0f be       	out	0x3f, r0	; 63
 51a:	0f 90       	pop	r0
 51c:	1f 90       	pop	r1
 51e:	18 95       	reti

00000520 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
 520:	1f 92       	push	r1
 522:	0f 92       	push	r0
 524:	0f b6       	in	r0, 0x3f	; 63
 526:	0f 92       	push	r0
 528:	11 24       	eor	r1, r1
 52a:	2f 93       	push	r18
 52c:	3f 93       	push	r19
 52e:	4f 93       	push	r20
 530:	5f 93       	push	r21
 532:	6f 93       	push	r22
 534:	7f 93       	push	r23
 536:	8f 93       	push	r24
 538:	9f 93       	push	r25
 53a:	af 93       	push	r26
 53c:	bf 93       	push	r27
 53e:	ef 93       	push	r30
 540:	ff 93       	push	r31
	PWM_Over_Flow_Number++;
 542:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <PWM_Over_Flow_Number>
 546:	8f 5f       	subi	r24, 0xFF	; 255
 548:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <PWM_Over_Flow_Number>
	PWM_CALLBACK_OVER_FLOW();
 54c:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <PWM_CALLBACK_OVER_FLOW>
 550:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <PWM_CALLBACK_OVER_FLOW+0x1>
 554:	09 95       	icall
 556:	ff 91       	pop	r31
 558:	ef 91       	pop	r30
 55a:	bf 91       	pop	r27
 55c:	af 91       	pop	r26
 55e:	9f 91       	pop	r25
 560:	8f 91       	pop	r24
 562:	7f 91       	pop	r23
 564:	6f 91       	pop	r22
 566:	5f 91       	pop	r21
 568:	4f 91       	pop	r20
 56a:	3f 91       	pop	r19
 56c:	2f 91       	pop	r18
 56e:	0f 90       	pop	r0
 570:	0f be       	out	0x3f, r0	; 63
 572:	0f 90       	pop	r0
 574:	1f 90       	pop	r1
 576:	18 95       	reti

00000578 <TIMER0_Init>:
		while(!(TIFR & 1<<0));
		SET_BIT(TIFR,0);//clear bit
		ret = E_OK;
	}
	return ret;
}
 578:	fc 01       	movw	r30, r24
 57a:	89 2b       	or	r24, r25
 57c:	09 f4       	brne	.+2      	; 0x580 <TIMER0_Init+0x8>
 57e:	ef c0       	rjmp	.+478    	; 0x75e <TIMER0_Init+0x1e6>
 580:	84 81       	ldd	r24, Z+4	; 0x04
 582:	82 bf       	out	0x32, r24	; 50
 584:	80 81       	ld	r24, Z
 586:	81 11       	cpse	r24, r1
 588:	10 c0       	rjmp	.+32     	; 0x5aa <TIMER0_Init+0x32>
 58a:	83 b7       	in	r24, 0x33	; 51
 58c:	80 68       	ori	r24, 0x80	; 128
 58e:	83 bf       	out	0x33, r24	; 51
 590:	83 b7       	in	r24, 0x33	; 51
 592:	8f 7b       	andi	r24, 0xBF	; 191
 594:	83 bf       	out	0x33, r24	; 51
 596:	83 b7       	in	r24, 0x33	; 51
 598:	87 7f       	andi	r24, 0xF7	; 247
 59a:	83 bf       	out	0x33, r24	; 51
 59c:	83 b7       	in	r24, 0x33	; 51
 59e:	8f 7d       	andi	r24, 0xDF	; 223
 5a0:	83 bf       	out	0x33, r24	; 51
 5a2:	83 b7       	in	r24, 0x33	; 51
 5a4:	8f 7e       	andi	r24, 0xEF	; 239
 5a6:	83 bf       	out	0x33, r24	; 51
 5a8:	23 c0       	rjmp	.+70     	; 0x5f0 <TIMER0_Init+0x78>
 5aa:	82 30       	cpi	r24, 0x02	; 2
 5ac:	81 f4       	brne	.+32     	; 0x5ce <TIMER0_Init+0x56>
 5ae:	83 b7       	in	r24, 0x33	; 51
 5b0:	80 68       	ori	r24, 0x80	; 128
 5b2:	83 bf       	out	0x33, r24	; 51
 5b4:	83 b7       	in	r24, 0x33	; 51
 5b6:	8f 7b       	andi	r24, 0xBF	; 191
 5b8:	83 bf       	out	0x33, r24	; 51
 5ba:	83 b7       	in	r24, 0x33	; 51
 5bc:	88 60       	ori	r24, 0x08	; 8
 5be:	83 bf       	out	0x33, r24	; 51
 5c0:	83 b7       	in	r24, 0x33	; 51
 5c2:	8f 7d       	andi	r24, 0xDF	; 223
 5c4:	83 bf       	out	0x33, r24	; 51
 5c6:	83 b7       	in	r24, 0x33	; 51
 5c8:	8f 7e       	andi	r24, 0xEF	; 239
 5ca:	83 bf       	out	0x33, r24	; 51
 5cc:	11 c0       	rjmp	.+34     	; 0x5f0 <TIMER0_Init+0x78>
 5ce:	83 30       	cpi	r24, 0x03	; 3
 5d0:	79 f4       	brne	.+30     	; 0x5f0 <TIMER0_Init+0x78>
 5d2:	83 b7       	in	r24, 0x33	; 51
 5d4:	8f 77       	andi	r24, 0x7F	; 127
 5d6:	83 bf       	out	0x33, r24	; 51
 5d8:	83 b7       	in	r24, 0x33	; 51
 5da:	80 64       	ori	r24, 0x40	; 64
 5dc:	83 bf       	out	0x33, r24	; 51
 5de:	83 b7       	in	r24, 0x33	; 51
 5e0:	88 60       	ori	r24, 0x08	; 8
 5e2:	83 bf       	out	0x33, r24	; 51
 5e4:	83 b7       	in	r24, 0x33	; 51
 5e6:	8f 7d       	andi	r24, 0xDF	; 223
 5e8:	83 bf       	out	0x33, r24	; 51
 5ea:	83 b7       	in	r24, 0x33	; 51
 5ec:	8f 7e       	andi	r24, 0xEF	; 239
 5ee:	83 bf       	out	0x33, r24	; 51
 5f0:	80 81       	ld	r24, Z
 5f2:	82 30       	cpi	r24, 0x02	; 2
 5f4:	29 f5       	brne	.+74     	; 0x640 <TIMER0_Init+0xc8>
 5f6:	82 81       	ldd	r24, Z+2	; 0x02
 5f8:	81 11       	cpse	r24, r1
 5fa:	07 c0       	rjmp	.+14     	; 0x60a <TIMER0_Init+0x92>
 5fc:	83 b7       	in	r24, 0x33	; 51
 5fe:	8f 7d       	andi	r24, 0xDF	; 223
 600:	83 bf       	out	0x33, r24	; 51
 602:	83 b7       	in	r24, 0x33	; 51
 604:	8f 7e       	andi	r24, 0xEF	; 239
 606:	83 bf       	out	0x33, r24	; 51
 608:	41 c0       	rjmp	.+130    	; 0x68c <TIMER0_Init+0x114>
 60a:	81 30       	cpi	r24, 0x01	; 1
 60c:	39 f4       	brne	.+14     	; 0x61c <TIMER0_Init+0xa4>
 60e:	83 b7       	in	r24, 0x33	; 51
 610:	8f 7d       	andi	r24, 0xDF	; 223
 612:	83 bf       	out	0x33, r24	; 51
 614:	83 b7       	in	r24, 0x33	; 51
 616:	80 61       	ori	r24, 0x10	; 16
 618:	83 bf       	out	0x33, r24	; 51
 61a:	38 c0       	rjmp	.+112    	; 0x68c <TIMER0_Init+0x114>
 61c:	82 30       	cpi	r24, 0x02	; 2
 61e:	39 f4       	brne	.+14     	; 0x62e <TIMER0_Init+0xb6>
 620:	83 b7       	in	r24, 0x33	; 51
 622:	80 62       	ori	r24, 0x20	; 32
 624:	83 bf       	out	0x33, r24	; 51
 626:	83 b7       	in	r24, 0x33	; 51
 628:	8f 7e       	andi	r24, 0xEF	; 239
 62a:	83 bf       	out	0x33, r24	; 51
 62c:	2f c0       	rjmp	.+94     	; 0x68c <TIMER0_Init+0x114>
 62e:	83 30       	cpi	r24, 0x03	; 3
 630:	69 f5       	brne	.+90     	; 0x68c <TIMER0_Init+0x114>
 632:	83 b7       	in	r24, 0x33	; 51
 634:	80 62       	ori	r24, 0x20	; 32
 636:	83 bf       	out	0x33, r24	; 51
 638:	83 b7       	in	r24, 0x33	; 51
 63a:	80 61       	ori	r24, 0x10	; 16
 63c:	83 bf       	out	0x33, r24	; 51
 63e:	26 c0       	rjmp	.+76     	; 0x68c <TIMER0_Init+0x114>
 640:	83 30       	cpi	r24, 0x03	; 3
 642:	21 f5       	brne	.+72     	; 0x68c <TIMER0_Init+0x114>
 644:	83 81       	ldd	r24, Z+3	; 0x03
 646:	81 11       	cpse	r24, r1
 648:	07 c0       	rjmp	.+14     	; 0x658 <TIMER0_Init+0xe0>
 64a:	83 b7       	in	r24, 0x33	; 51
 64c:	8f 7d       	andi	r24, 0xDF	; 223
 64e:	83 bf       	out	0x33, r24	; 51
 650:	83 b7       	in	r24, 0x33	; 51
 652:	8f 7e       	andi	r24, 0xEF	; 239
 654:	83 bf       	out	0x33, r24	; 51
 656:	1a c0       	rjmp	.+52     	; 0x68c <TIMER0_Init+0x114>
 658:	81 30       	cpi	r24, 0x01	; 1
 65a:	39 f4       	brne	.+14     	; 0x66a <TIMER0_Init+0xf2>
 65c:	83 b7       	in	r24, 0x33	; 51
 65e:	8f 7d       	andi	r24, 0xDF	; 223
 660:	83 bf       	out	0x33, r24	; 51
 662:	83 b7       	in	r24, 0x33	; 51
 664:	80 61       	ori	r24, 0x10	; 16
 666:	83 bf       	out	0x33, r24	; 51
 668:	11 c0       	rjmp	.+34     	; 0x68c <TIMER0_Init+0x114>
 66a:	82 30       	cpi	r24, 0x02	; 2
 66c:	39 f4       	brne	.+14     	; 0x67c <TIMER0_Init+0x104>
 66e:	83 b7       	in	r24, 0x33	; 51
 670:	80 62       	ori	r24, 0x20	; 32
 672:	83 bf       	out	0x33, r24	; 51
 674:	83 b7       	in	r24, 0x33	; 51
 676:	8f 7e       	andi	r24, 0xEF	; 239
 678:	83 bf       	out	0x33, r24	; 51
 67a:	08 c0       	rjmp	.+16     	; 0x68c <TIMER0_Init+0x114>
 67c:	83 30       	cpi	r24, 0x03	; 3
 67e:	31 f4       	brne	.+12     	; 0x68c <TIMER0_Init+0x114>
 680:	83 b7       	in	r24, 0x33	; 51
 682:	80 62       	ori	r24, 0x20	; 32
 684:	83 bf       	out	0x33, r24	; 51
 686:	83 b7       	in	r24, 0x33	; 51
 688:	80 61       	ori	r24, 0x10	; 16
 68a:	83 bf       	out	0x33, r24	; 51
 68c:	81 81       	ldd	r24, Z+1	; 0x01
 68e:	81 11       	cpse	r24, r1
 690:	0b c0       	rjmp	.+22     	; 0x6a8 <TIMER0_Init+0x130>
 692:	83 b7       	in	r24, 0x33	; 51
 694:	8e 7f       	andi	r24, 0xFE	; 254
 696:	83 bf       	out	0x33, r24	; 51
 698:	83 b7       	in	r24, 0x33	; 51
 69a:	8d 7f       	andi	r24, 0xFD	; 253
 69c:	83 bf       	out	0x33, r24	; 51
 69e:	83 b7       	in	r24, 0x33	; 51
 6a0:	8b 7f       	andi	r24, 0xFB	; 251
 6a2:	83 bf       	out	0x33, r24	; 51
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	08 95       	ret
 6a8:	81 30       	cpi	r24, 0x01	; 1
 6aa:	59 f4       	brne	.+22     	; 0x6c2 <TIMER0_Init+0x14a>
 6ac:	83 b7       	in	r24, 0x33	; 51
 6ae:	81 60       	ori	r24, 0x01	; 1
 6b0:	83 bf       	out	0x33, r24	; 51
 6b2:	83 b7       	in	r24, 0x33	; 51
 6b4:	8d 7f       	andi	r24, 0xFD	; 253
 6b6:	83 bf       	out	0x33, r24	; 51
 6b8:	83 b7       	in	r24, 0x33	; 51
 6ba:	8b 7f       	andi	r24, 0xFB	; 251
 6bc:	83 bf       	out	0x33, r24	; 51
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	08 95       	ret
 6c2:	82 30       	cpi	r24, 0x02	; 2
 6c4:	59 f4       	brne	.+22     	; 0x6dc <TIMER0_Init+0x164>
 6c6:	83 b7       	in	r24, 0x33	; 51
 6c8:	8e 7f       	andi	r24, 0xFE	; 254
 6ca:	83 bf       	out	0x33, r24	; 51
 6cc:	83 b7       	in	r24, 0x33	; 51
 6ce:	82 60       	ori	r24, 0x02	; 2
 6d0:	83 bf       	out	0x33, r24	; 51
 6d2:	83 b7       	in	r24, 0x33	; 51
 6d4:	8b 7f       	andi	r24, 0xFB	; 251
 6d6:	83 bf       	out	0x33, r24	; 51
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	08 95       	ret
 6dc:	83 30       	cpi	r24, 0x03	; 3
 6de:	59 f4       	brne	.+22     	; 0x6f6 <TIMER0_Init+0x17e>
 6e0:	83 b7       	in	r24, 0x33	; 51
 6e2:	81 60       	ori	r24, 0x01	; 1
 6e4:	83 bf       	out	0x33, r24	; 51
 6e6:	83 b7       	in	r24, 0x33	; 51
 6e8:	82 60       	ori	r24, 0x02	; 2
 6ea:	83 bf       	out	0x33, r24	; 51
 6ec:	83 b7       	in	r24, 0x33	; 51
 6ee:	8b 7f       	andi	r24, 0xFB	; 251
 6f0:	83 bf       	out	0x33, r24	; 51
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	08 95       	ret
 6f6:	84 30       	cpi	r24, 0x04	; 4
 6f8:	59 f4       	brne	.+22     	; 0x710 <TIMER0_Init+0x198>
 6fa:	83 b7       	in	r24, 0x33	; 51
 6fc:	8e 7f       	andi	r24, 0xFE	; 254
 6fe:	83 bf       	out	0x33, r24	; 51
 700:	83 b7       	in	r24, 0x33	; 51
 702:	8d 7f       	andi	r24, 0xFD	; 253
 704:	83 bf       	out	0x33, r24	; 51
 706:	83 b7       	in	r24, 0x33	; 51
 708:	84 60       	ori	r24, 0x04	; 4
 70a:	83 bf       	out	0x33, r24	; 51
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	08 95       	ret
 710:	85 30       	cpi	r24, 0x05	; 5
 712:	59 f4       	brne	.+22     	; 0x72a <TIMER0_Init+0x1b2>
 714:	83 b7       	in	r24, 0x33	; 51
 716:	81 60       	ori	r24, 0x01	; 1
 718:	83 bf       	out	0x33, r24	; 51
 71a:	83 b7       	in	r24, 0x33	; 51
 71c:	8d 7f       	andi	r24, 0xFD	; 253
 71e:	83 bf       	out	0x33, r24	; 51
 720:	83 b7       	in	r24, 0x33	; 51
 722:	84 60       	ori	r24, 0x04	; 4
 724:	83 bf       	out	0x33, r24	; 51
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	08 95       	ret
 72a:	86 30       	cpi	r24, 0x06	; 6
 72c:	59 f4       	brne	.+22     	; 0x744 <TIMER0_Init+0x1cc>
 72e:	83 b7       	in	r24, 0x33	; 51
 730:	8e 7f       	andi	r24, 0xFE	; 254
 732:	83 bf       	out	0x33, r24	; 51
 734:	83 b7       	in	r24, 0x33	; 51
 736:	82 60       	ori	r24, 0x02	; 2
 738:	83 bf       	out	0x33, r24	; 51
 73a:	83 b7       	in	r24, 0x33	; 51
 73c:	84 60       	ori	r24, 0x04	; 4
 73e:	83 bf       	out	0x33, r24	; 51
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	08 95       	ret
 744:	87 30       	cpi	r24, 0x07	; 7
 746:	69 f4       	brne	.+26     	; 0x762 <TIMER0_Init+0x1ea>
 748:	83 b7       	in	r24, 0x33	; 51
 74a:	81 60       	ori	r24, 0x01	; 1
 74c:	83 bf       	out	0x33, r24	; 51
 74e:	83 b7       	in	r24, 0x33	; 51
 750:	82 60       	ori	r24, 0x02	; 2
 752:	83 bf       	out	0x33, r24	; 51
 754:	83 b7       	in	r24, 0x33	; 51
 756:	84 60       	ori	r24, 0x04	; 4
 758:	83 bf       	out	0x33, r24	; 51
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	08 95       	ret
 75e:	80 e0       	ldi	r24, 0x00	; 0
 760:	08 95       	ret
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	08 95       	ret

00000766 <TIMER0_Enable_Interrupt>:
 766:	0f 93       	push	r16
 768:	1f 93       	push	r17
 76a:	cf 93       	push	r28
 76c:	df 93       	push	r29
 76e:	00 97       	sbiw	r24, 0x00	; 0
 770:	d1 f0       	breq	.+52     	; 0x7a6 <TIMER0_Enable_Interrupt+0x40>
 772:	8b 01       	movw	r16, r22
 774:	ec 01       	movw	r28, r24
 776:	0e 94 9b 01 	call	0x336	; 0x336 <Enable_GI>
 77a:	88 81       	ld	r24, Y
 77c:	81 11       	cpse	r24, r1
 77e:	07 c0       	rjmp	.+14     	; 0x78e <TIMER0_Enable_Interrupt+0x28>
 780:	89 b7       	in	r24, 0x39	; 57
 782:	81 60       	ori	r24, 0x01	; 1
 784:	89 bf       	out	0x39, r24	; 57
 786:	10 93 87 00 	sts	0x0087, r17	; 0x800087 <CALLBACK_OVER_FLOW+0x1>
 78a:	00 93 86 00 	sts	0x0086, r16	; 0x800086 <CALLBACK_OVER_FLOW>
 78e:	88 81       	ld	r24, Y
 790:	82 30       	cpi	r24, 0x02	; 2
 792:	59 f4       	brne	.+22     	; 0x7aa <TIMER0_Enable_Interrupt+0x44>
 794:	89 b7       	in	r24, 0x39	; 57
 796:	82 60       	ori	r24, 0x02	; 2
 798:	89 bf       	out	0x39, r24	; 57
 79a:	10 93 89 00 	sts	0x0089, r17	; 0x800089 <CALLBACK_COMPARE+0x1>
 79e:	00 93 88 00 	sts	0x0088, r16	; 0x800088 <CALLBACK_COMPARE>
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	03 c0       	rjmp	.+6      	; 0x7ac <TIMER0_Enable_Interrupt+0x46>
 7a6:	80 e0       	ldi	r24, 0x00	; 0
 7a8:	01 c0       	rjmp	.+2      	; 0x7ac <TIMER0_Enable_Interrupt+0x46>
 7aa:	81 e0       	ldi	r24, 0x01	; 1
 7ac:	df 91       	pop	r29
 7ae:	cf 91       	pop	r28
 7b0:	1f 91       	pop	r17
 7b2:	0f 91       	pop	r16
 7b4:	08 95       	ret

000007b6 <TIMER0SetCompareMatch>:
void TIMER0SetCompareMatch(uint8_t OCR0_Value)
{
	OCR0 =  OCR0_Value;
 7b6:	8c bf       	out	0x3c, r24	; 60
 7b8:	08 95       	ret

000007ba <__tablejump2__>:
 7ba:	ee 0f       	add	r30, r30
 7bc:	ff 1f       	adc	r31, r31
 7be:	05 90       	lpm	r0, Z+
 7c0:	f4 91       	lpm	r31, Z
 7c2:	e0 2d       	mov	r30, r0
 7c4:	09 94       	ijmp

000007c6 <_exit>:
 7c6:	f8 94       	cli

000007c8 <__stop_program>:
 7c8:	ff cf       	rjmp	.-2      	; 0x7c8 <__stop_program>
