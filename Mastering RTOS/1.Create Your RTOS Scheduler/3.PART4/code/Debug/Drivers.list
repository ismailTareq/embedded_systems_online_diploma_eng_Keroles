
Drivers.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000eec  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800101c  0800101c  0001101c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001048  08001048  00011050  2**0
                  CONTENTS
  4 .ARM          00000000  08001048  08001048  00011050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001048  08001050  00011050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001048  08001048  00011048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800104c  0800104c  0001104c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f4  20000000  08001050  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  08001050  000204f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011050  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00011079  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001b26  00000000  00000000  000110bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000089e  00000000  00000000  00012be2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00000c3c  00000000  00000000  00013480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000230  00000000  00000000  000140c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000001d8  00000000  00000000  000142f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001c0d  00000000  00000000  000144c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00002e68  00000000  00000000  000160d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000fba1  00000000  00000000  00018f3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000006d4  00000000  00000000  00028ae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001004 	.word	0x08001004

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001004 	.word	0x08001004

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <FIFO_init>:
 *  Created on: Aug 24, 2024
 *      Author: ismail
 */
#include "Circular_FIFO.h"

Buffer_status FIFO_init (FIFO_Buf_t* fifo,element_type* buff , unsigned int length){
 8000184:	b480      	push	{r7}
 8000186:	b085      	sub	sp, #20
 8000188:	af00      	add	r7, sp, #0
 800018a:	60f8      	str	r0, [r7, #12]
 800018c:	60b9      	str	r1, [r7, #8]
 800018e:	607a      	str	r2, [r7, #4]

	if(!buff )
 8000190:	68bb      	ldr	r3, [r7, #8]
 8000192:	2b00      	cmp	r3, #0
 8000194:	d101      	bne.n	800019a <FIFO_init+0x16>
		return FIFO_NULL;
 8000196:	2303      	movs	r3, #3
 8000198:	e011      	b.n	80001be <FIFO_init+0x3a>

	fifo->base = buff ;
 800019a:	68fb      	ldr	r3, [r7, #12]
 800019c:	68ba      	ldr	r2, [r7, #8]
 800019e:	60da      	str	r2, [r3, #12]
	fifo->head = fifo->base ;
 80001a0:	68fb      	ldr	r3, [r7, #12]
 80001a2:	68da      	ldr	r2, [r3, #12]
 80001a4:	68fb      	ldr	r3, [r7, #12]
 80001a6:	605a      	str	r2, [r3, #4]
	fifo->tail = fifo->base ;
 80001a8:	68fb      	ldr	r3, [r7, #12]
 80001aa:	68da      	ldr	r2, [r3, #12]
 80001ac:	68fb      	ldr	r3, [r7, #12]
 80001ae:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 80001b0:	68fb      	ldr	r3, [r7, #12]
 80001b2:	687a      	ldr	r2, [r7, #4]
 80001b4:	611a      	str	r2, [r3, #16]
	fifo->counter=0;
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	2200      	movs	r2, #0
 80001ba:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 80001bc:	2300      	movs	r3, #0

}
 80001be:	4618      	mov	r0, r3
 80001c0:	3714      	adds	r7, #20
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr

080001c8 <FIFO_enqueue>:

/* *********************************** */

Buffer_status FIFO_enqueue (FIFO_Buf_t* fifo,element_type item){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]

	/* fifo null*/

	if (!fifo->base || !fifo->length)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	68db      	ldr	r3, [r3, #12]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d003      	beq.n	80001e2 <FIFO_enqueue+0x1a>
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	691b      	ldr	r3, [r3, #16]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d101      	bne.n	80001e6 <FIFO_enqueue+0x1e>
		return FIFO_NULL;
 80001e2:	2303      	movs	r3, #3
 80001e4:	e02d      	b.n	8000242 <FIFO_enqueue+0x7a>
	/*fifo is full*/

	/* fifo full */
	if ((fifo->head == fifo->tail) && (fifo->counter == fifo->length))
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	685a      	ldr	r2, [r3, #4]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	689b      	ldr	r3, [r3, #8]
 80001ee:	429a      	cmp	r2, r3
 80001f0:	d107      	bne.n	8000202 <FIFO_enqueue+0x3a>
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	681a      	ldr	r2, [r3, #0]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	691b      	ldr	r3, [r3, #16]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d101      	bne.n	8000202 <FIFO_enqueue+0x3a>
		return FIFO_FULL;
 80001fe:	2301      	movs	r3, #1
 8000200:	e01f      	b.n	8000242 <FIFO_enqueue+0x7a>

	*(fifo->tail)=item;
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	689b      	ldr	r3, [r3, #8]
 8000206:	683a      	ldr	r2, [r7, #0]
 8000208:	601a      	str	r2, [r3, #0]
	fifo->counter++;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	1c5a      	adds	r2, r3, #1
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	601a      	str	r2, [r3, #0]

	/*for circular fifo again */

	/* circular enqueue */
	if (fifo->tail == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	689b      	ldr	r3, [r3, #8]
 8000218:	687a      	ldr	r2, [r7, #4]
 800021a:	68d2      	ldr	r2, [r2, #12]
 800021c:	4611      	mov	r1, r2
 800021e:	687a      	ldr	r2, [r7, #4]
 8000220:	6912      	ldr	r2, [r2, #16]
 8000222:	0092      	lsls	r2, r2, #2
 8000224:	440a      	add	r2, r1
 8000226:	3a04      	subs	r2, #4
 8000228:	4293      	cmp	r3, r2
 800022a:	d104      	bne.n	8000236 <FIFO_enqueue+0x6e>
		fifo->tail = fifo->base;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	68da      	ldr	r2, [r3, #12]
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	e004      	b.n	8000240 <FIFO_enqueue+0x78>
	else
		fifo->tail++;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	689b      	ldr	r3, [r3, #8]
 800023a:	1d1a      	adds	r2, r3, #4
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	609a      	str	r2, [r3, #8]

	return FIFO_NO_ERROR;
 8000240:	2300      	movs	r3, #0


}
 8000242:	4618      	mov	r0, r3
 8000244:	370c      	adds	r7, #12
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr

0800024c <FIFO_dequeue>:

/* *********************************** */

Buffer_status FIFO_dequeue (FIFO_Buf_t* fifo, element_type* item){
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
 8000254:	6039      	str	r1, [r7, #0]
	/* check fifo valid */
	if (!fifo->base || !fifo->length)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	68db      	ldr	r3, [r3, #12]
 800025a:	2b00      	cmp	r3, #0
 800025c:	d003      	beq.n	8000266 <FIFO_dequeue+0x1a>
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	691b      	ldr	r3, [r3, #16]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d101      	bne.n	800026a <FIFO_dequeue+0x1e>
		return FIFO_NULL;
 8000266:	2303      	movs	r3, #3
 8000268:	e028      	b.n	80002bc <FIFO_dequeue+0x70>

	/* fifo empty */
	if (fifo->head == fifo->tail)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	685a      	ldr	r2, [r3, #4]
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	689b      	ldr	r3, [r3, #8]
 8000272:	429a      	cmp	r2, r3
 8000274:	d101      	bne.n	800027a <FIFO_dequeue+0x2e>
		return FIFO_EMPTY;
 8000276:	2302      	movs	r3, #2
 8000278:	e020      	b.n	80002bc <FIFO_dequeue+0x70>



	*item = *(fifo->head);
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	685b      	ldr	r3, [r3, #4]
 800027e:	681a      	ldr	r2, [r3, #0]
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	601a      	str	r2, [r3, #0]
	fifo->counter--;
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1e5a      	subs	r2, r3, #1
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	601a      	str	r2, [r3, #0]

	/* circular dequeue */
	if (fifo->head == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	68d2      	ldr	r2, [r2, #12]
 8000296:	4611      	mov	r1, r2
 8000298:	687a      	ldr	r2, [r7, #4]
 800029a:	6912      	ldr	r2, [r2, #16]
 800029c:	0092      	lsls	r2, r2, #2
 800029e:	440a      	add	r2, r1
 80002a0:	3a04      	subs	r2, #4
 80002a2:	4293      	cmp	r3, r2
 80002a4:	d104      	bne.n	80002b0 <FIFO_dequeue+0x64>
		fifo->head = fifo->base;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	68da      	ldr	r2, [r3, #12]
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	e004      	b.n	80002ba <FIFO_dequeue+0x6e>
	else
		fifo->head++;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	685b      	ldr	r3, [r3, #4]
 80002b4:	1d1a      	adds	r2, r3, #4
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	605a      	str	r2, [r3, #4]

	return FIFO_NO_ERROR;
 80002ba:	2300      	movs	r3, #0
}
 80002bc:	4618      	mov	r0, r3
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr
	...

080002c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	6039      	str	r1, [r7, #0]
 80002d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	db0a      	blt.n	80002f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	b2da      	uxtb	r2, r3
 80002e0:	490c      	ldr	r1, [pc, #48]	; (8000314 <__NVIC_SetPriority+0x4c>)
 80002e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e6:	0152      	lsls	r2, r2, #5
 80002e8:	b2d2      	uxtb	r2, r2
 80002ea:	440b      	add	r3, r1
 80002ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002f0:	e00a      	b.n	8000308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	b2da      	uxtb	r2, r3
 80002f6:	4908      	ldr	r1, [pc, #32]	; (8000318 <__NVIC_SetPriority+0x50>)
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	f003 030f 	and.w	r3, r3, #15
 80002fe:	3b04      	subs	r3, #4
 8000300:	0152      	lsls	r2, r2, #5
 8000302:	b2d2      	uxtb	r2, r2
 8000304:	440b      	add	r3, r1
 8000306:	761a      	strb	r2, [r3, #24]
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	e000e100 	.word	0xe000e100
 8000318:	e000ed00 	.word	0xe000ed00

0800031c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	3b01      	subs	r3, #1
 8000328:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800032c:	d301      	bcc.n	8000332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800032e:	2301      	movs	r3, #1
 8000330:	e00f      	b.n	8000352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000332:	4a0a      	ldr	r2, [pc, #40]	; (800035c <SysTick_Config+0x40>)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	3b01      	subs	r3, #1
 8000338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800033a:	2107      	movs	r1, #7
 800033c:	f04f 30ff 	mov.w	r0, #4294967295
 8000340:	f7ff ffc2 	bl	80002c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000344:	4b05      	ldr	r3, [pc, #20]	; (800035c <SysTick_Config+0x40>)
 8000346:	2200      	movs	r2, #0
 8000348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800034a:	4b04      	ldr	r3, [pc, #16]	; (800035c <SysTick_Config+0x40>)
 800034c:	2207      	movs	r2, #7
 800034e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000350:	2300      	movs	r3, #0
}
 8000352:	4618      	mov	r0, r3
 8000354:	3708      	adds	r7, #8
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	e000e010 	.word	0xe000e010

08000360 <HW_init>:
 */
#include "CortexMX_OS_porting.h"

unsigned char systickled;
void HW_init()
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	// 1 count -> 0.125 us
	// X count -> 1 ms
	// X = 8000 count

	//decrease PendSV  interrupt priority to be  smaller than or equal  SySTICK Timer
	__NVIC_SetPriority(PendSV_IRQn, 15) ;//make it 15 instead of 14
 8000364:	210f      	movs	r1, #15
 8000366:	f06f 0001 	mvn.w	r0, #1
 800036a:	f7ff ffad 	bl	80002c8 <__NVIC_SetPriority>
}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}

08000372 <HardFault_Handler>:


void HardFault_Handler (void)
{
 8000372:	b480      	push	{r7}
 8000374:	af00      	add	r7, sp, #0
	while(1) ;
 8000376:	e7fe      	b.n	8000376 <HardFault_Handler+0x4>

08000378 <MemManage_Handler>:
}
void MemManage_Handler (void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
	while(1) ;
 800037c:	e7fe      	b.n	800037c <MemManage_Handler+0x4>

0800037e <BusFault_Handler>:
}
void BusFault_Handler(void)
{
 800037e:	b480      	push	{r7}
 8000380:	af00      	add	r7, sp, #0
	while(1) ;
 8000382:	e7fe      	b.n	8000382 <BusFault_Handler+0x4>

08000384 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
	while(1) ;
 8000388:	e7fe      	b.n	8000388 <UsageFault_Handler+0x4>

0800038a <SVC_Handler>:
}

__attribute((naked)) void SVC_Handler()
{
	__asm("tst lr,#4 \n\t"
 800038a:	f01e 0f04 	tst.w	lr, #4
 800038e:	bf0c      	ite	eq
 8000390:	f3ef 8008 	mrseq	r0, MSP
 8000394:	f3ef 8009 	mrsne	r0, PSP
 8000398:	f000 baf2 	b.w	8000980 <Os_SVC_Services>
			"ITE EQ \n\t"
			"mrseq r0,MSP \n\t"
			"mrsne r0,PSP \n\t"
			"B Os_SVC_Services");
}
 800039c:	bf00      	nop
	...

080003a0 <Trigger_OS_PendSV>:

void Trigger_OS_PendSV()
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80003a4:	4b04      	ldr	r3, [pc, #16]	; (80003b8 <Trigger_OS_PendSV+0x18>)
 80003a6:	685b      	ldr	r3, [r3, #4]
 80003a8:	4a03      	ldr	r2, [pc, #12]	; (80003b8 <Trigger_OS_PendSV+0x18>)
 80003aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003ae:	6053      	str	r3, [r2, #4]
}
 80003b0:	bf00      	nop
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr
 80003b8:	e000ed00 	.word	0xe000ed00

080003bc <Start_ticker>:

void Start_ticker()
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
		//	8 MHZ
		//	1 count -> 0.125 us
		//	X count -> 1 ms
		//	X = 8000 Count

		 SysTick_Config(8000);
 80003c0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80003c4:	f7ff ffaa 	bl	800031c <SysTick_Config>
}
 80003c8:	bf00      	nop
 80003ca:	bd80      	pop	{r7, pc}

080003cc <SysTick_Handler>:

void SysTick_Handler(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	systickled^=1;
 80003d0:	4b07      	ldr	r3, [pc, #28]	; (80003f0 <SysTick_Handler+0x24>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	f083 0301 	eor.w	r3, r3, #1
 80003d8:	b2da      	uxtb	r2, r3
 80003da:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <SysTick_Handler+0x24>)
 80003dc:	701a      	strb	r2, [r3, #0]

	MYRTOS_Update_TasksWaitingTime();
 80003de:	f000 fb45 	bl	8000a6c <MYRTOS_Update_TasksWaitingTime>
	//Determine current and next
	Decide_WhatNext();
 80003e2:	f000 fa7b 	bl	80008dc <Decide_WhatNext>
	//Switch Context and restore
	Trigger_OS_PendSV();
 80003e6:	f7ff ffdb 	bl	80003a0 <Trigger_OS_PendSV>

}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	2000001c 	.word	0x2000001c

080003f4 <PendSV_Handler>:
__attribute ((naked)) void PendSV_Handler(void)
{
	//Save the Context of the Current Task

	//Get the Current Task "Current PSP from CPU register" as CPU Push XPSR,.....,R0
	OS_GET_PSP(OS_Control.CurrentTask->Current_PSP);
 80003f4:	4b6c      	ldr	r3, [pc, #432]	; (80005a8 <PendSV_Handler+0x1b4>)
 80003f6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80003fa:	f3ef 8009 	mrs	r0, PSP
 80003fe:	4602      	mov	r2, r0
 8000400:	615a      	str	r2, [r3, #20]

	//using this Current_PSP (Pointer) to store (R4 to R11)
	OS_Control.CurrentTask->Current_PSP--;
 8000402:	4b69      	ldr	r3, [pc, #420]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000404:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000408:	695a      	ldr	r2, [r3, #20]
 800040a:	3a04      	subs	r2, #4
 800040c:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r4" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 800040e:	4b66      	ldr	r3, [pc, #408]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000410:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	4622      	mov	r2, r4
 8000418:	601a      	str	r2, [r3, #0]

	OS_Control.CurrentTask->Current_PSP--;
 800041a:	4b63      	ldr	r3, [pc, #396]	; (80005a8 <PendSV_Handler+0x1b4>)
 800041c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000420:	695a      	ldr	r2, [r3, #20]
 8000422:	3a04      	subs	r2, #4
 8000424:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r5" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000426:	4b60      	ldr	r3, [pc, #384]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000428:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	462a      	mov	r2, r5
 8000430:	601a      	str	r2, [r3, #0]

	OS_Control.CurrentTask->Current_PSP--;
 8000432:	4b5d      	ldr	r3, [pc, #372]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000434:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000438:	695a      	ldr	r2, [r3, #20]
 800043a:	3a04      	subs	r2, #4
 800043c:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r6" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 800043e:	4b5a      	ldr	r3, [pc, #360]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000440:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	4632      	mov	r2, r6
 8000448:	601a      	str	r2, [r3, #0]

	OS_Control.CurrentTask->Current_PSP--;
 800044a:	4b57      	ldr	r3, [pc, #348]	; (80005a8 <PendSV_Handler+0x1b4>)
 800044c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000450:	695a      	ldr	r2, [r3, #20]
 8000452:	3a04      	subs	r2, #4
 8000454:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r7" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000456:	4b54      	ldr	r3, [pc, #336]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000458:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	463a      	mov	r2, r7
 8000460:	601a      	str	r2, [r3, #0]

	OS_Control.CurrentTask->Current_PSP--;
 8000462:	4b51      	ldr	r3, [pc, #324]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000464:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000468:	695a      	ldr	r2, [r3, #20]
 800046a:	3a04      	subs	r2, #4
 800046c:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r8" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 800046e:	4b4e      	ldr	r3, [pc, #312]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000470:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4642      	mov	r2, r8
 8000478:	601a      	str	r2, [r3, #0]

	OS_Control.CurrentTask->Current_PSP--;
 800047a:	4b4b      	ldr	r3, [pc, #300]	; (80005a8 <PendSV_Handler+0x1b4>)
 800047c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000480:	695a      	ldr	r2, [r3, #20]
 8000482:	3a04      	subs	r2, #4
 8000484:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r9" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000486:	4b48      	ldr	r3, [pc, #288]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000488:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	464a      	mov	r2, r9
 8000490:	601a      	str	r2, [r3, #0]

	OS_Control.CurrentTask->Current_PSP--;
 8000492:	4b45      	ldr	r3, [pc, #276]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000494:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000498:	695a      	ldr	r2, [r3, #20]
 800049a:	3a04      	subs	r2, #4
 800049c:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r10" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 800049e:	4b42      	ldr	r3, [pc, #264]	; (80005a8 <PendSV_Handler+0x1b4>)
 80004a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4652      	mov	r2, sl
 80004a8:	601a      	str	r2, [r3, #0]

	OS_Control.CurrentTask->Current_PSP--;
 80004aa:	4b3f      	ldr	r3, [pc, #252]	; (80005a8 <PendSV_Handler+0x1b4>)
 80004ac:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004b0:	695a      	ldr	r2, [r3, #20]
 80004b2:	3a04      	subs	r2, #4
 80004b4:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r11" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 80004b6:	4b3c      	ldr	r3, [pc, #240]	; (80005a8 <PendSV_Handler+0x1b4>)
 80004b8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	465a      	mov	r2, fp
 80004c0:	601a      	str	r2, [r3, #0]
	//save the current Value of PSP
	//already saved in Current_PSP

	///////////////////////////////////////////////////////////
	//Restore the Context of the Next Task
	OS_Control.CurrentTask = OS_Control.NextTask;
 80004c2:	4b39      	ldr	r3, [pc, #228]	; (80005a8 <PendSV_Handler+0x1b4>)
 80004c4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80004c8:	4a37      	ldr	r2, [pc, #220]	; (80005a8 <PendSV_Handler+0x1b4>)
 80004ca:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
	OS_Control.NextTask = NULL;
 80004ce:	4b36      	ldr	r3, [pc, #216]	; (80005a8 <PendSV_Handler+0x1b4>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

	//pop
	__asm volatile("mov r11,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 80004d6:	4b34      	ldr	r3, [pc, #208]	; (80005a8 <PendSV_Handler+0x1b4>)
 80004d8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	469b      	mov	fp, r3
	OS_Control.CurrentTask->Current_PSP++;
 80004e2:	4b31      	ldr	r3, [pc, #196]	; (80005a8 <PendSV_Handler+0x1b4>)
 80004e4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004e8:	695a      	ldr	r2, [r3, #20]
 80004ea:	3204      	adds	r2, #4
 80004ec:	615a      	str	r2, [r3, #20]

	__asm volatile("mov r10,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 80004ee:	4b2e      	ldr	r3, [pc, #184]	; (80005a8 <PendSV_Handler+0x1b4>)
 80004f0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	469a      	mov	sl, r3
	OS_Control.CurrentTask->Current_PSP++;
 80004fa:	4b2b      	ldr	r3, [pc, #172]	; (80005a8 <PendSV_Handler+0x1b4>)
 80004fc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000500:	695a      	ldr	r2, [r3, #20]
 8000502:	3204      	adds	r2, #4
 8000504:	615a      	str	r2, [r3, #20]

	__asm volatile("mov r9,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000506:	4b28      	ldr	r3, [pc, #160]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000508:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4699      	mov	r9, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000512:	4b25      	ldr	r3, [pc, #148]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000514:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000518:	695a      	ldr	r2, [r3, #20]
 800051a:	3204      	adds	r2, #4
 800051c:	615a      	str	r2, [r3, #20]

	__asm volatile("mov r8,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 800051e:	4b22      	ldr	r3, [pc, #136]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000520:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4698      	mov	r8, r3
	OS_Control.CurrentTask->Current_PSP++;
 800052a:	4b1f      	ldr	r3, [pc, #124]	; (80005a8 <PendSV_Handler+0x1b4>)
 800052c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000530:	695a      	ldr	r2, [r3, #20]
 8000532:	3204      	adds	r2, #4
 8000534:	615a      	str	r2, [r3, #20]

	__asm volatile("mov r7,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000536:	4b1c      	ldr	r3, [pc, #112]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000538:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	461f      	mov	r7, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000542:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000544:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000548:	695a      	ldr	r2, [r3, #20]
 800054a:	3204      	adds	r2, #4
 800054c:	615a      	str	r2, [r3, #20]

	__asm volatile("mov r6,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 800054e:	4b16      	ldr	r3, [pc, #88]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000550:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	461e      	mov	r6, r3
	OS_Control.CurrentTask->Current_PSP++;
 800055a:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <PendSV_Handler+0x1b4>)
 800055c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000560:	695a      	ldr	r2, [r3, #20]
 8000562:	3204      	adds	r2, #4
 8000564:	615a      	str	r2, [r3, #20]

	__asm volatile("mov r5,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000566:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000568:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	461d      	mov	r5, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000572:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000574:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000578:	695a      	ldr	r2, [r3, #20]
 800057a:	3204      	adds	r2, #4
 800057c:	615a      	str	r2, [r3, #20]

	__asm volatile("mov r4,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 800057e:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000580:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	461c      	mov	r4, r3
	OS_Control.CurrentTask->Current_PSP++;
 800058a:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <PendSV_Handler+0x1b4>)
 800058c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000590:	695a      	ldr	r2, [r3, #20]
 8000592:	3204      	adds	r2, #4
 8000594:	615a      	str	r2, [r3, #20]

	//update PSP and exit
	OS_SET_PSP(OS_Control.CurrentTask->Current_PSP);
 8000596:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000598:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	4618      	mov	r0, r3
 80005a0:	f380 8809 	msr	PSP, r0
	__asm volatile("BX LR");
 80005a4:	4770      	bx	lr
}
 80005a6:	bf00      	nop
 80005a8:	20000020 	.word	0x20000020

080005ac <IsmailRTOS_IdleTask>:

unsigned char IdleTaskLed ;
void IsmailRTOS_IdleTask(void){
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
	while(1)
	{
		IdleTaskLed ^= 1;
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <IsmailRTOS_IdleTask+0x18>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	f083 0301 	eor.w	r3, r3, #1
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	4b02      	ldr	r3, [pc, #8]	; (80005c4 <IsmailRTOS_IdleTask+0x18>)
 80005bc:	701a      	strb	r2, [r3, #0]
		__asm("wfe");
 80005be:	bf20      	wfe
		IdleTaskLed ^= 1;
 80005c0:	e7f6      	b.n	80005b0 <IsmailRTOS_IdleTask+0x4>
 80005c2:	bf00      	nop
 80005c4:	200003b0 	.word	0x200003b0

080005c8 <IsmailRTOS_Create_IdleTask>:
	}
}

void IsmailRTOS_Create_IdleTask(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
	strcpy(Idle_task.Task_Name,"Idle_Task");
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <IsmailRTOS_Create_IdleTask+0x2c>)
 80005ce:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <IsmailRTOS_Create_IdleTask+0x30>)
 80005d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80005d2:	c303      	stmia	r3!, {r0, r1}
 80005d4:	801a      	strh	r2, [r3, #0]
	Idle_task.priority = 255;
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <IsmailRTOS_Create_IdleTask+0x34>)
 80005d8:	22ff      	movs	r2, #255	; 0xff
 80005da:	711a      	strb	r2, [r3, #4]
	Idle_task.TaskEntry = IsmailRTOS_IdleTask;
 80005dc:	4b07      	ldr	r3, [pc, #28]	; (80005fc <IsmailRTOS_Create_IdleTask+0x34>)
 80005de:	4a08      	ldr	r2, [pc, #32]	; (8000600 <IsmailRTOS_Create_IdleTask+0x38>)
 80005e0:	609a      	str	r2, [r3, #8]
	Idle_task.stacksize = 300;
 80005e2:	4b06      	ldr	r3, [pc, #24]	; (80005fc <IsmailRTOS_Create_IdleTask+0x34>)
 80005e4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80005e8:	601a      	str	r2, [r3, #0]
}
 80005ea:	bf00      	nop
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bc80      	pop	{r7}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000388 	.word	0x20000388
 80005f8:	0800101c 	.word	0x0800101c
 80005fc:	20000370 	.word	0x20000370
 8000600:	080005ad 	.word	0x080005ad

08000604 <IsmailRTOS_Create_MainStack>:


void IsmailRTOS_Create_MainStack(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
	OS_Control.S_MSP_Task = &_estack;
 8000608:	4a0b      	ldr	r2, [pc, #44]	; (8000638 <IsmailRTOS_Create_MainStack+0x34>)
 800060a:	4b0c      	ldr	r3, [pc, #48]	; (800063c <IsmailRTOS_Create_MainStack+0x38>)
 800060c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control.E_MSP_Task = OS_Control.S_MSP_Task - MainStackSize;
 8000610:	4b0a      	ldr	r3, [pc, #40]	; (800063c <IsmailRTOS_Create_MainStack+0x38>)
 8000612:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000616:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 800061a:	4a08      	ldr	r2, [pc, #32]	; (800063c <IsmailRTOS_Create_MainStack+0x38>)
 800061c:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	OS_Control.PSP_Locator = OS_Control.E_MSP_Task - 8;
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <IsmailRTOS_Create_MainStack+0x38>)
 8000622:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000626:	3b08      	subs	r3, #8
 8000628:	4a04      	ldr	r2, [pc, #16]	; (800063c <IsmailRTOS_Create_MainStack+0x38>)
 800062a:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	20002800 	.word	0x20002800
 800063c:	20000020 	.word	0x20000020

08000640 <IsmailRTOS_Init>:

IsmailRTOS_errorID IsmailRTOS_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
	IsmailRTOS_errorID ErrorID = NoError;
 8000646:	2300      	movs	r3, #0
 8000648:	71fb      	strb	r3, [r7, #7]

	//1. OS state >> suspend
	OS_Control.OS_state = OS_Suspend;
 800064a:	4b10      	ldr	r3, [pc, #64]	; (800068c <IsmailRTOS_Init+0x4c>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//2. initialize the main stack
	IsmailRTOS_Create_MainStack();
 8000652:	f7ff ffd7 	bl	8000604 <IsmailRTOS_Create_MainStack>
	//3. Create Ready Queue
	if(FIFO_init(&ReadyQueue, Ready_table, 100) != FIFO_NO_ERROR)
 8000656:	2264      	movs	r2, #100	; 0x64
 8000658:	490d      	ldr	r1, [pc, #52]	; (8000690 <IsmailRTOS_Init+0x50>)
 800065a:	480e      	ldr	r0, [pc, #56]	; (8000694 <IsmailRTOS_Init+0x54>)
 800065c:	f7ff fd92 	bl	8000184 <FIFO_init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d002      	beq.n	800066c <IsmailRTOS_Init+0x2c>
	{
		ErrorID += Ready_Queue_Init_error ;
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	3301      	adds	r3, #1
 800066a:	71fb      	strb	r3, [r7, #7]
	}
	//4. Create IDLE task
	IsmailRTOS_Create_IdleTask();
 800066c:	f7ff ffac 	bl	80005c8 <IsmailRTOS_Create_IdleTask>

	//5. create task stack
	ErrorID += IsmailRTOS_CreateTask(&Idle_task);
 8000670:	4809      	ldr	r0, [pc, #36]	; (8000698 <IsmailRTOS_Init+0x58>)
 8000672:	f000 f84d 	bl	8000710 <IsmailRTOS_CreateTask>
 8000676:	4603      	mov	r3, r0
 8000678:	461a      	mov	r2, r3
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	4413      	add	r3, r2
 800067e:	71fb      	strb	r3, [r7, #7]

	return ErrorID;
 8000680:	79fb      	ldrb	r3, [r7, #7]
}
 8000682:	4618      	mov	r0, r3
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000020 	.word	0x20000020
 8000690:	200001e0 	.word	0x200001e0
 8000694:	200001cc 	.word	0x200001cc
 8000698:	20000370 	.word	0x20000370

0800069c <IsmailRTOS_CreateTask_Stack>:

void IsmailRTOS_CreateTask_Stack(task_Typedef* task)
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	 * r2
	 * r1
	 * r0
	 *  save from r5 >> r11 manually save and store
	 */
	task->Current_PSP = task->S_PSP_Task;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	461a      	mov	r2, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	615a      	str	r2, [r3, #20]

	//save xPRS Tbit
	*(task->Current_PSP) = 0x01000000;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006b6:	601a      	str	r2, [r3, #0]
	task->Current_PSP--;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	1f1a      	subs	r2, r3, #4
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	615a      	str	r2, [r3, #20]

	//save PC
	*(task->Current_PSP) = (unsigned int)task->TaskEntry;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	689a      	ldr	r2, [r3, #8]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	601a      	str	r2, [r3, #0]
	task->Current_PSP--;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	695b      	ldr	r3, [r3, #20]
 80006d0:	1f1a      	subs	r2, r3, #4
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	615a      	str	r2, [r3, #20]

	//save LR
	*(task->Current_PSP) = 0xFFFFFFFD;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	f06f 0202 	mvn.w	r2, #2
 80006de:	601a      	str	r2, [r3, #0]

	//save values in R0 -> R12
	for(int i = 0; i<13 ; i++)
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	e00b      	b.n	80006fe <IsmailRTOS_CreateTask_Stack+0x62>
	{
		task->Current_PSP--;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	1f1a      	subs	r2, r3, #4
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	615a      	str	r2, [r3, #20]
		*(task->Current_PSP) = 0;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
	for(int i = 0; i<13 ; i++)
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	3301      	adds	r3, #1
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	2b0c      	cmp	r3, #12
 8000702:	ddf0      	ble.n	80006e6 <IsmailRTOS_CreateTask_Stack+0x4a>
	}

}
 8000704:	bf00      	nop
 8000706:	bf00      	nop
 8000708:	3714      	adds	r7, #20
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr

08000710 <IsmailRTOS_CreateTask>:

IsmailRTOS_errorID IsmailRTOS_CreateTask(task_Typedef* task)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	IsmailRTOS_errorID ErrorID = NoError;
 8000718:	2300      	movs	r3, #0
 800071a:	73fb      	strb	r3, [r7, #15]

	task->S_PSP_Task = OS_Control.PSP_Locator;
 800071c:	4b19      	ldr	r3, [pc, #100]	; (8000784 <IsmailRTOS_CreateTask+0x74>)
 800071e:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	60da      	str	r2, [r3, #12]

	task->E_PSP_Task = task->S_PSP_Task - task->stacksize;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	68da      	ldr	r2, [r3, #12]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	1ad2      	subs	r2, r2, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	611a      	str	r2, [r3, #16]

	if((task->E_PSP_Task)<(unsigned int)(&_eheap))
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	691b      	ldr	r3, [r3, #16]
 8000738:	4a13      	ldr	r2, [pc, #76]	; (8000788 <IsmailRTOS_CreateTask+0x78>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d201      	bcs.n	8000742 <IsmailRTOS_CreateTask+0x32>
	{
		return Task_Exceeded_Stack_size;
 800073e:	2302      	movs	r3, #2
 8000740:	e01b      	b.n	800077a <IsmailRTOS_CreateTask+0x6a>
	}
	OS_Control.PSP_Locator = task->E_PSP_Task - 8;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	691b      	ldr	r3, [r3, #16]
 8000746:	3b08      	subs	r3, #8
 8000748:	4a0e      	ldr	r2, [pc, #56]	; (8000784 <IsmailRTOS_CreateTask+0x74>)
 800074a:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	IsmailRTOS_CreateTask_Stack(task);
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f7ff ffa4 	bl	800069c <IsmailRTOS_CreateTask_Stack>

	//update sch.table
	OS_Control.TaskTable[OS_Control.number_ActiveTasks] = task;
 8000754:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <IsmailRTOS_CreateTask+0x74>)
 8000756:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800075a:	490a      	ldr	r1, [pc, #40]	; (8000784 <IsmailRTOS_CreateTask+0x74>)
 800075c:	687a      	ldr	r2, [r7, #4]
 800075e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	OS_Control.number_ActiveTasks++;
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <IsmailRTOS_CreateTask+0x74>)
 8000764:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000768:	3301      	adds	r3, #1
 800076a:	4a06      	ldr	r2, [pc, #24]	; (8000784 <IsmailRTOS_CreateTask+0x74>)
 800076c:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
	//	- _S_PSP_Task	-
	//	-	  Task Stack	-
	//	- _E_PSP_Task	-
	//	-

	task->Task_state = Suspend;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2200      	movs	r2, #0
 8000774:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	return ErrorID;
 8000778:	7bfb      	ldrb	r3, [r7, #15]
}
 800077a:	4618      	mov	r0, r3
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000020 	.word	0x20000020
 8000788:	200006f8 	.word	0x200006f8

0800078c <bubbleSort>:

void bubbleSort()
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
	unsigned int i, j , n;
	task_Typedef* temp ;
	n = OS_Control.number_ActiveTasks ;
 8000792:	4b21      	ldr	r3, [pc, #132]	; (8000818 <bubbleSort+0x8c>)
 8000794:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000798:	607b      	str	r3, [r7, #4]
	for (i = 0; i < n - 1; i++)
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	e030      	b.n	8000802 <bubbleSort+0x76>

		// Last i elements are already in place
		for (j = 0; j < n - i - 1; j++)
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	e023      	b.n	80007ee <bubbleSort+0x62>
			if (OS_Control.TaskTable[j]->priority > OS_Control.TaskTable[j + 1]->priority)
 80007a6:	4a1c      	ldr	r2, [pc, #112]	; (8000818 <bubbleSort+0x8c>)
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ae:	791a      	ldrb	r2, [r3, #4]
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	3301      	adds	r3, #1
 80007b4:	4918      	ldr	r1, [pc, #96]	; (8000818 <bubbleSort+0x8c>)
 80007b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007ba:	791b      	ldrb	r3, [r3, #4]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d913      	bls.n	80007e8 <bubbleSort+0x5c>
			{
				temp = OS_Control.TaskTable[j] ;
 80007c0:	4a15      	ldr	r2, [pc, #84]	; (8000818 <bubbleSort+0x8c>)
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007c8:	603b      	str	r3, [r7, #0]
				OS_Control.TaskTable[j] = OS_Control.TaskTable[j + 1 ] ;
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	3301      	adds	r3, #1
 80007ce:	4a12      	ldr	r2, [pc, #72]	; (8000818 <bubbleSort+0x8c>)
 80007d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007d4:	4910      	ldr	r1, [pc, #64]	; (8000818 <bubbleSort+0x8c>)
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control.TaskTable[j + 1] = temp ;
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	3301      	adds	r3, #1
 80007e0:	490d      	ldr	r1, [pc, #52]	; (8000818 <bubbleSort+0x8c>)
 80007e2:	683a      	ldr	r2, [r7, #0]
 80007e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (j = 0; j < n - i - 1; j++)
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	3301      	adds	r3, #1
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	1ad3      	subs	r3, r2, r3
 80007f4:	3b01      	subs	r3, #1
 80007f6:	68ba      	ldr	r2, [r7, #8]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d3d4      	bcc.n	80007a6 <bubbleSort+0x1a>
	for (i = 0; i < n - 1; i++)
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	3301      	adds	r3, #1
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	3b01      	subs	r3, #1
 8000806:	68fa      	ldr	r2, [r7, #12]
 8000808:	429a      	cmp	r2, r3
 800080a:	d3c9      	bcc.n	80007a0 <bubbleSort+0x14>
			}

}
 800080c:	bf00      	nop
 800080e:	bf00      	nop
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	20000020 	.word	0x20000020

0800081c <IsmailRTOS_UpdateSchedular>:


void IsmailRTOS_UpdateSchedular()
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
	task_Typedef* temp =NULL ;
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]
	task_Typedef* task ;
	task_Typedef* nextTask ;
	int i = 0 ;
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]

	//1.bubble sort based on priority
	bubbleSort();
 800082a:	f7ff ffaf 	bl	800078c <bubbleSort>
	//2.free ready queue
	while(FIFO_dequeue(&ReadyQueue, &temp) != FIFO_EMPTY);
 800082e:	bf00      	nop
 8000830:	463b      	mov	r3, r7
 8000832:	4619      	mov	r1, r3
 8000834:	4827      	ldr	r0, [pc, #156]	; (80008d4 <IsmailRTOS_UpdateSchedular+0xb8>)
 8000836:	f7ff fd09 	bl	800024c <FIFO_dequeue>
 800083a:	4603      	mov	r3, r0
 800083c:	2b02      	cmp	r3, #2
 800083e:	d1f7      	bne.n	8000830 <IsmailRTOS_UpdateSchedular+0x14>
	//3.update ready queue
	while(i<OS_Control.number_ActiveTasks)
 8000840:	e03d      	b.n	80008be <IsmailRTOS_UpdateSchedular+0xa2>
	{
		task = OS_Control.TaskTable[i];
 8000842:	4a25      	ldr	r2, [pc, #148]	; (80008d8 <IsmailRTOS_UpdateSchedular+0xbc>)
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800084a:	60bb      	str	r3, [r7, #8]
		nextTask = OS_Control.TaskTable[i+1];
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	3301      	adds	r3, #1
 8000850:	4a21      	ldr	r2, [pc, #132]	; (80008d8 <IsmailRTOS_UpdateSchedular+0xbc>)
 8000852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000856:	607b      	str	r3, [r7, #4]

		if(task->Task_state != Suspend)
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800085e:	2b00      	cmp	r3, #0
 8000860:	d02a      	beq.n	80008b8 <IsmailRTOS_UpdateSchedular+0x9c>
		{
			//in case we reached to the end of TaskTable
			if(nextTask->Task_state == Suspend)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000868:	2b00      	cmp	r3, #0
 800086a:	d108      	bne.n	800087e <IsmailRTOS_UpdateSchedular+0x62>
			{
				FIFO_enqueue(&ReadyQueue, task);
 800086c:	68b9      	ldr	r1, [r7, #8]
 800086e:	4819      	ldr	r0, [pc, #100]	; (80008d4 <IsmailRTOS_UpdateSchedular+0xb8>)
 8000870:	f7ff fcaa 	bl	80001c8 <FIFO_enqueue>
				task->Task_state = Ready;
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	2203      	movs	r2, #3
 8000878:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
				break;
 800087c:	e026      	b.n	80008cc <IsmailRTOS_UpdateSchedular+0xb0>
			}
			//in case next task priority is higher than task priority the smaller the number the higher the priority
			else if(nextTask->priority > task->priority)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	791a      	ldrb	r2, [r3, #4]
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	791b      	ldrb	r3, [r3, #4]
 8000886:	429a      	cmp	r2, r3
 8000888:	d908      	bls.n	800089c <IsmailRTOS_UpdateSchedular+0x80>
			{
				FIFO_enqueue(&ReadyQueue, task);
 800088a:	68b9      	ldr	r1, [r7, #8]
 800088c:	4811      	ldr	r0, [pc, #68]	; (80008d4 <IsmailRTOS_UpdateSchedular+0xb8>)
 800088e:	f7ff fc9b 	bl	80001c8 <FIFO_enqueue>
				task->Task_state = Ready;
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	2203      	movs	r2, #3
 8000896:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
				break;
 800089a:	e017      	b.n	80008cc <IsmailRTOS_UpdateSchedular+0xb0>
			}
			//in case next task priority is EQUAL than task priority
			//	push task to ready state
			//	And make the task = nexttask  and nexttask++ in the next i++
			else if(nextTask->priority == task->priority)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	791a      	ldrb	r2, [r3, #4]
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	791b      	ldrb	r3, [r3, #4]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d107      	bne.n	80008b8 <IsmailRTOS_UpdateSchedular+0x9c>
			{
				FIFO_enqueue(&ReadyQueue, task);
 80008a8:	68b9      	ldr	r1, [r7, #8]
 80008aa:	480a      	ldr	r0, [pc, #40]	; (80008d4 <IsmailRTOS_UpdateSchedular+0xb8>)
 80008ac:	f7ff fc8c 	bl	80001c8 <FIFO_enqueue>
				task->Task_state = Ready;
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	2203      	movs	r2, #3
 80008b4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
			}

		}

		i++;
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	3301      	adds	r3, #1
 80008bc:	60fb      	str	r3, [r7, #12]
	while(i<OS_Control.number_ActiveTasks)
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <IsmailRTOS_UpdateSchedular+0xbc>)
 80008c0:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d8bb      	bhi.n	8000842 <IsmailRTOS_UpdateSchedular+0x26>
	}

}
 80008ca:	bf00      	nop
 80008cc:	bf00      	nop
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	200001cc 	.word	0x200001cc
 80008d8:	20000020 	.word	0x20000020

080008dc <Decide_WhatNext>:
//handler mode
void Decide_WhatNext()
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	//if Ready Queue is empty && OS_Control->currentTask != suspend
	if((ReadyQueue.counter == 0)&&(OS_Control.CurrentTask->Task_state != Suspend))
 80008e0:	4b24      	ldr	r3, [pc, #144]	; (8000974 <Decide_WhatNext+0x98>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d11a      	bne.n	800091e <Decide_WhatNext+0x42>
 80008e8:	4b23      	ldr	r3, [pc, #140]	; (8000978 <Decide_WhatNext+0x9c>)
 80008ea:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008ee:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d013      	beq.n	800091e <Decide_WhatNext+0x42>
	{
		OS_Control.CurrentTask->Task_state = Running;
 80008f6:	4b20      	ldr	r3, [pc, #128]	; (8000978 <Decide_WhatNext+0x9c>)
 80008f8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008fc:	2201      	movs	r2, #1
 80008fe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		FIFO_enqueue(&ReadyQueue, OS_Control.CurrentTask);
 8000902:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <Decide_WhatNext+0x9c>)
 8000904:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000908:	4619      	mov	r1, r3
 800090a:	481a      	ldr	r0, [pc, #104]	; (8000974 <Decide_WhatNext+0x98>)
 800090c:	f7ff fc5c 	bl	80001c8 <FIFO_enqueue>
		OS_Control.NextTask = OS_Control.CurrentTask;
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <Decide_WhatNext+0x9c>)
 8000912:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000916:	4a18      	ldr	r2, [pc, #96]	; (8000978 <Decide_WhatNext+0x9c>)
 8000918:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		{
			FIFO_enqueue(&ReadyQueue, OS_Control.CurrentTask);
			OS_Control.CurrentTask->Task_state = Ready;
		}
	}
}
 800091c:	e027      	b.n	800096e <Decide_WhatNext+0x92>
		FIFO_dequeue(&ReadyQueue, &OS_Control.NextTask);
 800091e:	4917      	ldr	r1, [pc, #92]	; (800097c <Decide_WhatNext+0xa0>)
 8000920:	4814      	ldr	r0, [pc, #80]	; (8000974 <Decide_WhatNext+0x98>)
 8000922:	f7ff fc93 	bl	800024c <FIFO_dequeue>
		OS_Control.NextTask->Task_state = Running;
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <Decide_WhatNext+0x9c>)
 8000928:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800092c:	2201      	movs	r2, #1
 800092e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		if((OS_Control.CurrentTask->priority == OS_Control.NextTask->priority)&&(OS_Control.CurrentTask->Task_state != Suspend))
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <Decide_WhatNext+0x9c>)
 8000934:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000938:	791a      	ldrb	r2, [r3, #4]
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <Decide_WhatNext+0x9c>)
 800093c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000940:	791b      	ldrb	r3, [r3, #4]
 8000942:	429a      	cmp	r2, r3
 8000944:	d113      	bne.n	800096e <Decide_WhatNext+0x92>
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <Decide_WhatNext+0x9c>)
 8000948:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800094c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000950:	2b00      	cmp	r3, #0
 8000952:	d00c      	beq.n	800096e <Decide_WhatNext+0x92>
			FIFO_enqueue(&ReadyQueue, OS_Control.CurrentTask);
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <Decide_WhatNext+0x9c>)
 8000956:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800095a:	4619      	mov	r1, r3
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <Decide_WhatNext+0x98>)
 800095e:	f7ff fc33 	bl	80001c8 <FIFO_enqueue>
			OS_Control.CurrentTask->Task_state = Ready;
 8000962:	4b05      	ldr	r3, [pc, #20]	; (8000978 <Decide_WhatNext+0x9c>)
 8000964:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000968:	2203      	movs	r2, #3
 800096a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200001cc 	.word	0x200001cc
 8000978:	20000020 	.word	0x20000020
 800097c:	200001c4 	.word	0x200001c4

08000980 <Os_SVC_Services>:


//handler mode
void Os_SVC_Services(unsigned int *Stack_Pointer)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	unsigned char SVC_ID;
	SVC_ID = *((unsigned char *)(((unsigned char *)Stack_Pointer[6])-2));
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3318      	adds	r3, #24
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	3b02      	subs	r3, #2
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	73fb      	strb	r3, [r7, #15]

	switch(SVC_ID)
 8000994:	7bfb      	ldrb	r3, [r7, #15]
 8000996:	2b01      	cmp	r3, #1
 8000998:	dc02      	bgt.n	80009a0 <Os_SVC_Services+0x20>
 800099a:	2b00      	cmp	r3, #0
 800099c:	da03      	bge.n	80009a6 <Os_SVC_Services+0x26>

	case SVC_TaskWaitingTime:
		IsmailRTOS_UpdateSchedular();
		break;
	}
}
 800099e:	e01d      	b.n	80009dc <Os_SVC_Services+0x5c>
	switch(SVC_ID)
 80009a0:	2b02      	cmp	r3, #2
 80009a2:	d017      	beq.n	80009d4 <Os_SVC_Services+0x54>
}
 80009a4:	e01a      	b.n	80009dc <Os_SVC_Services+0x5c>
		IsmailRTOS_UpdateSchedular();
 80009a6:	f7ff ff39 	bl	800081c <IsmailRTOS_UpdateSchedular>
		if(OS_Control.OS_state == OS_Running)
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <Os_SVC_Services+0x64>)
 80009ac:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d112      	bne.n	80009da <Os_SVC_Services+0x5a>
			if(strcmp(OS_Control.CurrentTask->Task_Name,"Idle_Task") != 0)
 80009b4:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <Os_SVC_Services+0x64>)
 80009b6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009ba:	3318      	adds	r3, #24
 80009bc:	490a      	ldr	r1, [pc, #40]	; (80009e8 <Os_SVC_Services+0x68>)
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fbd6 	bl	8000170 <strcmp>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d007      	beq.n	80009da <Os_SVC_Services+0x5a>
				Decide_WhatNext();
 80009ca:	f7ff ff87 	bl	80008dc <Decide_WhatNext>
				Trigger_OS_PendSV();
 80009ce:	f7ff fce7 	bl	80003a0 <Trigger_OS_PendSV>
		break;
 80009d2:	e002      	b.n	80009da <Os_SVC_Services+0x5a>
		IsmailRTOS_UpdateSchedular();
 80009d4:	f7ff ff22 	bl	800081c <IsmailRTOS_UpdateSchedular>
		break;
 80009d8:	e000      	b.n	80009dc <Os_SVC_Services+0x5c>
		break;
 80009da:	bf00      	nop
}
 80009dc:	bf00      	nop
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000020 	.word	0x20000020
 80009e8:	0800101c 	.word	0x0800101c

080009ec <RTOS_OS_SVC_SET>:

void RTOS_OS_SVC_SET(SVC_ID_t SVC_ID)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
	switch(SVC_ID)
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	2b02      	cmp	r3, #2
 80009fa:	d00a      	beq.n	8000a12 <RTOS_OS_SVC_SET+0x26>
 80009fc:	2b02      	cmp	r3, #2
 80009fe:	dc0a      	bgt.n	8000a16 <RTOS_OS_SVC_SET+0x2a>
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d002      	beq.n	8000a0a <RTOS_OS_SVC_SET+0x1e>
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d002      	beq.n	8000a0e <RTOS_OS_SVC_SET+0x22>

	case SVC_TaskWaitingTime:
		__asm volatile("SVC #0x02");
		break;
	}
}
 8000a08:	e005      	b.n	8000a16 <RTOS_OS_SVC_SET+0x2a>
		__asm volatile("SVC #0x00");
 8000a0a:	df00      	svc	0
		break;
 8000a0c:	e003      	b.n	8000a16 <RTOS_OS_SVC_SET+0x2a>
		__asm volatile("SVC #0x01");
 8000a0e:	df01      	svc	1
		break;
 8000a10:	e001      	b.n	8000a16 <RTOS_OS_SVC_SET+0x2a>
		__asm volatile("SVC #0x02");
 8000a12:	df02      	svc	2
		break;
 8000a14:	bf00      	nop
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr

08000a20 <IsmailRTOS_ActivateTask>:


void IsmailRTOS_ActivateTask(task_Typedef* task)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	task->Task_state = Waiting;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2202      	movs	r2, #2
 8000a2c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	RTOS_OS_SVC_SET(SVC_Activatetask);
 8000a30:	2000      	movs	r0, #0
 8000a32:	f7ff ffdb 	bl	80009ec <RTOS_OS_SVC_SET>
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <IsmailRTOS_TaskWait>:
	task->Task_state = Suspend;
	RTOS_OS_SVC_SET(SVC_terminateTask);
}

void IsmailRTOS_TaskWait(unsigned int ticks,task_Typedef* task)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
 8000a46:	6039      	str	r1, [r7, #0]
	task->TimingWaiting.Blocking = Enable;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	task->TimingWaiting.Waiting_Ticks = ticks;
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	63da      	str	r2, [r3, #60]	; 0x3c

	task->Task_state = Suspend;
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	RTOS_OS_SVC_SET(SVC_terminateTask);
 8000a5e:	2001      	movs	r0, #1
 8000a60:	f7ff ffc4 	bl	80009ec <RTOS_OS_SVC_SET>
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <MYRTOS_Update_TasksWaitingTime>:

void MYRTOS_Update_TasksWaitingTime()
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
	for(int i = 0; i<OS_Control.number_ActiveTasks ;i++)
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	e031      	b.n	8000adc <MYRTOS_Update_TasksWaitingTime+0x70>
	{
		if(OS_Control.TaskTable[i]->Task_state == Suspend)
 8000a78:	4a1e      	ldr	r2, [pc, #120]	; (8000af4 <MYRTOS_Update_TasksWaitingTime+0x88>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a80:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d126      	bne.n	8000ad6 <MYRTOS_Update_TasksWaitingTime+0x6a>
		{
			if(OS_Control.TaskTable[i]->TimingWaiting.Blocking == Enable)
 8000a88:	4a1a      	ldr	r2, [pc, #104]	; (8000af4 <MYRTOS_Update_TasksWaitingTime+0x88>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d11e      	bne.n	8000ad6 <MYRTOS_Update_TasksWaitingTime+0x6a>
			{
				OS_Control.TaskTable[i]->TimingWaiting.Waiting_Ticks--;
 8000a98:	4a16      	ldr	r2, [pc, #88]	; (8000af4 <MYRTOS_Update_TasksWaitingTime+0x88>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000aa2:	3a01      	subs	r2, #1
 8000aa4:	63da      	str	r2, [r3, #60]	; 0x3c
				if(OS_Control.TaskTable[i]->TimingWaiting.Waiting_Ticks == 1)
 8000aa6:	4a13      	ldr	r2, [pc, #76]	; (8000af4 <MYRTOS_Update_TasksWaitingTime+0x88>)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d110      	bne.n	8000ad6 <MYRTOS_Update_TasksWaitingTime+0x6a>
				{
					OS_Control.TaskTable[i]->TimingWaiting.Blocking = Disable;
 8000ab4:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <MYRTOS_Update_TasksWaitingTime+0x88>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000abc:	2201      	movs	r2, #1
 8000abe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
					OS_Control.TaskTable[i]->Task_state = Waiting;
 8000ac2:	4a0c      	ldr	r2, [pc, #48]	; (8000af4 <MYRTOS_Update_TasksWaitingTime+0x88>)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aca:	2202      	movs	r2, #2
 8000acc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
					RTOS_OS_SVC_SET(SVC_TaskWaitingTime);
 8000ad0:	2002      	movs	r0, #2
 8000ad2:	f7ff ff8b 	bl	80009ec <RTOS_OS_SVC_SET>
	for(int i = 0; i<OS_Control.number_ActiveTasks ;i++)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <MYRTOS_Update_TasksWaitingTime+0x88>)
 8000ade:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d8c7      	bhi.n	8000a78 <MYRTOS_Update_TasksWaitingTime+0xc>
				}
			}
		}
	}
}
 8000ae8:	bf00      	nop
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000020 	.word	0x20000020

08000af8 <IsmailRTOS_STARTOS>:
void IsmailRTOS_STARTOS()
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	OS_Control.OS_state = OS_Running;
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <IsmailRTOS_STARTOS+0x54>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	//Set Default "Current Task =Idle Task"
	OS_Control.CurrentTask = &Idle_task;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <IsmailRTOS_STARTOS+0x54>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <IsmailRTOS_STARTOS+0x58>)
 8000b08:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	//activate it
	IsmailRTOS_ActivateTask(&Idle_task);
 8000b0c:	4810      	ldr	r0, [pc, #64]	; (8000b50 <IsmailRTOS_STARTOS+0x58>)
 8000b0e:	f7ff ff87 	bl	8000a20 <IsmailRTOS_ActivateTask>

	Start_ticker();
 8000b12:	f7ff fc53 	bl	80003bc <Start_ticker>

	OS_SET_PSP(OS_Control.CurrentTask->Current_PSP);
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <IsmailRTOS_STARTOS+0x54>)
 8000b18:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b1c:	695b      	ldr	r3, [r3, #20]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f380 8809 	msr	PSP, r0

	OS_SWITCH_SP_to_PSP;
 8000b24:	f3ef 8014 	mrs	r0, CONTROL
 8000b28:	f04f 0102 	mov.w	r1, #2
 8000b2c:	ea40 0001 	orr.w	r0, r0, r1
 8000b30:	f380 8814 	msr	CONTROL, r0

	OS_SWITCH_to_unprivileged;
 8000b34:	f3ef 8314 	mrs	r3, CONTROL
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	f383 8814 	msr	CONTROL, r3

	Idle_task.TaskEntry();
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <IsmailRTOS_STARTOS+0x58>)
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	4798      	blx	r3


}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000020 	.word	0x20000020
 8000b50:	20000370 	.word	0x20000370

08000b54 <Task_A>:
#include "Scheduler.h"

task_Typedef TaskA , TaskB , TaskC, TaskD;
unsigned char taskAled,taskBled,taskCled,taskDled;
void Task_A(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	//static int count = 0;
	while(1)
	{
		taskAled^=1;
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <Task_A+0x1c>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	f083 0301 	eor.w	r3, r3, #1
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <Task_A+0x1c>)
 8000b64:	701a      	strb	r2, [r3, #0]
		if(count == 30)
		{
			//IsmailRTOS_ActivateTask(&TaskD);
			count = 0;
		}*/
		IsmailRTOS_TaskWait(100, &TaskA);
 8000b66:	4903      	ldr	r1, [pc, #12]	; (8000b74 <Task_A+0x20>)
 8000b68:	2064      	movs	r0, #100	; 0x64
 8000b6a:	f7ff ff68 	bl	8000a3e <IsmailRTOS_TaskWait>
		taskAled^=1;
 8000b6e:	e7f3      	b.n	8000b58 <Task_A+0x4>
 8000b70:	200004b4 	.word	0x200004b4
 8000b74:	200003b4 	.word	0x200003b4

08000b78 <Task_B>:
	}
}

void Task_B(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	while(1)
	{
		taskBled^=1;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <Task_B+0x20>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	f083 0301 	eor.w	r3, r3, #1
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <Task_B+0x20>)
 8000b88:	701a      	strb	r2, [r3, #0]
		IsmailRTOS_TaskWait(300, &TaskB);
 8000b8a:	4904      	ldr	r1, [pc, #16]	; (8000b9c <Task_B+0x24>)
 8000b8c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b90:	f7ff ff55 	bl	8000a3e <IsmailRTOS_TaskWait>
		taskBled^=1;
 8000b94:	e7f2      	b.n	8000b7c <Task_B+0x4>
 8000b96:	bf00      	nop
 8000b98:	200004b5 	.word	0x200004b5
 8000b9c:	200003f4 	.word	0x200003f4

08000ba0 <Task_C>:
	}
}

void Task_C(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	while(1)
	{
		taskCled^=1;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <Task_C+0x20>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	f083 0301 	eor.w	r3, r3, #1
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <Task_C+0x20>)
 8000bb0:	701a      	strb	r2, [r3, #0]
		IsmailRTOS_TaskWait(500, &TaskC);
 8000bb2:	4904      	ldr	r1, [pc, #16]	; (8000bc4 <Task_C+0x24>)
 8000bb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bb8:	f7ff ff41 	bl	8000a3e <IsmailRTOS_TaskWait>
		taskCled^=1;
 8000bbc:	e7f2      	b.n	8000ba4 <Task_C+0x4>
 8000bbe:	bf00      	nop
 8000bc0:	200004b6 	.word	0x200004b6
 8000bc4:	20000434 	.word	0x20000434

08000bc8 <Task_D>:
	}
}

void Task_D(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	//static int count = 0;
	while(1)
	{
		taskDled^=1;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <Task_D+0x20>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	f083 0301 	eor.w	r3, r3, #1
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <Task_D+0x20>)
 8000bd8:	701a      	strb	r2, [r3, #0]
		/*if(count == 0xFFF)
		{
			//IsmailRTOS_DectivateTask(&TaskD);
			count = 0;
		}*/
		IsmailRTOS_TaskWait(1000, &TaskD);
 8000bda:	4904      	ldr	r1, [pc, #16]	; (8000bec <Task_D+0x24>)
 8000bdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000be0:	f7ff ff2d 	bl	8000a3e <IsmailRTOS_TaskWait>
		taskDled^=1;
 8000be4:	e7f2      	b.n	8000bcc <Task_D+0x4>
 8000be6:	bf00      	nop
 8000be8:	200004b7 	.word	0x200004b7
 8000bec:	20000474 	.word	0x20000474

08000bf0 <main>:
	}
}

int main(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
	IsmailRTOS_errorID errorID = Suspend;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	71fb      	strb	r3, [r7, #7]
	HW_init();
 8000bfa:	f7ff fbb1 	bl	8000360 <HW_init>

	if(IsmailRTOS_Init() != NoError)
 8000bfe:	f7ff fd1f 	bl	8000640 <IsmailRTOS_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d000      	beq.n	8000c0a <main+0x1a>
	{
		while(1);
 8000c08:	e7fe      	b.n	8000c08 <main+0x18>
	}

	TaskA.stacksize = 1024;
 8000c0a:	4b3f      	ldr	r3, [pc, #252]	; (8000d08 <main+0x118>)
 8000c0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c10:	601a      	str	r2, [r3, #0]
	TaskA.priority = 3;
 8000c12:	4b3d      	ldr	r3, [pc, #244]	; (8000d08 <main+0x118>)
 8000c14:	2203      	movs	r2, #3
 8000c16:	711a      	strb	r2, [r3, #4]
	TaskA.TaskEntry = Task_A;
 8000c18:	4b3b      	ldr	r3, [pc, #236]	; (8000d08 <main+0x118>)
 8000c1a:	4a3c      	ldr	r2, [pc, #240]	; (8000d0c <main+0x11c>)
 8000c1c:	609a      	str	r2, [r3, #8]
	strcpy(TaskA.Task_Name , "Task_A");
 8000c1e:	4b3c      	ldr	r3, [pc, #240]	; (8000d10 <main+0x120>)
 8000c20:	4a3c      	ldr	r2, [pc, #240]	; (8000d14 <main+0x124>)
 8000c22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c26:	6018      	str	r0, [r3, #0]
 8000c28:	3304      	adds	r3, #4
 8000c2a:	8019      	strh	r1, [r3, #0]
 8000c2c:	3302      	adds	r3, #2
 8000c2e:	0c0a      	lsrs	r2, r1, #16
 8000c30:	701a      	strb	r2, [r3, #0]

	TaskB.stacksize = 1024;
 8000c32:	4b39      	ldr	r3, [pc, #228]	; (8000d18 <main+0x128>)
 8000c34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c38:	601a      	str	r2, [r3, #0]
	TaskB.priority = 3;
 8000c3a:	4b37      	ldr	r3, [pc, #220]	; (8000d18 <main+0x128>)
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	711a      	strb	r2, [r3, #4]
	TaskB.TaskEntry = Task_B;
 8000c40:	4b35      	ldr	r3, [pc, #212]	; (8000d18 <main+0x128>)
 8000c42:	4a36      	ldr	r2, [pc, #216]	; (8000d1c <main+0x12c>)
 8000c44:	609a      	str	r2, [r3, #8]
	strcpy(TaskB.Task_Name , "Task_B");
 8000c46:	4b36      	ldr	r3, [pc, #216]	; (8000d20 <main+0x130>)
 8000c48:	4a36      	ldr	r2, [pc, #216]	; (8000d24 <main+0x134>)
 8000c4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c4e:	6018      	str	r0, [r3, #0]
 8000c50:	3304      	adds	r3, #4
 8000c52:	8019      	strh	r1, [r3, #0]
 8000c54:	3302      	adds	r3, #2
 8000c56:	0c0a      	lsrs	r2, r1, #16
 8000c58:	701a      	strb	r2, [r3, #0]

	TaskC.stacksize = 1024;
 8000c5a:	4b33      	ldr	r3, [pc, #204]	; (8000d28 <main+0x138>)
 8000c5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c60:	601a      	str	r2, [r3, #0]
	TaskC.priority = 3;
 8000c62:	4b31      	ldr	r3, [pc, #196]	; (8000d28 <main+0x138>)
 8000c64:	2203      	movs	r2, #3
 8000c66:	711a      	strb	r2, [r3, #4]
	TaskC.TaskEntry = Task_C;
 8000c68:	4b2f      	ldr	r3, [pc, #188]	; (8000d28 <main+0x138>)
 8000c6a:	4a30      	ldr	r2, [pc, #192]	; (8000d2c <main+0x13c>)
 8000c6c:	609a      	str	r2, [r3, #8]
	strcpy(TaskC.Task_Name , "Task_C");
 8000c6e:	4b30      	ldr	r3, [pc, #192]	; (8000d30 <main+0x140>)
 8000c70:	4a30      	ldr	r2, [pc, #192]	; (8000d34 <main+0x144>)
 8000c72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c76:	6018      	str	r0, [r3, #0]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	8019      	strh	r1, [r3, #0]
 8000c7c:	3302      	adds	r3, #2
 8000c7e:	0c0a      	lsrs	r2, r1, #16
 8000c80:	701a      	strb	r2, [r3, #0]

	TaskD.stacksize = 1024;
 8000c82:	4b2d      	ldr	r3, [pc, #180]	; (8000d38 <main+0x148>)
 8000c84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c88:	601a      	str	r2, [r3, #0]
	TaskD.priority = 1;
 8000c8a:	4b2b      	ldr	r3, [pc, #172]	; (8000d38 <main+0x148>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	711a      	strb	r2, [r3, #4]
	TaskD.TaskEntry = Task_D;
 8000c90:	4b29      	ldr	r3, [pc, #164]	; (8000d38 <main+0x148>)
 8000c92:	4a2a      	ldr	r2, [pc, #168]	; (8000d3c <main+0x14c>)
 8000c94:	609a      	str	r2, [r3, #8]
	strcpy(TaskD.Task_Name , "Task_D");
 8000c96:	4b2a      	ldr	r3, [pc, #168]	; (8000d40 <main+0x150>)
 8000c98:	4a2a      	ldr	r2, [pc, #168]	; (8000d44 <main+0x154>)
 8000c9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c9e:	6018      	str	r0, [r3, #0]
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	8019      	strh	r1, [r3, #0]
 8000ca4:	3302      	adds	r3, #2
 8000ca6:	0c0a      	lsrs	r2, r1, #16
 8000ca8:	701a      	strb	r2, [r3, #0]

	errorID += IsmailRTOS_CreateTask(&TaskA);
 8000caa:	4817      	ldr	r0, [pc, #92]	; (8000d08 <main+0x118>)
 8000cac:	f7ff fd30 	bl	8000710 <IsmailRTOS_CreateTask>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	71fb      	strb	r3, [r7, #7]
	errorID += IsmailRTOS_CreateTask(&TaskB);
 8000cba:	4817      	ldr	r0, [pc, #92]	; (8000d18 <main+0x128>)
 8000cbc:	f7ff fd28 	bl	8000710 <IsmailRTOS_CreateTask>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	71fb      	strb	r3, [r7, #7]
	errorID += IsmailRTOS_CreateTask(&TaskC);
 8000cca:	4817      	ldr	r0, [pc, #92]	; (8000d28 <main+0x138>)
 8000ccc:	f7ff fd20 	bl	8000710 <IsmailRTOS_CreateTask>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	71fb      	strb	r3, [r7, #7]
	errorID += IsmailRTOS_CreateTask(&TaskD);
 8000cda:	4817      	ldr	r0, [pc, #92]	; (8000d38 <main+0x148>)
 8000cdc:	f7ff fd18 	bl	8000710 <IsmailRTOS_CreateTask>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	71fb      	strb	r3, [r7, #7]

	IsmailRTOS_ActivateTask(&TaskA);
 8000cea:	4807      	ldr	r0, [pc, #28]	; (8000d08 <main+0x118>)
 8000cec:	f7ff fe98 	bl	8000a20 <IsmailRTOS_ActivateTask>
	IsmailRTOS_ActivateTask(&TaskB);
 8000cf0:	4809      	ldr	r0, [pc, #36]	; (8000d18 <main+0x128>)
 8000cf2:	f7ff fe95 	bl	8000a20 <IsmailRTOS_ActivateTask>
	IsmailRTOS_ActivateTask(&TaskC);
 8000cf6:	480c      	ldr	r0, [pc, #48]	; (8000d28 <main+0x138>)
 8000cf8:	f7ff fe92 	bl	8000a20 <IsmailRTOS_ActivateTask>
	IsmailRTOS_ActivateTask(&TaskD);
 8000cfc:	480e      	ldr	r0, [pc, #56]	; (8000d38 <main+0x148>)
 8000cfe:	f7ff fe8f 	bl	8000a20 <IsmailRTOS_ActivateTask>

	IsmailRTOS_STARTOS();
 8000d02:	f7ff fef9 	bl	8000af8 <IsmailRTOS_STARTOS>

	while(1)
 8000d06:	e7fe      	b.n	8000d06 <main+0x116>
 8000d08:	200003b4 	.word	0x200003b4
 8000d0c:	08000b55 	.word	0x08000b55
 8000d10:	200003cc 	.word	0x200003cc
 8000d14:	08001028 	.word	0x08001028
 8000d18:	200003f4 	.word	0x200003f4
 8000d1c:	08000b79 	.word	0x08000b79
 8000d20:	2000040c 	.word	0x2000040c
 8000d24:	08001030 	.word	0x08001030
 8000d28:	20000434 	.word	0x20000434
 8000d2c:	08000ba1 	.word	0x08000ba1
 8000d30:	2000044c 	.word	0x2000044c
 8000d34:	08001038 	.word	0x08001038
 8000d38:	20000474 	.word	0x20000474
 8000d3c:	08000bc9 	.word	0x08000bc9
 8000d40:	2000048c 	.word	0x2000048c
 8000d44:	08001040 	.word	0x08001040

08000d48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d48:	480d      	ldr	r0, [pc, #52]	; (8000d80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d4a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d4c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d50:	480c      	ldr	r0, [pc, #48]	; (8000d84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d52:	490d      	ldr	r1, [pc, #52]	; (8000d88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d54:	4a0d      	ldr	r2, [pc, #52]	; (8000d8c <LoopForever+0xe>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d58:	e002      	b.n	8000d60 <LoopCopyDataInit>

08000d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5e:	3304      	adds	r3, #4

08000d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d64:	d3f9      	bcc.n	8000d5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d66:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d68:	4c0a      	ldr	r4, [pc, #40]	; (8000d94 <LoopForever+0x16>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d6c:	e001      	b.n	8000d72 <LoopFillZerobss>

08000d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d70:	3204      	adds	r2, #4

08000d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d74:	d3fb      	bcc.n	8000d6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d76:	f000 f921 	bl	8000fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d7a:	f7ff ff39 	bl	8000bf0 <main>

08000d7e <LoopForever>:

LoopForever:
  b LoopForever
 8000d7e:	e7fe      	b.n	8000d7e <LoopForever>
  ldr   r0, =_estack
 8000d80:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d88:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000d8c:	08001050 	.word	0x08001050
  ldr r2, =_sbss
 8000d90:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000d94:	200004f4 	.word	0x200004f4

08000d98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d98:	e7fe      	b.n	8000d98 <ADC1_2_IRQHandler>
	...

08000d9c <EXTI0_IRQHandler>:
		break;
	}
}

void EXTI0_IRQHandler (void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit Pending register
	SET_BIT(EXTI->PR,EXTI0);
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <EXTI0_IRQHandler+0x1c>)
 8000da2:	695b      	ldr	r3, [r3, #20]
 8000da4:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <EXTI0_IRQHandler+0x1c>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	6153      	str	r3, [r2, #20]
	//EXTI->PR |= 1<<0;

	//IRQ callback
	call_back[EXTI0]();
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <EXTI0_IRQHandler+0x20>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4798      	blx	r3
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40010400 	.word	0x40010400
 8000dbc:	200004b8 	.word	0x200004b8

08000dc0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit Pending register
	SET_BIT(EXTI->PR,EXTI1);
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <EXTI1_IRQHandler+0x1c>)
 8000dc6:	695b      	ldr	r3, [r3, #20]
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <EXTI1_IRQHandler+0x1c>)
 8000dca:	f043 0302 	orr.w	r3, r3, #2
 8000dce:	6153      	str	r3, [r2, #20]
	//EXTI->PR |= 1<<1;

	//IRQ callback
	call_back[EXTI1]();
 8000dd0:	4b03      	ldr	r3, [pc, #12]	; (8000de0 <EXTI1_IRQHandler+0x20>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	4798      	blx	r3
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40010400 	.word	0x40010400
 8000de0:	200004b8 	.word	0x200004b8

08000de4 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler (void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit Pending register
	SET_BIT(EXTI->PR,EXTI2);
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <EXTI2_IRQHandler+0x1c>)
 8000dea:	695b      	ldr	r3, [r3, #20]
 8000dec:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <EXTI2_IRQHandler+0x1c>)
 8000dee:	f043 0304 	orr.w	r3, r3, #4
 8000df2:	6153      	str	r3, [r2, #20]
	//EXTI->PR |= 1<<2;

	//IRQ callback
	call_back[EXTI2]();
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <EXTI2_IRQHandler+0x20>)
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	4798      	blx	r3
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40010400 	.word	0x40010400
 8000e04:	200004b8 	.word	0x200004b8

08000e08 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler (void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit Pending register
	SET_BIT(EXTI->PR,EXTI3);
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <EXTI3_IRQHandler+0x1c>)
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <EXTI3_IRQHandler+0x1c>)
 8000e12:	f043 0308 	orr.w	r3, r3, #8
 8000e16:	6153      	str	r3, [r2, #20]
	//EXTI->PR |= 1<<3;

	//IRQ callback
	call_back[EXTI3]();
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <EXTI3_IRQHandler+0x20>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	4798      	blx	r3
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40010400 	.word	0x40010400
 8000e28:	200004b8 	.word	0x200004b8

08000e2c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler (void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit Pending register
	SET_BIT(EXTI->PR,EXTI4);
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <EXTI4_IRQHandler+0x1c>)
 8000e32:	695b      	ldr	r3, [r3, #20]
 8000e34:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <EXTI4_IRQHandler+0x1c>)
 8000e36:	f043 0310 	orr.w	r3, r3, #16
 8000e3a:	6153      	str	r3, [r2, #20]
	//EXTI->PR |= 1<<4;

	//IRQ callback
	call_back[EXTI4]();
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <EXTI4_IRQHandler+0x20>)
 8000e3e:	691b      	ldr	r3, [r3, #16]
 8000e40:	4798      	blx	r3
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40010400 	.word	0x40010400
 8000e4c:	200004b8 	.word	0x200004b8

08000e50 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler (void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5){SET_BIT(EXTI->PR,EXTI5);call_back[EXTI5]();}
 8000e54:	4b26      	ldr	r3, [pc, #152]	; (8000ef0 <EXTI9_5_IRQHandler+0xa0>)
 8000e56:	695b      	ldr	r3, [r3, #20]
 8000e58:	f003 0320 	and.w	r3, r3, #32
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d008      	beq.n	8000e72 <EXTI9_5_IRQHandler+0x22>
 8000e60:	4b23      	ldr	r3, [pc, #140]	; (8000ef0 <EXTI9_5_IRQHandler+0xa0>)
 8000e62:	695b      	ldr	r3, [r3, #20]
 8000e64:	4a22      	ldr	r2, [pc, #136]	; (8000ef0 <EXTI9_5_IRQHandler+0xa0>)
 8000e66:	f043 0320 	orr.w	r3, r3, #32
 8000e6a:	6153      	str	r3, [r2, #20]
 8000e6c:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <EXTI9_5_IRQHandler+0xa4>)
 8000e6e:	695b      	ldr	r3, [r3, #20]
 8000e70:	4798      	blx	r3
	if(EXTI->PR & 1<<6){SET_BIT(EXTI->PR,EXTI6);call_back[EXTI6]();}
 8000e72:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <EXTI9_5_IRQHandler+0xa0>)
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d008      	beq.n	8000e90 <EXTI9_5_IRQHandler+0x40>
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ef0 <EXTI9_5_IRQHandler+0xa0>)
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	4a1b      	ldr	r2, [pc, #108]	; (8000ef0 <EXTI9_5_IRQHandler+0xa0>)
 8000e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e88:	6153      	str	r3, [r2, #20]
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <EXTI9_5_IRQHandler+0xa4>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	4798      	blx	r3
	if(EXTI->PR & 1<<7){SET_BIT(EXTI->PR,EXTI7);call_back[EXTI7]();}
 8000e90:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <EXTI9_5_IRQHandler+0xa0>)
 8000e92:	695b      	ldr	r3, [r3, #20]
 8000e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d008      	beq.n	8000eae <EXTI9_5_IRQHandler+0x5e>
 8000e9c:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <EXTI9_5_IRQHandler+0xa0>)
 8000e9e:	695b      	ldr	r3, [r3, #20]
 8000ea0:	4a13      	ldr	r2, [pc, #76]	; (8000ef0 <EXTI9_5_IRQHandler+0xa0>)
 8000ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ea6:	6153      	str	r3, [r2, #20]
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <EXTI9_5_IRQHandler+0xa4>)
 8000eaa:	69db      	ldr	r3, [r3, #28]
 8000eac:	4798      	blx	r3
	if(EXTI->PR & 1<<8){SET_BIT(EXTI->PR,EXTI8);call_back[EXTI8]();}
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <EXTI9_5_IRQHandler+0xa0>)
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d008      	beq.n	8000ecc <EXTI9_5_IRQHandler+0x7c>
 8000eba:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <EXTI9_5_IRQHandler+0xa0>)
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	4a0c      	ldr	r2, [pc, #48]	; (8000ef0 <EXTI9_5_IRQHandler+0xa0>)
 8000ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec4:	6153      	str	r3, [r2, #20]
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <EXTI9_5_IRQHandler+0xa4>)
 8000ec8:	6a1b      	ldr	r3, [r3, #32]
 8000eca:	4798      	blx	r3
	if(EXTI->PR & 1<<9){SET_BIT(EXTI->PR,EXTI9);call_back[EXTI9]();}
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <EXTI9_5_IRQHandler+0xa0>)
 8000ece:	695b      	ldr	r3, [r3, #20]
 8000ed0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d008      	beq.n	8000eea <EXTI9_5_IRQHandler+0x9a>
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <EXTI9_5_IRQHandler+0xa0>)
 8000eda:	695b      	ldr	r3, [r3, #20]
 8000edc:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <EXTI9_5_IRQHandler+0xa0>)
 8000ede:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ee2:	6153      	str	r3, [r2, #20]
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <EXTI9_5_IRQHandler+0xa4>)
 8000ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee8:	4798      	blx	r3
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40010400 	.word	0x40010400
 8000ef4:	200004b8 	.word	0x200004b8

08000ef8 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10){SET_BIT(EXTI->PR,EXTI10);call_back[EXTI10]();}
 8000efc:	4b2d      	ldr	r3, [pc, #180]	; (8000fb4 <EXTI15_10_IRQHandler+0xbc>)
 8000efe:	695b      	ldr	r3, [r3, #20]
 8000f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d008      	beq.n	8000f1a <EXTI15_10_IRQHandler+0x22>
 8000f08:	4b2a      	ldr	r3, [pc, #168]	; (8000fb4 <EXTI15_10_IRQHandler+0xbc>)
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	4a29      	ldr	r2, [pc, #164]	; (8000fb4 <EXTI15_10_IRQHandler+0xbc>)
 8000f0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f12:	6153      	str	r3, [r2, #20]
 8000f14:	4b28      	ldr	r3, [pc, #160]	; (8000fb8 <EXTI15_10_IRQHandler+0xc0>)
 8000f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f18:	4798      	blx	r3
	if(EXTI->PR & 1<<11){SET_BIT(EXTI->PR,EXTI11);call_back[EXTI11]();}
 8000f1a:	4b26      	ldr	r3, [pc, #152]	; (8000fb4 <EXTI15_10_IRQHandler+0xbc>)
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d008      	beq.n	8000f38 <EXTI15_10_IRQHandler+0x40>
 8000f26:	4b23      	ldr	r3, [pc, #140]	; (8000fb4 <EXTI15_10_IRQHandler+0xbc>)
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	4a22      	ldr	r2, [pc, #136]	; (8000fb4 <EXTI15_10_IRQHandler+0xbc>)
 8000f2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f30:	6153      	str	r3, [r2, #20]
 8000f32:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <EXTI15_10_IRQHandler+0xc0>)
 8000f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f36:	4798      	blx	r3
	if(EXTI->PR & 1<<12){SET_BIT(EXTI->PR,EXTI12);call_back[EXTI12]();}
 8000f38:	4b1e      	ldr	r3, [pc, #120]	; (8000fb4 <EXTI15_10_IRQHandler+0xbc>)
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d008      	beq.n	8000f56 <EXTI15_10_IRQHandler+0x5e>
 8000f44:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <EXTI15_10_IRQHandler+0xbc>)
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	4a1a      	ldr	r2, [pc, #104]	; (8000fb4 <EXTI15_10_IRQHandler+0xbc>)
 8000f4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f4e:	6153      	str	r3, [r2, #20]
 8000f50:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <EXTI15_10_IRQHandler+0xc0>)
 8000f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f54:	4798      	blx	r3
	if(EXTI->PR & 1<<13){SET_BIT(EXTI->PR,EXTI13);call_back[EXTI13]();}
 8000f56:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <EXTI15_10_IRQHandler+0xbc>)
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d008      	beq.n	8000f74 <EXTI15_10_IRQHandler+0x7c>
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <EXTI15_10_IRQHandler+0xbc>)
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	4a13      	ldr	r2, [pc, #76]	; (8000fb4 <EXTI15_10_IRQHandler+0xbc>)
 8000f68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f6c:	6153      	str	r3, [r2, #20]
 8000f6e:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <EXTI15_10_IRQHandler+0xc0>)
 8000f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f72:	4798      	blx	r3
	if(EXTI->PR & 1<<14){SET_BIT(EXTI->PR,EXTI14);call_back[EXTI14]();}
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <EXTI15_10_IRQHandler+0xbc>)
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d008      	beq.n	8000f92 <EXTI15_10_IRQHandler+0x9a>
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <EXTI15_10_IRQHandler+0xbc>)
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <EXTI15_10_IRQHandler+0xbc>)
 8000f86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f8a:	6153      	str	r3, [r2, #20]
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <EXTI15_10_IRQHandler+0xc0>)
 8000f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f90:	4798      	blx	r3
	if(EXTI->PR & 1<<15){SET_BIT(EXTI->PR,EXTI15);call_back[EXTI15]();}
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <EXTI15_10_IRQHandler+0xbc>)
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d008      	beq.n	8000fb0 <EXTI15_10_IRQHandler+0xb8>
 8000f9e:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <EXTI15_10_IRQHandler+0xbc>)
 8000fa0:	695b      	ldr	r3, [r3, #20]
 8000fa2:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <EXTI15_10_IRQHandler+0xbc>)
 8000fa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fa8:	6153      	str	r3, [r2, #20]
 8000faa:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <EXTI15_10_IRQHandler+0xc0>)
 8000fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fae:	4798      	blx	r3
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40010400 	.word	0x40010400
 8000fb8:	200004b8 	.word	0x200004b8

08000fbc <__libc_init_array>:
 8000fbc:	b570      	push	{r4, r5, r6, lr}
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4d0c      	ldr	r5, [pc, #48]	; (8000ff4 <__libc_init_array+0x38>)
 8000fc2:	4c0d      	ldr	r4, [pc, #52]	; (8000ff8 <__libc_init_array+0x3c>)
 8000fc4:	1b64      	subs	r4, r4, r5
 8000fc6:	10a4      	asrs	r4, r4, #2
 8000fc8:	42a6      	cmp	r6, r4
 8000fca:	d109      	bne.n	8000fe0 <__libc_init_array+0x24>
 8000fcc:	f000 f81a 	bl	8001004 <_init>
 8000fd0:	2600      	movs	r6, #0
 8000fd2:	4d0a      	ldr	r5, [pc, #40]	; (8000ffc <__libc_init_array+0x40>)
 8000fd4:	4c0a      	ldr	r4, [pc, #40]	; (8001000 <__libc_init_array+0x44>)
 8000fd6:	1b64      	subs	r4, r4, r5
 8000fd8:	10a4      	asrs	r4, r4, #2
 8000fda:	42a6      	cmp	r6, r4
 8000fdc:	d105      	bne.n	8000fea <__libc_init_array+0x2e>
 8000fde:	bd70      	pop	{r4, r5, r6, pc}
 8000fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fe4:	4798      	blx	r3
 8000fe6:	3601      	adds	r6, #1
 8000fe8:	e7ee      	b.n	8000fc8 <__libc_init_array+0xc>
 8000fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fee:	4798      	blx	r3
 8000ff0:	3601      	adds	r6, #1
 8000ff2:	e7f2      	b.n	8000fda <__libc_init_array+0x1e>
 8000ff4:	08001048 	.word	0x08001048
 8000ff8:	08001048 	.word	0x08001048
 8000ffc:	08001048 	.word	0x08001048
 8001000:	0800104c 	.word	0x0800104c

08001004 <_init>:
 8001004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001006:	bf00      	nop
 8001008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800100a:	bc08      	pop	{r3}
 800100c:	469e      	mov	lr, r3
 800100e:	4770      	bx	lr

08001010 <_fini>:
 8001010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001012:	bf00      	nop
 8001014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001016:	bc08      	pop	{r3}
 8001018:	469e      	mov	lr, r3
 800101a:	4770      	bx	lr
