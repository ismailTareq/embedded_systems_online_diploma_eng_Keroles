
Drivers.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001074  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080011a4  080011a4  000111a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011f0  080011f0  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080011f0  080011f0  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011f0  080011f0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011f0  080011f0  000111f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011f4  080011f4  000111f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080011f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000564  20000008  08001200  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  08001200  0002056c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001d5c  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000008d8  00000000  00000000  00021dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00000cdc  00000000  00000000  000226a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000240  00000000  00000000  00023388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000001e8  00000000  00000000  000235c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001c0d  00000000  00000000  000237b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00002f0b  00000000  00000000  000253bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000fc5f  00000000  00000000  000282c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000071c  00000000  00000000  00037f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	0800118c 	.word	0x0800118c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	0800118c 	.word	0x0800118c

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <FIFO_init>:
 *  Created on: Aug 24, 2024
 *      Author: ismail
 */
#include "Circular_FIFO.h"

Buffer_status FIFO_init (FIFO_Buf_t* fifo,element_type* buff , unsigned int length){
 8000184:	b480      	push	{r7}
 8000186:	b085      	sub	sp, #20
 8000188:	af00      	add	r7, sp, #0
 800018a:	60f8      	str	r0, [r7, #12]
 800018c:	60b9      	str	r1, [r7, #8]
 800018e:	607a      	str	r2, [r7, #4]

	if(!buff )
 8000190:	68bb      	ldr	r3, [r7, #8]
 8000192:	2b00      	cmp	r3, #0
 8000194:	d101      	bne.n	800019a <FIFO_init+0x16>
		return FIFO_NULL;
 8000196:	2303      	movs	r3, #3
 8000198:	e011      	b.n	80001be <FIFO_init+0x3a>

	fifo->base = buff ;
 800019a:	68fb      	ldr	r3, [r7, #12]
 800019c:	68ba      	ldr	r2, [r7, #8]
 800019e:	60da      	str	r2, [r3, #12]
	fifo->head = fifo->base ;
 80001a0:	68fb      	ldr	r3, [r7, #12]
 80001a2:	68da      	ldr	r2, [r3, #12]
 80001a4:	68fb      	ldr	r3, [r7, #12]
 80001a6:	605a      	str	r2, [r3, #4]
	fifo->tail = fifo->base ;
 80001a8:	68fb      	ldr	r3, [r7, #12]
 80001aa:	68da      	ldr	r2, [r3, #12]
 80001ac:	68fb      	ldr	r3, [r7, #12]
 80001ae:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 80001b0:	68fb      	ldr	r3, [r7, #12]
 80001b2:	687a      	ldr	r2, [r7, #4]
 80001b4:	611a      	str	r2, [r3, #16]
	fifo->counter=0;
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	2200      	movs	r2, #0
 80001ba:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 80001bc:	2300      	movs	r3, #0

}
 80001be:	4618      	mov	r0, r3
 80001c0:	3714      	adds	r7, #20
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr

080001c8 <FIFO_enqueue>:

/* *********************************** */

Buffer_status FIFO_enqueue (FIFO_Buf_t* fifo,element_type item){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]

	/* fifo null*/

	if (!fifo->base || !fifo->length)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	68db      	ldr	r3, [r3, #12]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d003      	beq.n	80001e2 <FIFO_enqueue+0x1a>
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	691b      	ldr	r3, [r3, #16]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d101      	bne.n	80001e6 <FIFO_enqueue+0x1e>
		return FIFO_NULL;
 80001e2:	2303      	movs	r3, #3
 80001e4:	e02d      	b.n	8000242 <FIFO_enqueue+0x7a>
	/*fifo is full*/

	/* fifo full */
	if ((fifo->head == fifo->tail) && (fifo->counter == fifo->length))
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	685a      	ldr	r2, [r3, #4]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	689b      	ldr	r3, [r3, #8]
 80001ee:	429a      	cmp	r2, r3
 80001f0:	d107      	bne.n	8000202 <FIFO_enqueue+0x3a>
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	681a      	ldr	r2, [r3, #0]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	691b      	ldr	r3, [r3, #16]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d101      	bne.n	8000202 <FIFO_enqueue+0x3a>
		return FIFO_FULL;
 80001fe:	2301      	movs	r3, #1
 8000200:	e01f      	b.n	8000242 <FIFO_enqueue+0x7a>

	*(fifo->tail)=item;
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	689b      	ldr	r3, [r3, #8]
 8000206:	683a      	ldr	r2, [r7, #0]
 8000208:	601a      	str	r2, [r3, #0]
	fifo->counter++;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	1c5a      	adds	r2, r3, #1
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	601a      	str	r2, [r3, #0]

	/*for circular fifo again */

	/* circular enqueue */
	if (fifo->tail == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	689b      	ldr	r3, [r3, #8]
 8000218:	687a      	ldr	r2, [r7, #4]
 800021a:	68d2      	ldr	r2, [r2, #12]
 800021c:	4611      	mov	r1, r2
 800021e:	687a      	ldr	r2, [r7, #4]
 8000220:	6912      	ldr	r2, [r2, #16]
 8000222:	0092      	lsls	r2, r2, #2
 8000224:	440a      	add	r2, r1
 8000226:	3a04      	subs	r2, #4
 8000228:	4293      	cmp	r3, r2
 800022a:	d104      	bne.n	8000236 <FIFO_enqueue+0x6e>
		fifo->tail = fifo->base;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	68da      	ldr	r2, [r3, #12]
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	e004      	b.n	8000240 <FIFO_enqueue+0x78>
	else
		fifo->tail++;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	689b      	ldr	r3, [r3, #8]
 800023a:	1d1a      	adds	r2, r3, #4
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	609a      	str	r2, [r3, #8]

	return FIFO_NO_ERROR;
 8000240:	2300      	movs	r3, #0


}
 8000242:	4618      	mov	r0, r3
 8000244:	370c      	adds	r7, #12
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr

0800024c <FIFO_dequeue>:

/* *********************************** */

Buffer_status FIFO_dequeue (FIFO_Buf_t* fifo, element_type* item){
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
 8000254:	6039      	str	r1, [r7, #0]
	/* check fifo valid */
	if (!fifo->base || !fifo->length)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	68db      	ldr	r3, [r3, #12]
 800025a:	2b00      	cmp	r3, #0
 800025c:	d003      	beq.n	8000266 <FIFO_dequeue+0x1a>
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	691b      	ldr	r3, [r3, #16]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d101      	bne.n	800026a <FIFO_dequeue+0x1e>
		return FIFO_NULL;
 8000266:	2303      	movs	r3, #3
 8000268:	e028      	b.n	80002bc <FIFO_dequeue+0x70>

	/* fifo empty */
	if (fifo->head == fifo->tail)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	685a      	ldr	r2, [r3, #4]
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	689b      	ldr	r3, [r3, #8]
 8000272:	429a      	cmp	r2, r3
 8000274:	d101      	bne.n	800027a <FIFO_dequeue+0x2e>
		return FIFO_EMPTY;
 8000276:	2302      	movs	r3, #2
 8000278:	e020      	b.n	80002bc <FIFO_dequeue+0x70>



	*item = *(fifo->head);
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	685b      	ldr	r3, [r3, #4]
 800027e:	681a      	ldr	r2, [r3, #0]
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	601a      	str	r2, [r3, #0]
	fifo->counter--;
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1e5a      	subs	r2, r3, #1
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	601a      	str	r2, [r3, #0]

	/* circular dequeue */
	if (fifo->head == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	68d2      	ldr	r2, [r2, #12]
 8000296:	4611      	mov	r1, r2
 8000298:	687a      	ldr	r2, [r7, #4]
 800029a:	6912      	ldr	r2, [r2, #16]
 800029c:	0092      	lsls	r2, r2, #2
 800029e:	440a      	add	r2, r1
 80002a0:	3a04      	subs	r2, #4
 80002a2:	4293      	cmp	r3, r2
 80002a4:	d104      	bne.n	80002b0 <FIFO_dequeue+0x64>
		fifo->head = fifo->base;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	68da      	ldr	r2, [r3, #12]
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	e004      	b.n	80002ba <FIFO_dequeue+0x6e>
	else
		fifo->head++;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	685b      	ldr	r3, [r3, #4]
 80002b4:	1d1a      	adds	r2, r3, #4
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	605a      	str	r2, [r3, #4]

	return FIFO_NO_ERROR;
 80002ba:	2300      	movs	r3, #0
}
 80002bc:	4618      	mov	r0, r3
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr
	...

080002c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	6039      	str	r1, [r7, #0]
 80002d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	db0a      	blt.n	80002f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	b2da      	uxtb	r2, r3
 80002e0:	490c      	ldr	r1, [pc, #48]	; (8000314 <__NVIC_SetPriority+0x4c>)
 80002e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e6:	0152      	lsls	r2, r2, #5
 80002e8:	b2d2      	uxtb	r2, r2
 80002ea:	440b      	add	r3, r1
 80002ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002f0:	e00a      	b.n	8000308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	b2da      	uxtb	r2, r3
 80002f6:	4908      	ldr	r1, [pc, #32]	; (8000318 <__NVIC_SetPriority+0x50>)
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	f003 030f 	and.w	r3, r3, #15
 80002fe:	3b04      	subs	r3, #4
 8000300:	0152      	lsls	r2, r2, #5
 8000302:	b2d2      	uxtb	r2, r2
 8000304:	440b      	add	r3, r1
 8000306:	761a      	strb	r2, [r3, #24]
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	e000e100 	.word	0xe000e100
 8000318:	e000ed00 	.word	0xe000ed00

0800031c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	3b01      	subs	r3, #1
 8000328:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800032c:	d301      	bcc.n	8000332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800032e:	2301      	movs	r3, #1
 8000330:	e00f      	b.n	8000352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000332:	4a0a      	ldr	r2, [pc, #40]	; (800035c <SysTick_Config+0x40>)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	3b01      	subs	r3, #1
 8000338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800033a:	2107      	movs	r1, #7
 800033c:	f04f 30ff 	mov.w	r0, #4294967295
 8000340:	f7ff ffc2 	bl	80002c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000344:	4b05      	ldr	r3, [pc, #20]	; (800035c <SysTick_Config+0x40>)
 8000346:	2200      	movs	r2, #0
 8000348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800034a:	4b04      	ldr	r3, [pc, #16]	; (800035c <SysTick_Config+0x40>)
 800034c:	2207      	movs	r2, #7
 800034e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000350:	2300      	movs	r3, #0
}
 8000352:	4618      	mov	r0, r3
 8000354:	3708      	adds	r7, #8
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	e000e010 	.word	0xe000e010

08000360 <HW_init>:
 */
#include "CortexMX_OS_porting.h"

unsigned char systickled;
void HW_init()
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	// 1 count -> 0.125 us
	// X count -> 1 ms
	// X = 8000 count

	//decrease PendSV  interrupt priority to be  smaller than or equal  SySTICK Timer
	__NVIC_SetPriority(PendSV_IRQn, 15) ;//make it 15 instead of 14
 8000364:	210f      	movs	r1, #15
 8000366:	f06f 0001 	mvn.w	r0, #1
 800036a:	f7ff ffad 	bl	80002c8 <__NVIC_SetPriority>
}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}

08000372 <HardFault_Handler>:


void HardFault_Handler (void)
{
 8000372:	b480      	push	{r7}
 8000374:	af00      	add	r7, sp, #0
	while(1) ;
 8000376:	e7fe      	b.n	8000376 <HardFault_Handler+0x4>

08000378 <MemManage_Handler>:
}
void MemManage_Handler (void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
	while(1) ;
 800037c:	e7fe      	b.n	800037c <MemManage_Handler+0x4>

0800037e <BusFault_Handler>:
}
void BusFault_Handler(void)
{
 800037e:	b480      	push	{r7}
 8000380:	af00      	add	r7, sp, #0
	while(1) ;
 8000382:	e7fe      	b.n	8000382 <BusFault_Handler+0x4>

08000384 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
	while(1) ;
 8000388:	e7fe      	b.n	8000388 <UsageFault_Handler+0x4>

0800038a <SVC_Handler>:
}

__attribute((naked)) void SVC_Handler()
{
	__asm("tst lr,#4 \n\t"
 800038a:	f01e 0f04 	tst.w	lr, #4
 800038e:	bf0c      	ite	eq
 8000390:	f3ef 8008 	mrseq	r0, MSP
 8000394:	f3ef 8009 	mrsne	r0, PSP
 8000398:	f000 baf8 	b.w	800098c <Os_SVC_Services>
			"ITE EQ \n\t"
			"mrseq r0,MSP \n\t"
			"mrsne r0,PSP \n\t"
			"B Os_SVC_Services");
}
 800039c:	bf00      	nop
	...

080003a0 <Trigger_OS_PendSV>:

void Trigger_OS_PendSV()
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80003a4:	4b04      	ldr	r3, [pc, #16]	; (80003b8 <Trigger_OS_PendSV+0x18>)
 80003a6:	685b      	ldr	r3, [r3, #4]
 80003a8:	4a03      	ldr	r2, [pc, #12]	; (80003b8 <Trigger_OS_PendSV+0x18>)
 80003aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003ae:	6053      	str	r3, [r2, #4]
}
 80003b0:	bf00      	nop
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr
 80003b8:	e000ed00 	.word	0xe000ed00

080003bc <Start_ticker>:

void Start_ticker()
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
		//	8 MHZ
		//	1 count -> 0.125 us
		//	X count -> 1 ms
		//	X = 8000 Count

		 SysTick_Config(8000);
 80003c0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80003c4:	f7ff ffaa 	bl	800031c <SysTick_Config>
}
 80003c8:	bf00      	nop
 80003ca:	bd80      	pop	{r7, pc}

080003cc <SysTick_Handler>:

void SysTick_Handler(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	systickled^=1;
 80003d0:	4b07      	ldr	r3, [pc, #28]	; (80003f0 <SysTick_Handler+0x24>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	f083 0301 	eor.w	r3, r3, #1
 80003d8:	b2da      	uxtb	r2, r3
 80003da:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <SysTick_Handler+0x24>)
 80003dc:	701a      	strb	r2, [r3, #0]

	MYRTOS_Update_TasksWaitingTime();
 80003de:	f000 fb43 	bl	8000a68 <MYRTOS_Update_TasksWaitingTime>
	//Determine current and next
	Decide_WhatNext();
 80003e2:	f000 fa81 	bl	80008e8 <Decide_WhatNext>
	//Switch Context and restore
	Trigger_OS_PendSV();
 80003e6:	f7ff ffdb 	bl	80003a0 <Trigger_OS_PendSV>

}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	20000024 	.word	0x20000024

080003f4 <PendSV_Handler>:
__attribute ((naked)) void PendSV_Handler(void)
{
	//Save the Context of the Current Task

	//Get the Current Task "Current PSP from CPU register" as CPU Push XPSR,.....,R0
	OS_GET_PSP(OS_Control.CurrentTask->Current_PSP);
 80003f4:	4b6f      	ldr	r3, [pc, #444]	; (80005b4 <PendSV_Handler+0x1c0>)
 80003f6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80003fa:	f3ef 8009 	mrs	r0, PSP
 80003fe:	4602      	mov	r2, r0
 8000400:	615a      	str	r2, [r3, #20]

	//using this Current_PSP (Pointer) to store (R4 to R11)
	OS_Control.CurrentTask->Current_PSP--;
 8000402:	4b6c      	ldr	r3, [pc, #432]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000404:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000408:	695a      	ldr	r2, [r3, #20]
 800040a:	3a04      	subs	r2, #4
 800040c:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r4" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 800040e:	4b69      	ldr	r3, [pc, #420]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000410:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	4622      	mov	r2, r4
 8000418:	601a      	str	r2, [r3, #0]

	OS_Control.CurrentTask->Current_PSP--;
 800041a:	4b66      	ldr	r3, [pc, #408]	; (80005b4 <PendSV_Handler+0x1c0>)
 800041c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000420:	695a      	ldr	r2, [r3, #20]
 8000422:	3a04      	subs	r2, #4
 8000424:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r5" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000426:	4b63      	ldr	r3, [pc, #396]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000428:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	462a      	mov	r2, r5
 8000430:	601a      	str	r2, [r3, #0]

	OS_Control.CurrentTask->Current_PSP--;
 8000432:	4b60      	ldr	r3, [pc, #384]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000434:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000438:	695a      	ldr	r2, [r3, #20]
 800043a:	3a04      	subs	r2, #4
 800043c:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r6" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 800043e:	4b5d      	ldr	r3, [pc, #372]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000440:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	4632      	mov	r2, r6
 8000448:	601a      	str	r2, [r3, #0]

	OS_Control.CurrentTask->Current_PSP--;
 800044a:	4b5a      	ldr	r3, [pc, #360]	; (80005b4 <PendSV_Handler+0x1c0>)
 800044c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000450:	695a      	ldr	r2, [r3, #20]
 8000452:	3a04      	subs	r2, #4
 8000454:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r7" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000456:	4b57      	ldr	r3, [pc, #348]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000458:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	463a      	mov	r2, r7
 8000460:	601a      	str	r2, [r3, #0]

	OS_Control.CurrentTask->Current_PSP--;
 8000462:	4b54      	ldr	r3, [pc, #336]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000464:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000468:	695a      	ldr	r2, [r3, #20]
 800046a:	3a04      	subs	r2, #4
 800046c:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r8" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 800046e:	4b51      	ldr	r3, [pc, #324]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000470:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4642      	mov	r2, r8
 8000478:	601a      	str	r2, [r3, #0]

	OS_Control.CurrentTask->Current_PSP--;
 800047a:	4b4e      	ldr	r3, [pc, #312]	; (80005b4 <PendSV_Handler+0x1c0>)
 800047c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000480:	695a      	ldr	r2, [r3, #20]
 8000482:	3a04      	subs	r2, #4
 8000484:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r9" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000486:	4b4b      	ldr	r3, [pc, #300]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000488:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	464a      	mov	r2, r9
 8000490:	601a      	str	r2, [r3, #0]

	OS_Control.CurrentTask->Current_PSP--;
 8000492:	4b48      	ldr	r3, [pc, #288]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000494:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000498:	695a      	ldr	r2, [r3, #20]
 800049a:	3a04      	subs	r2, #4
 800049c:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r10" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 800049e:	4b45      	ldr	r3, [pc, #276]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4652      	mov	r2, sl
 80004a8:	601a      	str	r2, [r3, #0]

	OS_Control.CurrentTask->Current_PSP--;
 80004aa:	4b42      	ldr	r3, [pc, #264]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004ac:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004b0:	695a      	ldr	r2, [r3, #20]
 80004b2:	3a04      	subs	r2, #4
 80004b4:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r11" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 80004b6:	4b3f      	ldr	r3, [pc, #252]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004b8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	465a      	mov	r2, fp
 80004c0:	601a      	str	r2, [r3, #0]
	//save the current Value of PSP
	//already saved in Current_PSP

	///////////////////////////////////////////////////////////
	//Restore the Context of the Next Task
	if(OS_Control.NextTask != NULL)
 80004c2:	4b3c      	ldr	r3, [pc, #240]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004c4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d009      	beq.n	80004e0 <PendSV_Handler+0xec>
	{
		OS_Control.CurrentTask = OS_Control.NextTask;
 80004cc:	4b39      	ldr	r3, [pc, #228]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004ce:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80004d2:	4a38      	ldr	r2, [pc, #224]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004d4:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
		OS_Control.NextTask = NULL;
 80004d8:	4b36      	ldr	r3, [pc, #216]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004da:	2200      	movs	r2, #0
 80004dc:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	}

	//pop
	__asm volatile("mov r11,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 80004e0:	4b34      	ldr	r3, [pc, #208]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004e2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004e6:	695b      	ldr	r3, [r3, #20]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	469b      	mov	fp, r3
	OS_Control.CurrentTask->Current_PSP++;
 80004ec:	4b31      	ldr	r3, [pc, #196]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004ee:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004f2:	695a      	ldr	r2, [r3, #20]
 80004f4:	3204      	adds	r2, #4
 80004f6:	615a      	str	r2, [r3, #20]

	__asm volatile("mov r10,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 80004f8:	4b2e      	ldr	r3, [pc, #184]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004fa:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004fe:	695b      	ldr	r3, [r3, #20]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	469a      	mov	sl, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000504:	4b2b      	ldr	r3, [pc, #172]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000506:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800050a:	695a      	ldr	r2, [r3, #20]
 800050c:	3204      	adds	r2, #4
 800050e:	615a      	str	r2, [r3, #20]

	__asm volatile("mov r9,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000510:	4b28      	ldr	r3, [pc, #160]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000512:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000516:	695b      	ldr	r3, [r3, #20]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4699      	mov	r9, r3
	OS_Control.CurrentTask->Current_PSP++;
 800051c:	4b25      	ldr	r3, [pc, #148]	; (80005b4 <PendSV_Handler+0x1c0>)
 800051e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000522:	695a      	ldr	r2, [r3, #20]
 8000524:	3204      	adds	r2, #4
 8000526:	615a      	str	r2, [r3, #20]

	__asm volatile("mov r8,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000528:	4b22      	ldr	r3, [pc, #136]	; (80005b4 <PendSV_Handler+0x1c0>)
 800052a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800052e:	695b      	ldr	r3, [r3, #20]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4698      	mov	r8, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000534:	4b1f      	ldr	r3, [pc, #124]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000536:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800053a:	695a      	ldr	r2, [r3, #20]
 800053c:	3204      	adds	r2, #4
 800053e:	615a      	str	r2, [r3, #20]

	__asm volatile("mov r7,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000540:	4b1c      	ldr	r3, [pc, #112]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000542:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000546:	695b      	ldr	r3, [r3, #20]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	461f      	mov	r7, r3
	OS_Control.CurrentTask->Current_PSP++;
 800054c:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <PendSV_Handler+0x1c0>)
 800054e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000552:	695a      	ldr	r2, [r3, #20]
 8000554:	3204      	adds	r2, #4
 8000556:	615a      	str	r2, [r3, #20]

	__asm volatile("mov r6,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000558:	4b16      	ldr	r3, [pc, #88]	; (80005b4 <PendSV_Handler+0x1c0>)
 800055a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800055e:	695b      	ldr	r3, [r3, #20]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	461e      	mov	r6, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000564:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000566:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800056a:	695a      	ldr	r2, [r3, #20]
 800056c:	3204      	adds	r2, #4
 800056e:	615a      	str	r2, [r3, #20]

	__asm volatile("mov r5,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000570:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000572:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000576:	695b      	ldr	r3, [r3, #20]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	461d      	mov	r5, r3
	OS_Control.CurrentTask->Current_PSP++;
 800057c:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <PendSV_Handler+0x1c0>)
 800057e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000582:	695a      	ldr	r2, [r3, #20]
 8000584:	3204      	adds	r2, #4
 8000586:	615a      	str	r2, [r3, #20]

	__asm volatile("mov r4,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <PendSV_Handler+0x1c0>)
 800058a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	461c      	mov	r4, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000594:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000596:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800059a:	695a      	ldr	r2, [r3, #20]
 800059c:	3204      	adds	r2, #4
 800059e:	615a      	str	r2, [r3, #20]

	//update PSP and exit
	OS_SET_PSP(OS_Control.CurrentTask->Current_PSP);
 80005a0:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <PendSV_Handler+0x1c0>)
 80005a2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f380 8809 	msr	PSP, r0
	__asm volatile("BX LR");
 80005ae:	4770      	bx	lr
}
 80005b0:	bf00      	nop
 80005b2:	bf00      	nop
 80005b4:	20000028 	.word	0x20000028

080005b8 <IsmailRTOS_IdleTask>:

unsigned char IdleTaskLed ;
void IsmailRTOS_IdleTask(void){
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
	while(1)
	{
		IdleTaskLed ^= 1;
 80005bc:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <IsmailRTOS_IdleTask+0x18>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	f083 0301 	eor.w	r3, r3, #1
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	4b02      	ldr	r3, [pc, #8]	; (80005d0 <IsmailRTOS_IdleTask+0x18>)
 80005c8:	701a      	strb	r2, [r3, #0]
		__asm("wfe");
 80005ca:	bf20      	wfe
		IdleTaskLed ^= 1;
 80005cc:	e7f6      	b.n	80005bc <IsmailRTOS_IdleTask+0x4>
 80005ce:	bf00      	nop
 80005d0:	200003b8 	.word	0x200003b8

080005d4 <IsmailRTOS_Create_IdleTask>:
	}
}

void IsmailRTOS_Create_IdleTask(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
	strcpy(Idle_task.Task_Name,"Idle_Task");
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <IsmailRTOS_Create_IdleTask+0x2c>)
 80005da:	4a0a      	ldr	r2, [pc, #40]	; (8000604 <IsmailRTOS_Create_IdleTask+0x30>)
 80005dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80005de:	c303      	stmia	r3!, {r0, r1}
 80005e0:	801a      	strh	r2, [r3, #0]
	Idle_task.priority = 255;
 80005e2:	4b09      	ldr	r3, [pc, #36]	; (8000608 <IsmailRTOS_Create_IdleTask+0x34>)
 80005e4:	22ff      	movs	r2, #255	; 0xff
 80005e6:	711a      	strb	r2, [r3, #4]
	Idle_task.TaskEntry = IsmailRTOS_IdleTask;
 80005e8:	4b07      	ldr	r3, [pc, #28]	; (8000608 <IsmailRTOS_Create_IdleTask+0x34>)
 80005ea:	4a08      	ldr	r2, [pc, #32]	; (800060c <IsmailRTOS_Create_IdleTask+0x38>)
 80005ec:	609a      	str	r2, [r3, #8]
	Idle_task.stacksize = 300;
 80005ee:	4b06      	ldr	r3, [pc, #24]	; (8000608 <IsmailRTOS_Create_IdleTask+0x34>)
 80005f0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80005f4:	601a      	str	r2, [r3, #0]
}
 80005f6:	bf00      	nop
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bc80      	pop	{r7}
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	20000390 	.word	0x20000390
 8000604:	080011a4 	.word	0x080011a4
 8000608:	20000378 	.word	0x20000378
 800060c:	080005b9 	.word	0x080005b9

08000610 <IsmailRTOS_Create_MainStack>:


void IsmailRTOS_Create_MainStack(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
	OS_Control.S_MSP_Task = &_estack;
 8000614:	4a0b      	ldr	r2, [pc, #44]	; (8000644 <IsmailRTOS_Create_MainStack+0x34>)
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <IsmailRTOS_Create_MainStack+0x38>)
 8000618:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control.E_MSP_Task = OS_Control.S_MSP_Task - MainStackSize;
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <IsmailRTOS_Create_MainStack+0x38>)
 800061e:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000622:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 8000626:	4a08      	ldr	r2, [pc, #32]	; (8000648 <IsmailRTOS_Create_MainStack+0x38>)
 8000628:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	OS_Control.PSP_Locator = OS_Control.E_MSP_Task - 8;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <IsmailRTOS_Create_MainStack+0x38>)
 800062e:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000632:	3b08      	subs	r3, #8
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <IsmailRTOS_Create_MainStack+0x38>)
 8000636:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20002800 	.word	0x20002800
 8000648:	20000028 	.word	0x20000028

0800064c <IsmailRTOS_Init>:

IsmailRTOS_errorID IsmailRTOS_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
	IsmailRTOS_errorID ErrorID = NoError;
 8000652:	2300      	movs	r3, #0
 8000654:	71fb      	strb	r3, [r7, #7]

	//1. OS state >> suspend
	OS_Control.OS_state = OS_Suspend;
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <IsmailRTOS_Init+0x4c>)
 8000658:	2200      	movs	r2, #0
 800065a:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//2. initialize the main stack
	IsmailRTOS_Create_MainStack();
 800065e:	f7ff ffd7 	bl	8000610 <IsmailRTOS_Create_MainStack>
	//3. Create Ready Queue
	if(FIFO_init(&ReadyQueue, Ready_table, 100) != FIFO_NO_ERROR)
 8000662:	2264      	movs	r2, #100	; 0x64
 8000664:	490d      	ldr	r1, [pc, #52]	; (800069c <IsmailRTOS_Init+0x50>)
 8000666:	480e      	ldr	r0, [pc, #56]	; (80006a0 <IsmailRTOS_Init+0x54>)
 8000668:	f7ff fd8c 	bl	8000184 <FIFO_init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d002      	beq.n	8000678 <IsmailRTOS_Init+0x2c>
	{
		ErrorID += Ready_Queue_Init_error ;
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	3301      	adds	r3, #1
 8000676:	71fb      	strb	r3, [r7, #7]
	}
	//4. Create IDLE task
	IsmailRTOS_Create_IdleTask();
 8000678:	f7ff ffac 	bl	80005d4 <IsmailRTOS_Create_IdleTask>

	//5. create task stack
	ErrorID += IsmailRTOS_CreateTask(&Idle_task);
 800067c:	4809      	ldr	r0, [pc, #36]	; (80006a4 <IsmailRTOS_Init+0x58>)
 800067e:	f000 f84d 	bl	800071c <IsmailRTOS_CreateTask>
 8000682:	4603      	mov	r3, r0
 8000684:	461a      	mov	r2, r3
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	4413      	add	r3, r2
 800068a:	71fb      	strb	r3, [r7, #7]

	return ErrorID;
 800068c:	79fb      	ldrb	r3, [r7, #7]
}
 800068e:	4618      	mov	r0, r3
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000028 	.word	0x20000028
 800069c:	200001e8 	.word	0x200001e8
 80006a0:	200001d4 	.word	0x200001d4
 80006a4:	20000378 	.word	0x20000378

080006a8 <IsmailRTOS_CreateTask_Stack>:

void IsmailRTOS_CreateTask_Stack(task_Typedef* task)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	 * r2
	 * r1
	 * r0
	 *  save from r5 >> r11 manually save and store
	 */
	task->Current_PSP = task->S_PSP_Task;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	461a      	mov	r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	615a      	str	r2, [r3, #20]

	//save xPRS Tbit
	*(task->Current_PSP) = 0x01000000;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006c2:	601a      	str	r2, [r3, #0]
	task->Current_PSP--;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	1f1a      	subs	r2, r3, #4
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	615a      	str	r2, [r3, #20]

	//save PC
	*(task->Current_PSP) = (unsigned int)task->TaskEntry;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	689a      	ldr	r2, [r3, #8]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	601a      	str	r2, [r3, #0]
	task->Current_PSP--;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	695b      	ldr	r3, [r3, #20]
 80006dc:	1f1a      	subs	r2, r3, #4
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	615a      	str	r2, [r3, #20]

	//save LR
	*(task->Current_PSP) = 0xFFFFFFFD;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	f06f 0202 	mvn.w	r2, #2
 80006ea:	601a      	str	r2, [r3, #0]

	//save values in R0 -> R12
	for(int i = 0; i<13 ; i++)
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	e00b      	b.n	800070a <IsmailRTOS_CreateTask_Stack+0x62>
	{
		task->Current_PSP--;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	1f1a      	subs	r2, r3, #4
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	615a      	str	r2, [r3, #20]
		*(task->Current_PSP) = 0;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	695b      	ldr	r3, [r3, #20]
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
	for(int i = 0; i<13 ; i++)
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	3301      	adds	r3, #1
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	2b0c      	cmp	r3, #12
 800070e:	ddf0      	ble.n	80006f2 <IsmailRTOS_CreateTask_Stack+0x4a>
	}

}
 8000710:	bf00      	nop
 8000712:	bf00      	nop
 8000714:	3714      	adds	r7, #20
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <IsmailRTOS_CreateTask>:

IsmailRTOS_errorID IsmailRTOS_CreateTask(task_Typedef* task)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	IsmailRTOS_errorID ErrorID = NoError;
 8000724:	2300      	movs	r3, #0
 8000726:	73fb      	strb	r3, [r7, #15]

	task->S_PSP_Task = OS_Control.PSP_Locator;
 8000728:	4b19      	ldr	r3, [pc, #100]	; (8000790 <IsmailRTOS_CreateTask+0x74>)
 800072a:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	60da      	str	r2, [r3, #12]

	task->E_PSP_Task = task->S_PSP_Task - task->stacksize;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	68da      	ldr	r2, [r3, #12]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	1ad2      	subs	r2, r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	611a      	str	r2, [r3, #16]

	if((task->E_PSP_Task)<(unsigned int)(&_eheap))
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	691b      	ldr	r3, [r3, #16]
 8000744:	4a13      	ldr	r2, [pc, #76]	; (8000794 <IsmailRTOS_CreateTask+0x78>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d201      	bcs.n	800074e <IsmailRTOS_CreateTask+0x32>
	{
		return Task_Exceeded_Stack_size;
 800074a:	2302      	movs	r3, #2
 800074c:	e01b      	b.n	8000786 <IsmailRTOS_CreateTask+0x6a>
	}
	OS_Control.PSP_Locator = task->E_PSP_Task - 8;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	691b      	ldr	r3, [r3, #16]
 8000752:	3b08      	subs	r3, #8
 8000754:	4a0e      	ldr	r2, [pc, #56]	; (8000790 <IsmailRTOS_CreateTask+0x74>)
 8000756:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	IsmailRTOS_CreateTask_Stack(task);
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f7ff ffa4 	bl	80006a8 <IsmailRTOS_CreateTask_Stack>

	//update sch.table
	OS_Control.TaskTable[OS_Control.number_ActiveTasks] = task;
 8000760:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <IsmailRTOS_CreateTask+0x74>)
 8000762:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000766:	490a      	ldr	r1, [pc, #40]	; (8000790 <IsmailRTOS_CreateTask+0x74>)
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	OS_Control.number_ActiveTasks++;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <IsmailRTOS_CreateTask+0x74>)
 8000770:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000774:	3301      	adds	r3, #1
 8000776:	4a06      	ldr	r2, [pc, #24]	; (8000790 <IsmailRTOS_CreateTask+0x74>)
 8000778:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
	//	- _S_PSP_Task	-
	//	-	  Task Stack	-
	//	- _E_PSP_Task	-
	//	-

	task->Task_state = Suspend;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	return ErrorID;
 8000784:	7bfb      	ldrb	r3, [r7, #15]
}
 8000786:	4618      	mov	r0, r3
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000028 	.word	0x20000028
 8000794:	20000770 	.word	0x20000770

08000798 <bubbleSort>:

void bubbleSort()
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
	unsigned int i, j , n;
	task_Typedef* temp ;
	n = OS_Control.number_ActiveTasks ;
 800079e:	4b21      	ldr	r3, [pc, #132]	; (8000824 <bubbleSort+0x8c>)
 80007a0:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80007a4:	607b      	str	r3, [r7, #4]
	for (i = 0; i < n - 1; i++)
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	e030      	b.n	800080e <bubbleSort+0x76>

		// Last i elements are already in place
		for (j = 0; j < n - i - 1; j++)
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	e023      	b.n	80007fa <bubbleSort+0x62>
			if (OS_Control.TaskTable[j]->priority > OS_Control.TaskTable[j + 1]->priority)
 80007b2:	4a1c      	ldr	r2, [pc, #112]	; (8000824 <bubbleSort+0x8c>)
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ba:	791a      	ldrb	r2, [r3, #4]
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	3301      	adds	r3, #1
 80007c0:	4918      	ldr	r1, [pc, #96]	; (8000824 <bubbleSort+0x8c>)
 80007c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007c6:	791b      	ldrb	r3, [r3, #4]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d913      	bls.n	80007f4 <bubbleSort+0x5c>
			{
				temp = OS_Control.TaskTable[j] ;
 80007cc:	4a15      	ldr	r2, [pc, #84]	; (8000824 <bubbleSort+0x8c>)
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007d4:	603b      	str	r3, [r7, #0]
				OS_Control.TaskTable[j] = OS_Control.TaskTable[j + 1 ] ;
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	3301      	adds	r3, #1
 80007da:	4a12      	ldr	r2, [pc, #72]	; (8000824 <bubbleSort+0x8c>)
 80007dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007e0:	4910      	ldr	r1, [pc, #64]	; (8000824 <bubbleSort+0x8c>)
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control.TaskTable[j + 1] = temp ;
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	3301      	adds	r3, #1
 80007ec:	490d      	ldr	r1, [pc, #52]	; (8000824 <bubbleSort+0x8c>)
 80007ee:	683a      	ldr	r2, [r7, #0]
 80007f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (j = 0; j < n - i - 1; j++)
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	3301      	adds	r3, #1
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	1ad3      	subs	r3, r2, r3
 8000800:	3b01      	subs	r3, #1
 8000802:	68ba      	ldr	r2, [r7, #8]
 8000804:	429a      	cmp	r2, r3
 8000806:	d3d4      	bcc.n	80007b2 <bubbleSort+0x1a>
	for (i = 0; i < n - 1; i++)
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	3301      	adds	r3, #1
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	3b01      	subs	r3, #1
 8000812:	68fa      	ldr	r2, [r7, #12]
 8000814:	429a      	cmp	r2, r3
 8000816:	d3c9      	bcc.n	80007ac <bubbleSort+0x14>
			}

}
 8000818:	bf00      	nop
 800081a:	bf00      	nop
 800081c:	3714      	adds	r7, #20
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	20000028 	.word	0x20000028

08000828 <IsmailRTOS_UpdateSchedular>:


void IsmailRTOS_UpdateSchedular()
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
	task_Typedef* temp =NULL ;
 800082e:	2300      	movs	r3, #0
 8000830:	603b      	str	r3, [r7, #0]
	task_Typedef* task ;
	task_Typedef* nextTask ;
	int i = 0 ;
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]

	//1.bubble sort based on priority
	bubbleSort();
 8000836:	f7ff ffaf 	bl	8000798 <bubbleSort>
	//2.free ready queue
	while(FIFO_dequeue(&ReadyQueue, &temp) != FIFO_EMPTY);
 800083a:	bf00      	nop
 800083c:	463b      	mov	r3, r7
 800083e:	4619      	mov	r1, r3
 8000840:	4827      	ldr	r0, [pc, #156]	; (80008e0 <IsmailRTOS_UpdateSchedular+0xb8>)
 8000842:	f7ff fd03 	bl	800024c <FIFO_dequeue>
 8000846:	4603      	mov	r3, r0
 8000848:	2b02      	cmp	r3, #2
 800084a:	d1f7      	bne.n	800083c <IsmailRTOS_UpdateSchedular+0x14>
	//3.update ready queue
	while(i<OS_Control.number_ActiveTasks)
 800084c:	e03d      	b.n	80008ca <IsmailRTOS_UpdateSchedular+0xa2>
	{
		task = OS_Control.TaskTable[i];
 800084e:	4a25      	ldr	r2, [pc, #148]	; (80008e4 <IsmailRTOS_UpdateSchedular+0xbc>)
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000856:	60bb      	str	r3, [r7, #8]
		nextTask = OS_Control.TaskTable[i+1];
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	3301      	adds	r3, #1
 800085c:	4a21      	ldr	r2, [pc, #132]	; (80008e4 <IsmailRTOS_UpdateSchedular+0xbc>)
 800085e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000862:	607b      	str	r3, [r7, #4]

		if(task->Task_state != Suspend)
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800086a:	2b00      	cmp	r3, #0
 800086c:	d02a      	beq.n	80008c4 <IsmailRTOS_UpdateSchedular+0x9c>
		{
			//in case we reached to the end of TaskTable
			if(nextTask->Task_state == Suspend)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000874:	2b00      	cmp	r3, #0
 8000876:	d108      	bne.n	800088a <IsmailRTOS_UpdateSchedular+0x62>
			{
				FIFO_enqueue(&ReadyQueue, task);
 8000878:	68b9      	ldr	r1, [r7, #8]
 800087a:	4819      	ldr	r0, [pc, #100]	; (80008e0 <IsmailRTOS_UpdateSchedular+0xb8>)
 800087c:	f7ff fca4 	bl	80001c8 <FIFO_enqueue>
				task->Task_state = Ready;
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	2203      	movs	r2, #3
 8000884:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
				break;
 8000888:	e026      	b.n	80008d8 <IsmailRTOS_UpdateSchedular+0xb0>
			}
			//in case next task priority is higher than task priority the smaller the number the higher the priority
			else if(nextTask->priority > task->priority)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	791a      	ldrb	r2, [r3, #4]
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	791b      	ldrb	r3, [r3, #4]
 8000892:	429a      	cmp	r2, r3
 8000894:	d908      	bls.n	80008a8 <IsmailRTOS_UpdateSchedular+0x80>
			{
				FIFO_enqueue(&ReadyQueue, task);
 8000896:	68b9      	ldr	r1, [r7, #8]
 8000898:	4811      	ldr	r0, [pc, #68]	; (80008e0 <IsmailRTOS_UpdateSchedular+0xb8>)
 800089a:	f7ff fc95 	bl	80001c8 <FIFO_enqueue>
				task->Task_state = Ready;
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	2203      	movs	r2, #3
 80008a2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
				break;
 80008a6:	e017      	b.n	80008d8 <IsmailRTOS_UpdateSchedular+0xb0>
			}
			//in case next task priority is EQUAL than task priority
			//	push task to ready state
			//	And make the task = nexttask  and nexttask++ in the next i++
			else if(nextTask->priority == task->priority)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	791a      	ldrb	r2, [r3, #4]
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	791b      	ldrb	r3, [r3, #4]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d107      	bne.n	80008c4 <IsmailRTOS_UpdateSchedular+0x9c>
			{
				FIFO_enqueue(&ReadyQueue, task);
 80008b4:	68b9      	ldr	r1, [r7, #8]
 80008b6:	480a      	ldr	r0, [pc, #40]	; (80008e0 <IsmailRTOS_UpdateSchedular+0xb8>)
 80008b8:	f7ff fc86 	bl	80001c8 <FIFO_enqueue>
				task->Task_state = Ready;
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	2203      	movs	r2, #3
 80008c0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
			}

		}

		i++;
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	3301      	adds	r3, #1
 80008c8:	60fb      	str	r3, [r7, #12]
	while(i<OS_Control.number_ActiveTasks)
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <IsmailRTOS_UpdateSchedular+0xbc>)
 80008cc:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d8bb      	bhi.n	800084e <IsmailRTOS_UpdateSchedular+0x26>
	}

}
 80008d6:	bf00      	nop
 80008d8:	bf00      	nop
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	200001d4 	.word	0x200001d4
 80008e4:	20000028 	.word	0x20000028

080008e8 <Decide_WhatNext>:
//handler mode
void Decide_WhatNext()
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	//if Ready Queue is empty && OS_Control->currentTask != suspend
	if((ReadyQueue.counter == 0)&&(OS_Control.CurrentTask->Task_state != Suspend))
 80008ec:	4b24      	ldr	r3, [pc, #144]	; (8000980 <Decide_WhatNext+0x98>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d11a      	bne.n	800092a <Decide_WhatNext+0x42>
 80008f4:	4b23      	ldr	r3, [pc, #140]	; (8000984 <Decide_WhatNext+0x9c>)
 80008f6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008fa:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d013      	beq.n	800092a <Decide_WhatNext+0x42>
	{
		OS_Control.CurrentTask->Task_state = Running;
 8000902:	4b20      	ldr	r3, [pc, #128]	; (8000984 <Decide_WhatNext+0x9c>)
 8000904:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000908:	2201      	movs	r2, #1
 800090a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		FIFO_enqueue(&ReadyQueue, OS_Control.CurrentTask);
 800090e:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <Decide_WhatNext+0x9c>)
 8000910:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000914:	4619      	mov	r1, r3
 8000916:	481a      	ldr	r0, [pc, #104]	; (8000980 <Decide_WhatNext+0x98>)
 8000918:	f7ff fc56 	bl	80001c8 <FIFO_enqueue>
		OS_Control.NextTask = OS_Control.CurrentTask;
 800091c:	4b19      	ldr	r3, [pc, #100]	; (8000984 <Decide_WhatNext+0x9c>)
 800091e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000922:	4a18      	ldr	r2, [pc, #96]	; (8000984 <Decide_WhatNext+0x9c>)
 8000924:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		{
			FIFO_enqueue(&ReadyQueue, OS_Control.CurrentTask);
			OS_Control.CurrentTask->Task_state = Ready;
		}
	}
}
 8000928:	e027      	b.n	800097a <Decide_WhatNext+0x92>
		FIFO_dequeue(&ReadyQueue, &OS_Control.NextTask);
 800092a:	4917      	ldr	r1, [pc, #92]	; (8000988 <Decide_WhatNext+0xa0>)
 800092c:	4814      	ldr	r0, [pc, #80]	; (8000980 <Decide_WhatNext+0x98>)
 800092e:	f7ff fc8d 	bl	800024c <FIFO_dequeue>
		OS_Control.NextTask->Task_state = Running;
 8000932:	4b14      	ldr	r3, [pc, #80]	; (8000984 <Decide_WhatNext+0x9c>)
 8000934:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000938:	2201      	movs	r2, #1
 800093a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		if((OS_Control.CurrentTask->priority == OS_Control.NextTask->priority)&&(OS_Control.CurrentTask->Task_state != Suspend))
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <Decide_WhatNext+0x9c>)
 8000940:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000944:	791a      	ldrb	r2, [r3, #4]
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <Decide_WhatNext+0x9c>)
 8000948:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800094c:	791b      	ldrb	r3, [r3, #4]
 800094e:	429a      	cmp	r2, r3
 8000950:	d113      	bne.n	800097a <Decide_WhatNext+0x92>
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <Decide_WhatNext+0x9c>)
 8000954:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000958:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800095c:	2b00      	cmp	r3, #0
 800095e:	d00c      	beq.n	800097a <Decide_WhatNext+0x92>
			FIFO_enqueue(&ReadyQueue, OS_Control.CurrentTask);
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <Decide_WhatNext+0x9c>)
 8000962:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000966:	4619      	mov	r1, r3
 8000968:	4805      	ldr	r0, [pc, #20]	; (8000980 <Decide_WhatNext+0x98>)
 800096a:	f7ff fc2d 	bl	80001c8 <FIFO_enqueue>
			OS_Control.CurrentTask->Task_state = Ready;
 800096e:	4b05      	ldr	r3, [pc, #20]	; (8000984 <Decide_WhatNext+0x9c>)
 8000970:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000974:	2203      	movs	r2, #3
 8000976:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200001d4 	.word	0x200001d4
 8000984:	20000028 	.word	0x20000028
 8000988:	200001cc 	.word	0x200001cc

0800098c <Os_SVC_Services>:


//handler mode
void Os_SVC_Services(unsigned int *Stack_Pointer)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	unsigned char SVC_ID;
	SVC_ID = *((unsigned char *)(((unsigned char *)Stack_Pointer[6])-2));
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3318      	adds	r3, #24
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	3b02      	subs	r3, #2
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	73fb      	strb	r3, [r7, #15]

	switch(SVC_ID)
 80009a0:	7bfb      	ldrb	r3, [r7, #15]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	dc02      	bgt.n	80009ac <Os_SVC_Services+0x20>
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	da03      	bge.n	80009b2 <Os_SVC_Services+0x26>

	case SVC_TaskWaitingTime:
		IsmailRTOS_UpdateSchedular();
		break;
	}
}
 80009aa:	e01d      	b.n	80009e8 <Os_SVC_Services+0x5c>
	switch(SVC_ID)
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d017      	beq.n	80009e0 <Os_SVC_Services+0x54>
}
 80009b0:	e01a      	b.n	80009e8 <Os_SVC_Services+0x5c>
		IsmailRTOS_UpdateSchedular();
 80009b2:	f7ff ff39 	bl	8000828 <IsmailRTOS_UpdateSchedular>
		if(OS_Control.OS_state == OS_Running)
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <Os_SVC_Services+0x64>)
 80009b8:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d112      	bne.n	80009e6 <Os_SVC_Services+0x5a>
			if(strcmp(OS_Control.CurrentTask->Task_Name,"Idle_Task") != 0)
 80009c0:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <Os_SVC_Services+0x64>)
 80009c2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009c6:	3318      	adds	r3, #24
 80009c8:	490a      	ldr	r1, [pc, #40]	; (80009f4 <Os_SVC_Services+0x68>)
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fbd0 	bl	8000170 <strcmp>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d007      	beq.n	80009e6 <Os_SVC_Services+0x5a>
				Decide_WhatNext();
 80009d6:	f7ff ff87 	bl	80008e8 <Decide_WhatNext>
				Trigger_OS_PendSV();
 80009da:	f7ff fce1 	bl	80003a0 <Trigger_OS_PendSV>
		break;
 80009de:	e002      	b.n	80009e6 <Os_SVC_Services+0x5a>
		IsmailRTOS_UpdateSchedular();
 80009e0:	f7ff ff22 	bl	8000828 <IsmailRTOS_UpdateSchedular>
		break;
 80009e4:	e000      	b.n	80009e8 <Os_SVC_Services+0x5c>
		break;
 80009e6:	bf00      	nop
}
 80009e8:	bf00      	nop
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000028 	.word	0x20000028
 80009f4:	080011a4 	.word	0x080011a4

080009f8 <RTOS_OS_SVC_SET>:

void RTOS_OS_SVC_SET(SVC_ID_t SVC_ID)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
	switch(SVC_ID)
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d00a      	beq.n	8000a1e <RTOS_OS_SVC_SET+0x26>
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	dc0a      	bgt.n	8000a22 <RTOS_OS_SVC_SET+0x2a>
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d002      	beq.n	8000a16 <RTOS_OS_SVC_SET+0x1e>
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d002      	beq.n	8000a1a <RTOS_OS_SVC_SET+0x22>

	case SVC_TaskWaitingTime:
		__asm volatile("SVC #0x02");
		break;
	}
}
 8000a14:	e005      	b.n	8000a22 <RTOS_OS_SVC_SET+0x2a>
		__asm volatile("SVC #0x00");
 8000a16:	df00      	svc	0
		break;
 8000a18:	e003      	b.n	8000a22 <RTOS_OS_SVC_SET+0x2a>
		__asm volatile("SVC #0x01");
 8000a1a:	df01      	svc	1
		break;
 8000a1c:	e001      	b.n	8000a22 <RTOS_OS_SVC_SET+0x2a>
		__asm volatile("SVC #0x02");
 8000a1e:	df02      	svc	2
		break;
 8000a20:	bf00      	nop
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr

08000a2c <IsmailRTOS_ActivateTask>:


void IsmailRTOS_ActivateTask(task_Typedef* task)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	task->Task_state = Waiting;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2202      	movs	r2, #2
 8000a38:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	RTOS_OS_SVC_SET(SVC_Activatetask);
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f7ff ffdb 	bl	80009f8 <RTOS_OS_SVC_SET>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <IsmailRTOS_DectivateTask>:

void IsmailRTOS_DectivateTask (task_Typedef* task)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
	task->Task_state = Suspend;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2200      	movs	r2, #0
 8000a56:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	RTOS_OS_SVC_SET(SVC_terminateTask);
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f7ff ffcc 	bl	80009f8 <RTOS_OS_SVC_SET>
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <MYRTOS_Update_TasksWaitingTime>:

	RTOS_OS_SVC_SET(SVC_terminateTask);
}

void MYRTOS_Update_TasksWaitingTime()
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
	for(int i = 0; i<OS_Control.number_ActiveTasks ;i++)
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	e031      	b.n	8000ad8 <MYRTOS_Update_TasksWaitingTime+0x70>
	{
		if(OS_Control.TaskTable[i]->Task_state == Suspend)
 8000a74:	4a1e      	ldr	r2, [pc, #120]	; (8000af0 <MYRTOS_Update_TasksWaitingTime+0x88>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a7c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d126      	bne.n	8000ad2 <MYRTOS_Update_TasksWaitingTime+0x6a>
		{
			if(OS_Control.TaskTable[i]->TimingWaiting.Blocking == Enable)
 8000a84:	4a1a      	ldr	r2, [pc, #104]	; (8000af0 <MYRTOS_Update_TasksWaitingTime+0x88>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d11e      	bne.n	8000ad2 <MYRTOS_Update_TasksWaitingTime+0x6a>
			{
				OS_Control.TaskTable[i]->TimingWaiting.Waiting_Ticks--;
 8000a94:	4a16      	ldr	r2, [pc, #88]	; (8000af0 <MYRTOS_Update_TasksWaitingTime+0x88>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a9e:	3a01      	subs	r2, #1
 8000aa0:	63da      	str	r2, [r3, #60]	; 0x3c
				if(OS_Control.TaskTable[i]->TimingWaiting.Waiting_Ticks == 1)
 8000aa2:	4a13      	ldr	r2, [pc, #76]	; (8000af0 <MYRTOS_Update_TasksWaitingTime+0x88>)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d110      	bne.n	8000ad2 <MYRTOS_Update_TasksWaitingTime+0x6a>
				{
					OS_Control.TaskTable[i]->TimingWaiting.Blocking = Disable;
 8000ab0:	4a0f      	ldr	r2, [pc, #60]	; (8000af0 <MYRTOS_Update_TasksWaitingTime+0x88>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab8:	2201      	movs	r2, #1
 8000aba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
					OS_Control.TaskTable[i]->Task_state = Waiting;
 8000abe:	4a0c      	ldr	r2, [pc, #48]	; (8000af0 <MYRTOS_Update_TasksWaitingTime+0x88>)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
					RTOS_OS_SVC_SET(SVC_TaskWaitingTime);
 8000acc:	2002      	movs	r0, #2
 8000ace:	f7ff ff93 	bl	80009f8 <RTOS_OS_SVC_SET>
	for(int i = 0; i<OS_Control.number_ActiveTasks ;i++)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <MYRTOS_Update_TasksWaitingTime+0x88>)
 8000ada:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d8c7      	bhi.n	8000a74 <MYRTOS_Update_TasksWaitingTime+0xc>
				}
			}
		}
	}
}
 8000ae4:	bf00      	nop
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000028 	.word	0x20000028

08000af4 <IsmailRTOS_STARTOS>:
void IsmailRTOS_STARTOS()
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
	OS_Control.OS_state = OS_Running;
 8000af8:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <IsmailRTOS_STARTOS+0x54>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	//Set Default "Current Task =Idle Task"
	OS_Control.CurrentTask = &Idle_task;
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <IsmailRTOS_STARTOS+0x54>)
 8000b02:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <IsmailRTOS_STARTOS+0x58>)
 8000b04:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	//activate it
	IsmailRTOS_ActivateTask(&Idle_task);
 8000b08:	4810      	ldr	r0, [pc, #64]	; (8000b4c <IsmailRTOS_STARTOS+0x58>)
 8000b0a:	f7ff ff8f 	bl	8000a2c <IsmailRTOS_ActivateTask>

	Start_ticker();
 8000b0e:	f7ff fc55 	bl	80003bc <Start_ticker>

	OS_SET_PSP(OS_Control.CurrentTask->Current_PSP);
 8000b12:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <IsmailRTOS_STARTOS+0x54>)
 8000b14:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f380 8809 	msr	PSP, r0

	OS_SWITCH_SP_to_PSP;
 8000b20:	f3ef 8014 	mrs	r0, CONTROL
 8000b24:	f04f 0102 	mov.w	r1, #2
 8000b28:	ea40 0001 	orr.w	r0, r0, r1
 8000b2c:	f380 8814 	msr	CONTROL, r0

	OS_SWITCH_to_unprivileged;
 8000b30:	f3ef 8314 	mrs	r3, CONTROL
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	f383 8814 	msr	CONTROL, r3

	Idle_task.TaskEntry();
 8000b3c:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <IsmailRTOS_STARTOS+0x58>)
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	4798      	blx	r3


}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000028 	.word	0x20000028
 8000b4c:	20000378 	.word	0x20000378

08000b50 <IsmailRTOS_AcquireMutex>:

IsmailRTOS_errorID IsmailRTOS_AcquireMutex(Mutex_Typedef* mutex , task_Typedef* task)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
	//not taken by anytask
	if(mutex->currentuser == NULL)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d103      	bne.n	8000b6a <IsmailRTOS_AcquireMutex+0x1a>
	{
		mutex->currentuser = task;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	683a      	ldr	r2, [r7, #0]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	e010      	b.n	8000b8c <IsmailRTOS_AcquireMutex+0x3c>
	}
	else
	{
		if(mutex->nextuser == NULL)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d10a      	bne.n	8000b88 <IsmailRTOS_AcquireMutex+0x38>
		{
			mutex->nextuser = task;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	683a      	ldr	r2, [r7, #0]
 8000b76:	60da      	str	r2, [r3, #12]
			task->Task_state = Suspend;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

			RTOS_OS_SVC_SET(SVC_terminateTask);
 8000b80:	2001      	movs	r0, #1
 8000b82:	f7ff ff39 	bl	80009f8 <RTOS_OS_SVC_SET>
 8000b86:	e001      	b.n	8000b8c <IsmailRTOS_AcquireMutex+0x3c>
		}
		else
		{
			return MutexisReacedToMaxNumberOfUsers;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	e000      	b.n	8000b8e <IsmailRTOS_AcquireMutex+0x3e>
		}
	}
	return NoError;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <IsmailRTOS_ReleaseMutex>:

void IsmailRTOS_ReleaseMutex(Mutex_Typedef* mutex)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
	if(mutex->currentuser != NULL)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d00e      	beq.n	8000bc4 <IsmailRTOS_ReleaseMutex+0x2e>
	{
		mutex->currentuser = mutex->nextuser;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	68da      	ldr	r2, [r3, #12]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	609a      	str	r2, [r3, #8]
		mutex->nextuser = NULL;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	60da      	str	r2, [r3, #12]
		mutex->currentuser->Task_state = Waiting;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	2202      	movs	r2, #2
 8000bba:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		RTOS_OS_SVC_SET(SVC_Activatetask);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f7ff ff1a 	bl	80009f8 <RTOS_OS_SVC_SET>
	}
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <Task_A>:
Mutex_Typedef mutex1,mutex2;
unsigned char taskAled,taskBled,taskCled,taskDled;
unsigned char payload1[3] = {1,2,3};
unsigned char payload2[3] = {1,2,3};
void Task_A(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	static int count = 0;
	while(1)
	{
		taskAled^=1;
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <Task_A+0x50>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	f083 0301 	eor.w	r3, r3, #1
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <Task_A+0x50>)
 8000bdc:	701a      	strb	r2, [r3, #0]
		count++;
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <Task_A+0x54>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	3301      	adds	r3, #1
 8000be4:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <Task_A+0x54>)
 8000be6:	6013      	str	r3, [r2, #0]
		if(count == 100)
 8000be8:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <Task_A+0x54>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b64      	cmp	r3, #100	; 0x64
 8000bee:	d10a      	bne.n	8000c06 <Task_A+0x3a>
		{
			IsmailRTOS_AcquireMutex(&mutex1, &TaskA);
 8000bf0:	490c      	ldr	r1, [pc, #48]	; (8000c24 <Task_A+0x58>)
 8000bf2:	480d      	ldr	r0, [pc, #52]	; (8000c28 <Task_A+0x5c>)
 8000bf4:	f7ff ffac 	bl	8000b50 <IsmailRTOS_AcquireMutex>
			IsmailRTOS_ActivateTask(&TaskD);
 8000bf8:	480c      	ldr	r0, [pc, #48]	; (8000c2c <Task_A+0x60>)
 8000bfa:	f7ff ff17 	bl	8000a2c <IsmailRTOS_ActivateTask>
			IsmailRTOS_AcquireMutex(&mutex2, &TaskA);
 8000bfe:	4909      	ldr	r1, [pc, #36]	; (8000c24 <Task_A+0x58>)
 8000c00:	480b      	ldr	r0, [pc, #44]	; (8000c30 <Task_A+0x64>)
 8000c02:	f7ff ffa5 	bl	8000b50 <IsmailRTOS_AcquireMutex>
		}
		if(count == 200)
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <Task_A+0x54>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2bc8      	cmp	r3, #200	; 0xc8
 8000c0c:	d1e0      	bne.n	8000bd0 <Task_A+0x4>
		{
			count = 0;
 8000c0e:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <Task_A+0x54>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
			IsmailRTOS_ReleaseMutex(&mutex1);
 8000c14:	4804      	ldr	r0, [pc, #16]	; (8000c28 <Task_A+0x5c>)
 8000c16:	f7ff ffbe 	bl	8000b96 <IsmailRTOS_ReleaseMutex>
		taskAled^=1;
 8000c1a:	e7d9      	b.n	8000bd0 <Task_A+0x4>
 8000c1c:	2000051c 	.word	0x2000051c
 8000c20:	20000520 	.word	0x20000520
 8000c24:	200003bc 	.word	0x200003bc
 8000c28:	200004bc 	.word	0x200004bc
 8000c2c:	2000047c 	.word	0x2000047c
 8000c30:	200004ec 	.word	0x200004ec

08000c34 <Task_B>:

	}
}

void Task_B(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	static int count = 0;
	while(1)
	{
		taskBled^=1;
 8000c38:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <Task_B+0x40>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	f083 0301 	eor.w	r3, r3, #1
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <Task_B+0x40>)
 8000c44:	701a      	strb	r2, [r3, #0]
		count++;
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <Task_B+0x44>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <Task_B+0x44>)
 8000c4e:	6013      	str	r3, [r2, #0]
		if(count == 100)
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <Task_B+0x44>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b64      	cmp	r3, #100	; 0x64
 8000c56:	d102      	bne.n	8000c5e <Task_B+0x2a>
		{
			IsmailRTOS_ActivateTask(&TaskC);
 8000c58:	4808      	ldr	r0, [pc, #32]	; (8000c7c <Task_B+0x48>)
 8000c5a:	f7ff fee7 	bl	8000a2c <IsmailRTOS_ActivateTask>
		}
		if(count == 200)
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <Task_B+0x44>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2bc8      	cmp	r3, #200	; 0xc8
 8000c64:	d1e8      	bne.n	8000c38 <Task_B+0x4>
		{
			count = 0;
 8000c66:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <Task_B+0x44>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
			IsmailRTOS_DectivateTask(&TaskB);
 8000c6c:	4804      	ldr	r0, [pc, #16]	; (8000c80 <Task_B+0x4c>)
 8000c6e:	f7ff feec 	bl	8000a4a <IsmailRTOS_DectivateTask>
		taskBled^=1;
 8000c72:	e7e1      	b.n	8000c38 <Task_B+0x4>
 8000c74:	2000051d 	.word	0x2000051d
 8000c78:	20000524 	.word	0x20000524
 8000c7c:	2000043c 	.word	0x2000043c
 8000c80:	200003fc 	.word	0x200003fc

08000c84 <Task_C>:
		}
	}
}

void Task_C(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	static int count = 0;
	while(1)
	{
		taskCled^=1;
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <Task_C+0x40>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	f083 0301 	eor.w	r3, r3, #1
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <Task_C+0x40>)
 8000c94:	701a      	strb	r2, [r3, #0]
		count++;
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <Task_C+0x44>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <Task_C+0x44>)
 8000c9e:	6013      	str	r3, [r2, #0]
		if(count == 100)
 8000ca0:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <Task_C+0x44>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b64      	cmp	r3, #100	; 0x64
 8000ca6:	d102      	bne.n	8000cae <Task_C+0x2a>
		{
			IsmailRTOS_ActivateTask(&TaskD);
 8000ca8:	4808      	ldr	r0, [pc, #32]	; (8000ccc <Task_C+0x48>)
 8000caa:	f7ff febf 	bl	8000a2c <IsmailRTOS_ActivateTask>
		}
		if(count == 200)
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <Task_C+0x44>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2bc8      	cmp	r3, #200	; 0xc8
 8000cb4:	d1e8      	bne.n	8000c88 <Task_C+0x4>
		{
			count = 0;
 8000cb6:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <Task_C+0x44>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
			IsmailRTOS_DectivateTask(&TaskC);
 8000cbc:	4804      	ldr	r0, [pc, #16]	; (8000cd0 <Task_C+0x4c>)
 8000cbe:	f7ff fec4 	bl	8000a4a <IsmailRTOS_DectivateTask>
		taskCled^=1;
 8000cc2:	e7e1      	b.n	8000c88 <Task_C+0x4>
 8000cc4:	2000051e 	.word	0x2000051e
 8000cc8:	20000528 	.word	0x20000528
 8000ccc:	2000047c 	.word	0x2000047c
 8000cd0:	2000043c 	.word	0x2000043c

08000cd4 <Task_D>:
		}
	}
}

void Task_D(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	static int count = 0;
	while(1)
	{
		taskDled^=1;
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <Task_D+0x50>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	f083 0301 	eor.w	r3, r3, #1
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <Task_D+0x50>)
 8000ce4:	701a      	strb	r2, [r3, #0]
		count++;
 8000ce6:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <Task_D+0x54>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	3301      	adds	r3, #1
 8000cec:	4a0e      	ldr	r2, [pc, #56]	; (8000d28 <Task_D+0x54>)
 8000cee:	6013      	str	r3, [r2, #0]
		if(count == 3)
 8000cf0:	4b0d      	ldr	r3, [pc, #52]	; (8000d28 <Task_D+0x54>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b03      	cmp	r3, #3
 8000cf6:	d107      	bne.n	8000d08 <Task_D+0x34>
		{
			IsmailRTOS_AcquireMutex(&mutex2, &TaskD);
 8000cf8:	490c      	ldr	r1, [pc, #48]	; (8000d2c <Task_D+0x58>)
 8000cfa:	480d      	ldr	r0, [pc, #52]	; (8000d30 <Task_D+0x5c>)
 8000cfc:	f7ff ff28 	bl	8000b50 <IsmailRTOS_AcquireMutex>
			IsmailRTOS_AcquireMutex(&mutex1, &TaskD);
 8000d00:	490a      	ldr	r1, [pc, #40]	; (8000d2c <Task_D+0x58>)
 8000d02:	480c      	ldr	r0, [pc, #48]	; (8000d34 <Task_D+0x60>)
 8000d04:	f7ff ff24 	bl	8000b50 <IsmailRTOS_AcquireMutex>
		}
		if(count == 200)
 8000d08:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <Task_D+0x54>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2bc8      	cmp	r3, #200	; 0xc8
 8000d0e:	d1e3      	bne.n	8000cd8 <Task_D+0x4>
		{
			count = 0;
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <Task_D+0x54>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
			IsmailRTOS_ReleaseMutex(&mutex1);
 8000d16:	4807      	ldr	r0, [pc, #28]	; (8000d34 <Task_D+0x60>)
 8000d18:	f7ff ff3d 	bl	8000b96 <IsmailRTOS_ReleaseMutex>
			IsmailRTOS_DectivateTask(&TaskD);
 8000d1c:	4803      	ldr	r0, [pc, #12]	; (8000d2c <Task_D+0x58>)
 8000d1e:	f7ff fe94 	bl	8000a4a <IsmailRTOS_DectivateTask>
		taskDled^=1;
 8000d22:	e7d9      	b.n	8000cd8 <Task_D+0x4>
 8000d24:	2000051f 	.word	0x2000051f
 8000d28:	2000052c 	.word	0x2000052c
 8000d2c:	2000047c 	.word	0x2000047c
 8000d30:	200004ec 	.word	0x200004ec
 8000d34:	200004bc 	.word	0x200004bc

08000d38 <main>:
		}
	}
}

int main(void)
{
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
	IsmailRTOS_errorID errorID = Suspend;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	71fb      	strb	r3, [r7, #7]
	HW_init();
 8000d42:	f7ff fb0d 	bl	8000360 <HW_init>

	if(IsmailRTOS_Init() != NoError)
 8000d46:	f7ff fc81 	bl	800064c <IsmailRTOS_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d000      	beq.n	8000d52 <main+0x1a>
	{
		while(1);
 8000d50:	e7fe      	b.n	8000d50 <main+0x18>
	}
	mutex1.payload = payload1;
 8000d52:	4b47      	ldr	r3, [pc, #284]	; (8000e70 <main+0x138>)
 8000d54:	4a47      	ldr	r2, [pc, #284]	; (8000e74 <main+0x13c>)
 8000d56:	601a      	str	r2, [r3, #0]
	mutex1.payload_size = 3;
 8000d58:	4b45      	ldr	r3, [pc, #276]	; (8000e70 <main+0x138>)
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	711a      	strb	r2, [r3, #4]
	strcpy(mutex1.Mutexname,"Mutex1_shared");
 8000d5e:	4a46      	ldr	r2, [pc, #280]	; (8000e78 <main+0x140>)
 8000d60:	4b46      	ldr	r3, [pc, #280]	; (8000e7c <main+0x144>)
 8000d62:	4614      	mov	r4, r2
 8000d64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d66:	c407      	stmia	r4!, {r0, r1, r2}
 8000d68:	8023      	strh	r3, [r4, #0]

	mutex2.payload = payload2;
 8000d6a:	4b45      	ldr	r3, [pc, #276]	; (8000e80 <main+0x148>)
 8000d6c:	4a45      	ldr	r2, [pc, #276]	; (8000e84 <main+0x14c>)
 8000d6e:	601a      	str	r2, [r3, #0]
	mutex2.payload_size = 3;
 8000d70:	4b43      	ldr	r3, [pc, #268]	; (8000e80 <main+0x148>)
 8000d72:	2203      	movs	r2, #3
 8000d74:	711a      	strb	r2, [r3, #4]
	strcpy(mutex2.Mutexname,"Mutex2_shared");
 8000d76:	4a44      	ldr	r2, [pc, #272]	; (8000e88 <main+0x150>)
 8000d78:	4b44      	ldr	r3, [pc, #272]	; (8000e8c <main+0x154>)
 8000d7a:	4614      	mov	r4, r2
 8000d7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d7e:	c407      	stmia	r4!, {r0, r1, r2}
 8000d80:	8023      	strh	r3, [r4, #0]

	TaskA.stacksize = 1024;
 8000d82:	4b43      	ldr	r3, [pc, #268]	; (8000e90 <main+0x158>)
 8000d84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d88:	601a      	str	r2, [r3, #0]
	TaskA.priority = 4;
 8000d8a:	4b41      	ldr	r3, [pc, #260]	; (8000e90 <main+0x158>)
 8000d8c:	2204      	movs	r2, #4
 8000d8e:	711a      	strb	r2, [r3, #4]
	TaskA.TaskEntry = Task_A;
 8000d90:	4b3f      	ldr	r3, [pc, #252]	; (8000e90 <main+0x158>)
 8000d92:	4a40      	ldr	r2, [pc, #256]	; (8000e94 <main+0x15c>)
 8000d94:	609a      	str	r2, [r3, #8]
	strcpy(TaskA.Task_Name , "Task_A");
 8000d96:	4b40      	ldr	r3, [pc, #256]	; (8000e98 <main+0x160>)
 8000d98:	4a40      	ldr	r2, [pc, #256]	; (8000e9c <main+0x164>)
 8000d9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d9e:	6018      	str	r0, [r3, #0]
 8000da0:	3304      	adds	r3, #4
 8000da2:	8019      	strh	r1, [r3, #0]
 8000da4:	3302      	adds	r3, #2
 8000da6:	0c0a      	lsrs	r2, r1, #16
 8000da8:	701a      	strb	r2, [r3, #0]

	TaskB.stacksize = 1024;
 8000daa:	4b3d      	ldr	r3, [pc, #244]	; (8000ea0 <main+0x168>)
 8000dac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000db0:	601a      	str	r2, [r3, #0]
	TaskB.priority = 3;
 8000db2:	4b3b      	ldr	r3, [pc, #236]	; (8000ea0 <main+0x168>)
 8000db4:	2203      	movs	r2, #3
 8000db6:	711a      	strb	r2, [r3, #4]
	TaskB.TaskEntry = Task_B;
 8000db8:	4b39      	ldr	r3, [pc, #228]	; (8000ea0 <main+0x168>)
 8000dba:	4a3a      	ldr	r2, [pc, #232]	; (8000ea4 <main+0x16c>)
 8000dbc:	609a      	str	r2, [r3, #8]
	strcpy(TaskB.Task_Name , "Task_B");
 8000dbe:	4b3a      	ldr	r3, [pc, #232]	; (8000ea8 <main+0x170>)
 8000dc0:	4a3a      	ldr	r2, [pc, #232]	; (8000eac <main+0x174>)
 8000dc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dc6:	6018      	str	r0, [r3, #0]
 8000dc8:	3304      	adds	r3, #4
 8000dca:	8019      	strh	r1, [r3, #0]
 8000dcc:	3302      	adds	r3, #2
 8000dce:	0c0a      	lsrs	r2, r1, #16
 8000dd0:	701a      	strb	r2, [r3, #0]

	TaskC.stacksize = 1024;
 8000dd2:	4b37      	ldr	r3, [pc, #220]	; (8000eb0 <main+0x178>)
 8000dd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dd8:	601a      	str	r2, [r3, #0]
	TaskC.priority = 2;
 8000dda:	4b35      	ldr	r3, [pc, #212]	; (8000eb0 <main+0x178>)
 8000ddc:	2202      	movs	r2, #2
 8000dde:	711a      	strb	r2, [r3, #4]
	TaskC.TaskEntry = Task_C;
 8000de0:	4b33      	ldr	r3, [pc, #204]	; (8000eb0 <main+0x178>)
 8000de2:	4a34      	ldr	r2, [pc, #208]	; (8000eb4 <main+0x17c>)
 8000de4:	609a      	str	r2, [r3, #8]
	strcpy(TaskC.Task_Name , "Task_C");
 8000de6:	4b34      	ldr	r3, [pc, #208]	; (8000eb8 <main+0x180>)
 8000de8:	4a34      	ldr	r2, [pc, #208]	; (8000ebc <main+0x184>)
 8000dea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dee:	6018      	str	r0, [r3, #0]
 8000df0:	3304      	adds	r3, #4
 8000df2:	8019      	strh	r1, [r3, #0]
 8000df4:	3302      	adds	r3, #2
 8000df6:	0c0a      	lsrs	r2, r1, #16
 8000df8:	701a      	strb	r2, [r3, #0]

	TaskD.stacksize = 1024;
 8000dfa:	4b31      	ldr	r3, [pc, #196]	; (8000ec0 <main+0x188>)
 8000dfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e00:	601a      	str	r2, [r3, #0]
	TaskD.priority = 1;
 8000e02:	4b2f      	ldr	r3, [pc, #188]	; (8000ec0 <main+0x188>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	711a      	strb	r2, [r3, #4]
	TaskD.TaskEntry = Task_D;
 8000e08:	4b2d      	ldr	r3, [pc, #180]	; (8000ec0 <main+0x188>)
 8000e0a:	4a2e      	ldr	r2, [pc, #184]	; (8000ec4 <main+0x18c>)
 8000e0c:	609a      	str	r2, [r3, #8]
	strcpy(TaskD.Task_Name , "Task_D");
 8000e0e:	4b2e      	ldr	r3, [pc, #184]	; (8000ec8 <main+0x190>)
 8000e10:	4a2e      	ldr	r2, [pc, #184]	; (8000ecc <main+0x194>)
 8000e12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e16:	6018      	str	r0, [r3, #0]
 8000e18:	3304      	adds	r3, #4
 8000e1a:	8019      	strh	r1, [r3, #0]
 8000e1c:	3302      	adds	r3, #2
 8000e1e:	0c0a      	lsrs	r2, r1, #16
 8000e20:	701a      	strb	r2, [r3, #0]

	errorID += IsmailRTOS_CreateTask(&TaskA);
 8000e22:	481b      	ldr	r0, [pc, #108]	; (8000e90 <main+0x158>)
 8000e24:	f7ff fc7a 	bl	800071c <IsmailRTOS_CreateTask>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	4413      	add	r3, r2
 8000e30:	71fb      	strb	r3, [r7, #7]
	errorID += IsmailRTOS_CreateTask(&TaskB);
 8000e32:	481b      	ldr	r0, [pc, #108]	; (8000ea0 <main+0x168>)
 8000e34:	f7ff fc72 	bl	800071c <IsmailRTOS_CreateTask>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	4413      	add	r3, r2
 8000e40:	71fb      	strb	r3, [r7, #7]
	errorID += IsmailRTOS_CreateTask(&TaskC);
 8000e42:	481b      	ldr	r0, [pc, #108]	; (8000eb0 <main+0x178>)
 8000e44:	f7ff fc6a 	bl	800071c <IsmailRTOS_CreateTask>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	4413      	add	r3, r2
 8000e50:	71fb      	strb	r3, [r7, #7]
	errorID += IsmailRTOS_CreateTask(&TaskD);
 8000e52:	481b      	ldr	r0, [pc, #108]	; (8000ec0 <main+0x188>)
 8000e54:	f7ff fc62 	bl	800071c <IsmailRTOS_CreateTask>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	4413      	add	r3, r2
 8000e60:	71fb      	strb	r3, [r7, #7]

	IsmailRTOS_ActivateTask(&TaskA);
 8000e62:	480b      	ldr	r0, [pc, #44]	; (8000e90 <main+0x158>)
 8000e64:	f7ff fde2 	bl	8000a2c <IsmailRTOS_ActivateTask>

	IsmailRTOS_STARTOS();
 8000e68:	f7ff fe44 	bl	8000af4 <IsmailRTOS_STARTOS>

	while(1)
 8000e6c:	e7fe      	b.n	8000e6c <main+0x134>
 8000e6e:	bf00      	nop
 8000e70:	200004bc 	.word	0x200004bc
 8000e74:	20000000 	.word	0x20000000
 8000e78:	200004cc 	.word	0x200004cc
 8000e7c:	080011b0 	.word	0x080011b0
 8000e80:	200004ec 	.word	0x200004ec
 8000e84:	20000004 	.word	0x20000004
 8000e88:	200004fc 	.word	0x200004fc
 8000e8c:	080011c0 	.word	0x080011c0
 8000e90:	200003bc 	.word	0x200003bc
 8000e94:	08000bcd 	.word	0x08000bcd
 8000e98:	200003d4 	.word	0x200003d4
 8000e9c:	080011d0 	.word	0x080011d0
 8000ea0:	200003fc 	.word	0x200003fc
 8000ea4:	08000c35 	.word	0x08000c35
 8000ea8:	20000414 	.word	0x20000414
 8000eac:	080011d8 	.word	0x080011d8
 8000eb0:	2000043c 	.word	0x2000043c
 8000eb4:	08000c85 	.word	0x08000c85
 8000eb8:	20000454 	.word	0x20000454
 8000ebc:	080011e0 	.word	0x080011e0
 8000ec0:	2000047c 	.word	0x2000047c
 8000ec4:	08000cd5 	.word	0x08000cd5
 8000ec8:	20000494 	.word	0x20000494
 8000ecc:	080011e8 	.word	0x080011e8

08000ed0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ed0:	480d      	ldr	r0, [pc, #52]	; (8000f08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ed2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ed4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ed8:	480c      	ldr	r0, [pc, #48]	; (8000f0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000eda:	490d      	ldr	r1, [pc, #52]	; (8000f10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000edc:	4a0d      	ldr	r2, [pc, #52]	; (8000f14 <LoopForever+0xe>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee0:	e002      	b.n	8000ee8 <LoopCopyDataInit>

08000ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee6:	3304      	adds	r3, #4

08000ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eec:	d3f9      	bcc.n	8000ee2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eee:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ef0:	4c0a      	ldr	r4, [pc, #40]	; (8000f1c <LoopForever+0x16>)
  movs r3, #0
 8000ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef4:	e001      	b.n	8000efa <LoopFillZerobss>

08000ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef8:	3204      	adds	r2, #4

08000efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000efc:	d3fb      	bcc.n	8000ef6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000efe:	f000 f921 	bl	8001144 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f02:	f7ff ff19 	bl	8000d38 <main>

08000f06 <LoopForever>:

LoopForever:
  b LoopForever
 8000f06:	e7fe      	b.n	8000f06 <LoopForever>
  ldr   r0, =_estack
 8000f08:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f10:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000f14:	080011f8 	.word	0x080011f8
  ldr r2, =_sbss
 8000f18:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000f1c:	2000056c 	.word	0x2000056c

08000f20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f20:	e7fe      	b.n	8000f20 <ADC1_2_IRQHandler>
	...

08000f24 <EXTI0_IRQHandler>:
		break;
	}
}

void EXTI0_IRQHandler (void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit Pending register
	SET_BIT(EXTI->PR,EXTI0);
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <EXTI0_IRQHandler+0x1c>)
 8000f2a:	695b      	ldr	r3, [r3, #20]
 8000f2c:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <EXTI0_IRQHandler+0x1c>)
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	6153      	str	r3, [r2, #20]
	//EXTI->PR |= 1<<0;

	//IRQ callback
	call_back[EXTI0]();
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <EXTI0_IRQHandler+0x20>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4798      	blx	r3
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40010400 	.word	0x40010400
 8000f44:	20000530 	.word	0x20000530

08000f48 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit Pending register
	SET_BIT(EXTI->PR,EXTI1);
 8000f4c:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <EXTI1_IRQHandler+0x1c>)
 8000f4e:	695b      	ldr	r3, [r3, #20]
 8000f50:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <EXTI1_IRQHandler+0x1c>)
 8000f52:	f043 0302 	orr.w	r3, r3, #2
 8000f56:	6153      	str	r3, [r2, #20]
	//EXTI->PR |= 1<<1;

	//IRQ callback
	call_back[EXTI1]();
 8000f58:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <EXTI1_IRQHandler+0x20>)
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	4798      	blx	r3
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40010400 	.word	0x40010400
 8000f68:	20000530 	.word	0x20000530

08000f6c <EXTI2_IRQHandler>:
void EXTI2_IRQHandler (void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit Pending register
	SET_BIT(EXTI->PR,EXTI2);
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <EXTI2_IRQHandler+0x1c>)
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <EXTI2_IRQHandler+0x1c>)
 8000f76:	f043 0304 	orr.w	r3, r3, #4
 8000f7a:	6153      	str	r3, [r2, #20]
	//EXTI->PR |= 1<<2;

	//IRQ callback
	call_back[EXTI2]();
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <EXTI2_IRQHandler+0x20>)
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	4798      	blx	r3
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40010400 	.word	0x40010400
 8000f8c:	20000530 	.word	0x20000530

08000f90 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler (void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit Pending register
	SET_BIT(EXTI->PR,EXTI3);
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <EXTI3_IRQHandler+0x1c>)
 8000f96:	695b      	ldr	r3, [r3, #20]
 8000f98:	4a04      	ldr	r2, [pc, #16]	; (8000fac <EXTI3_IRQHandler+0x1c>)
 8000f9a:	f043 0308 	orr.w	r3, r3, #8
 8000f9e:	6153      	str	r3, [r2, #20]
	//EXTI->PR |= 1<<3;

	//IRQ callback
	call_back[EXTI3]();
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <EXTI3_IRQHandler+0x20>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	4798      	blx	r3
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40010400 	.word	0x40010400
 8000fb0:	20000530 	.word	0x20000530

08000fb4 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler (void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	//cleared by writing 1 into the bit Pending register
	SET_BIT(EXTI->PR,EXTI4);
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <EXTI4_IRQHandler+0x1c>)
 8000fba:	695b      	ldr	r3, [r3, #20]
 8000fbc:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <EXTI4_IRQHandler+0x1c>)
 8000fbe:	f043 0310 	orr.w	r3, r3, #16
 8000fc2:	6153      	str	r3, [r2, #20]
	//EXTI->PR |= 1<<4;

	//IRQ callback
	call_back[EXTI4]();
 8000fc4:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <EXTI4_IRQHandler+0x20>)
 8000fc6:	691b      	ldr	r3, [r3, #16]
 8000fc8:	4798      	blx	r3
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40010400 	.word	0x40010400
 8000fd4:	20000530 	.word	0x20000530

08000fd8 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler (void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5){SET_BIT(EXTI->PR,EXTI5);call_back[EXTI5]();}
 8000fdc:	4b26      	ldr	r3, [pc, #152]	; (8001078 <EXTI9_5_IRQHandler+0xa0>)
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	f003 0320 	and.w	r3, r3, #32
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d008      	beq.n	8000ffa <EXTI9_5_IRQHandler+0x22>
 8000fe8:	4b23      	ldr	r3, [pc, #140]	; (8001078 <EXTI9_5_IRQHandler+0xa0>)
 8000fea:	695b      	ldr	r3, [r3, #20]
 8000fec:	4a22      	ldr	r2, [pc, #136]	; (8001078 <EXTI9_5_IRQHandler+0xa0>)
 8000fee:	f043 0320 	orr.w	r3, r3, #32
 8000ff2:	6153      	str	r3, [r2, #20]
 8000ff4:	4b21      	ldr	r3, [pc, #132]	; (800107c <EXTI9_5_IRQHandler+0xa4>)
 8000ff6:	695b      	ldr	r3, [r3, #20]
 8000ff8:	4798      	blx	r3
	if(EXTI->PR & 1<<6){SET_BIT(EXTI->PR,EXTI6);call_back[EXTI6]();}
 8000ffa:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <EXTI9_5_IRQHandler+0xa0>)
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001002:	2b00      	cmp	r3, #0
 8001004:	d008      	beq.n	8001018 <EXTI9_5_IRQHandler+0x40>
 8001006:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <EXTI9_5_IRQHandler+0xa0>)
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	4a1b      	ldr	r2, [pc, #108]	; (8001078 <EXTI9_5_IRQHandler+0xa0>)
 800100c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001010:	6153      	str	r3, [r2, #20]
 8001012:	4b1a      	ldr	r3, [pc, #104]	; (800107c <EXTI9_5_IRQHandler+0xa4>)
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	4798      	blx	r3
	if(EXTI->PR & 1<<7){SET_BIT(EXTI->PR,EXTI7);call_back[EXTI7]();}
 8001018:	4b17      	ldr	r3, [pc, #92]	; (8001078 <EXTI9_5_IRQHandler+0xa0>)
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001020:	2b00      	cmp	r3, #0
 8001022:	d008      	beq.n	8001036 <EXTI9_5_IRQHandler+0x5e>
 8001024:	4b14      	ldr	r3, [pc, #80]	; (8001078 <EXTI9_5_IRQHandler+0xa0>)
 8001026:	695b      	ldr	r3, [r3, #20]
 8001028:	4a13      	ldr	r2, [pc, #76]	; (8001078 <EXTI9_5_IRQHandler+0xa0>)
 800102a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800102e:	6153      	str	r3, [r2, #20]
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <EXTI9_5_IRQHandler+0xa4>)
 8001032:	69db      	ldr	r3, [r3, #28]
 8001034:	4798      	blx	r3
	if(EXTI->PR & 1<<8){SET_BIT(EXTI->PR,EXTI8);call_back[EXTI8]();}
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <EXTI9_5_IRQHandler+0xa0>)
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800103e:	2b00      	cmp	r3, #0
 8001040:	d008      	beq.n	8001054 <EXTI9_5_IRQHandler+0x7c>
 8001042:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <EXTI9_5_IRQHandler+0xa0>)
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	4a0c      	ldr	r2, [pc, #48]	; (8001078 <EXTI9_5_IRQHandler+0xa0>)
 8001048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800104c:	6153      	str	r3, [r2, #20]
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <EXTI9_5_IRQHandler+0xa4>)
 8001050:	6a1b      	ldr	r3, [r3, #32]
 8001052:	4798      	blx	r3
	if(EXTI->PR & 1<<9){SET_BIT(EXTI->PR,EXTI9);call_back[EXTI9]();}
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <EXTI9_5_IRQHandler+0xa0>)
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800105c:	2b00      	cmp	r3, #0
 800105e:	d008      	beq.n	8001072 <EXTI9_5_IRQHandler+0x9a>
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <EXTI9_5_IRQHandler+0xa0>)
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	4a04      	ldr	r2, [pc, #16]	; (8001078 <EXTI9_5_IRQHandler+0xa0>)
 8001066:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800106a:	6153      	str	r3, [r2, #20]
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <EXTI9_5_IRQHandler+0xa4>)
 800106e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001070:	4798      	blx	r3
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40010400 	.word	0x40010400
 800107c:	20000530 	.word	0x20000530

08001080 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10){SET_BIT(EXTI->PR,EXTI10);call_back[EXTI10]();}
 8001084:	4b2d      	ldr	r3, [pc, #180]	; (800113c <EXTI15_10_IRQHandler+0xbc>)
 8001086:	695b      	ldr	r3, [r3, #20]
 8001088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800108c:	2b00      	cmp	r3, #0
 800108e:	d008      	beq.n	80010a2 <EXTI15_10_IRQHandler+0x22>
 8001090:	4b2a      	ldr	r3, [pc, #168]	; (800113c <EXTI15_10_IRQHandler+0xbc>)
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	4a29      	ldr	r2, [pc, #164]	; (800113c <EXTI15_10_IRQHandler+0xbc>)
 8001096:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800109a:	6153      	str	r3, [r2, #20]
 800109c:	4b28      	ldr	r3, [pc, #160]	; (8001140 <EXTI15_10_IRQHandler+0xc0>)
 800109e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a0:	4798      	blx	r3
	if(EXTI->PR & 1<<11){SET_BIT(EXTI->PR,EXTI11);call_back[EXTI11]();}
 80010a2:	4b26      	ldr	r3, [pc, #152]	; (800113c <EXTI15_10_IRQHandler+0xbc>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d008      	beq.n	80010c0 <EXTI15_10_IRQHandler+0x40>
 80010ae:	4b23      	ldr	r3, [pc, #140]	; (800113c <EXTI15_10_IRQHandler+0xbc>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	4a22      	ldr	r2, [pc, #136]	; (800113c <EXTI15_10_IRQHandler+0xbc>)
 80010b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010b8:	6153      	str	r3, [r2, #20]
 80010ba:	4b21      	ldr	r3, [pc, #132]	; (8001140 <EXTI15_10_IRQHandler+0xc0>)
 80010bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010be:	4798      	blx	r3
	if(EXTI->PR & 1<<12){SET_BIT(EXTI->PR,EXTI12);call_back[EXTI12]();}
 80010c0:	4b1e      	ldr	r3, [pc, #120]	; (800113c <EXTI15_10_IRQHandler+0xbc>)
 80010c2:	695b      	ldr	r3, [r3, #20]
 80010c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d008      	beq.n	80010de <EXTI15_10_IRQHandler+0x5e>
 80010cc:	4b1b      	ldr	r3, [pc, #108]	; (800113c <EXTI15_10_IRQHandler+0xbc>)
 80010ce:	695b      	ldr	r3, [r3, #20]
 80010d0:	4a1a      	ldr	r2, [pc, #104]	; (800113c <EXTI15_10_IRQHandler+0xbc>)
 80010d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010d6:	6153      	str	r3, [r2, #20]
 80010d8:	4b19      	ldr	r3, [pc, #100]	; (8001140 <EXTI15_10_IRQHandler+0xc0>)
 80010da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010dc:	4798      	blx	r3
	if(EXTI->PR & 1<<13){SET_BIT(EXTI->PR,EXTI13);call_back[EXTI13]();}
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <EXTI15_10_IRQHandler+0xbc>)
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d008      	beq.n	80010fc <EXTI15_10_IRQHandler+0x7c>
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <EXTI15_10_IRQHandler+0xbc>)
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	4a13      	ldr	r2, [pc, #76]	; (800113c <EXTI15_10_IRQHandler+0xbc>)
 80010f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010f4:	6153      	str	r3, [r2, #20]
 80010f6:	4b12      	ldr	r3, [pc, #72]	; (8001140 <EXTI15_10_IRQHandler+0xc0>)
 80010f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010fa:	4798      	blx	r3
	if(EXTI->PR & 1<<14){SET_BIT(EXTI->PR,EXTI14);call_back[EXTI14]();}
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <EXTI15_10_IRQHandler+0xbc>)
 80010fe:	695b      	ldr	r3, [r3, #20]
 8001100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d008      	beq.n	800111a <EXTI15_10_IRQHandler+0x9a>
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <EXTI15_10_IRQHandler+0xbc>)
 800110a:	695b      	ldr	r3, [r3, #20]
 800110c:	4a0b      	ldr	r2, [pc, #44]	; (800113c <EXTI15_10_IRQHandler+0xbc>)
 800110e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001112:	6153      	str	r3, [r2, #20]
 8001114:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <EXTI15_10_IRQHandler+0xc0>)
 8001116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001118:	4798      	blx	r3
	if(EXTI->PR & 1<<15){SET_BIT(EXTI->PR,EXTI15);call_back[EXTI15]();}
 800111a:	4b08      	ldr	r3, [pc, #32]	; (800113c <EXTI15_10_IRQHandler+0xbc>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d008      	beq.n	8001138 <EXTI15_10_IRQHandler+0xb8>
 8001126:	4b05      	ldr	r3, [pc, #20]	; (800113c <EXTI15_10_IRQHandler+0xbc>)
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	4a04      	ldr	r2, [pc, #16]	; (800113c <EXTI15_10_IRQHandler+0xbc>)
 800112c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001130:	6153      	str	r3, [r2, #20]
 8001132:	4b03      	ldr	r3, [pc, #12]	; (8001140 <EXTI15_10_IRQHandler+0xc0>)
 8001134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001136:	4798      	blx	r3
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40010400 	.word	0x40010400
 8001140:	20000530 	.word	0x20000530

08001144 <__libc_init_array>:
 8001144:	b570      	push	{r4, r5, r6, lr}
 8001146:	2600      	movs	r6, #0
 8001148:	4d0c      	ldr	r5, [pc, #48]	; (800117c <__libc_init_array+0x38>)
 800114a:	4c0d      	ldr	r4, [pc, #52]	; (8001180 <__libc_init_array+0x3c>)
 800114c:	1b64      	subs	r4, r4, r5
 800114e:	10a4      	asrs	r4, r4, #2
 8001150:	42a6      	cmp	r6, r4
 8001152:	d109      	bne.n	8001168 <__libc_init_array+0x24>
 8001154:	f000 f81a 	bl	800118c <_init>
 8001158:	2600      	movs	r6, #0
 800115a:	4d0a      	ldr	r5, [pc, #40]	; (8001184 <__libc_init_array+0x40>)
 800115c:	4c0a      	ldr	r4, [pc, #40]	; (8001188 <__libc_init_array+0x44>)
 800115e:	1b64      	subs	r4, r4, r5
 8001160:	10a4      	asrs	r4, r4, #2
 8001162:	42a6      	cmp	r6, r4
 8001164:	d105      	bne.n	8001172 <__libc_init_array+0x2e>
 8001166:	bd70      	pop	{r4, r5, r6, pc}
 8001168:	f855 3b04 	ldr.w	r3, [r5], #4
 800116c:	4798      	blx	r3
 800116e:	3601      	adds	r6, #1
 8001170:	e7ee      	b.n	8001150 <__libc_init_array+0xc>
 8001172:	f855 3b04 	ldr.w	r3, [r5], #4
 8001176:	4798      	blx	r3
 8001178:	3601      	adds	r6, #1
 800117a:	e7f2      	b.n	8001162 <__libc_init_array+0x1e>
 800117c:	080011f0 	.word	0x080011f0
 8001180:	080011f0 	.word	0x080011f0
 8001184:	080011f0 	.word	0x080011f0
 8001188:	080011f4 	.word	0x080011f4

0800118c <_init>:
 800118c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800118e:	bf00      	nop
 8001190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001192:	bc08      	pop	{r3}
 8001194:	469e      	mov	lr, r3
 8001196:	4770      	bx	lr

08001198 <_fini>:
 8001198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800119a:	bf00      	nop
 800119c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800119e:	bc08      	pop	{r3}
 80011a0:	469e      	mov	lr, r3
 80011a2:	4770      	bx	lr
