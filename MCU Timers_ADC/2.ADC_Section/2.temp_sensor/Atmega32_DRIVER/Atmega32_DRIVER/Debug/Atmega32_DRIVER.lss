
Atmega32_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000102a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  0000102a  000010be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  0080008c  0080008c  000010ea  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001148  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00001184  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ef0  00000000  00000000  0000140c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dec  00000000  00000000  000042fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013ca  00000000  00000000  000050e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007ac  00000000  00000000  000064b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ea8  00000000  00000000  00006c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002851  00000000  00000000  00007b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  0000a359  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 46 01 	jmp	0x28c	; 0x28c <__vector_1>
       8:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__vector_2>
       c:	0c 94 98 01 	jmp	0x330	; 0x330 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 8c 03 	jmp	0x718	; 0x718 <__vector_10>
      2c:	0c 94 b8 03 	jmp	0x770	; 0x770 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e2       	ldi	r30, 0x2A	; 42
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3b       	cpi	r26, 0xB2	; 178
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 53 03 	call	0x6a6	; 0x6a6 <main>
      8a:	0c 94 13 08 	jmp	0x1026	; 0x1026 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADMUX_Config>:
	}
	return ret;
}

static ReturnType ADMUX_Config(ADC_Config_t *ADC_Config)
{
      92:	fc 01       	movw	r30, r24
	ReturnType ret = E_NOT_OK;
	if (NULL == ADC_Config)
      94:	89 2b       	or	r24, r25
      96:	89 f0       	breq	.+34     	; 0xba <ADMUX_Config+0x28>
		ret = E_NOT_OK;
	}
	else
	{
		//Set the REFS bits to select the desired voltage reference
		ADC_Config->ADMUX_Bits.REFS_bits = ADC_Config->VoltageReference;
      98:	92 81       	ldd	r25, Z+2	; 0x02
      9a:	29 2f       	mov	r18, r25
      9c:	22 95       	swap	r18
      9e:	22 0f       	add	r18, r18
      a0:	22 0f       	add	r18, r18
      a2:	20 7c       	andi	r18, 0xC0	; 192
      a4:	95 81       	ldd	r25, Z+5	; 0x05
      a6:	9f 73       	andi	r25, 0x3F	; 63
		
		//Set the ADLAR bit to control the result adjustment
		ADC_Config->ADMUX_Bits.ADLAR_bit = ADC_Config->ResultAdjust;
      a8:	80 81       	ld	r24, Z
      aa:	92 2b       	or	r25, r18
      ac:	80 fb       	bst	r24, 0
      ae:	95 f9       	bld	r25, 5
		
		//Set the MUX bits to select the desired ADC channel
		ADC_Config->ADMUX_Bits.MUX_bits = ADC_CHANNEL0;
      b0:	90 7e       	andi	r25, 0xE0	; 224
      b2:	95 83       	std	Z+5, r25	; 0x05
		
		ADMUX = *(uint8_t*)&ADC_Config->ADMUX_Bits;
      b4:	97 b9       	out	0x07, r25	; 7
		ret = E_OK;
      b6:	81 e0       	ldi	r24, 0x01	; 1
      b8:	08 95       	ret
static ReturnType ADMUX_Config(ADC_Config_t *ADC_Config)
{
	ReturnType ret = E_NOT_OK;
	if (NULL == ADC_Config)
	{
		ret = E_NOT_OK;
      ba:	80 e0       	ldi	r24, 0x00	; 0
		
		ADMUX = *(uint8_t*)&ADC_Config->ADMUX_Bits;
		ret = E_OK;
	}
	return ret;
}
      bc:	08 95       	ret

000000be <ADCSRA_Config>:
static ReturnType ADCSRA_Config(ADC_Config_t *ADC_Config)
{
      be:	fc 01       	movw	r30, r24
	ReturnType ret = E_NOT_OK;
	if (NULL == ADC_Config)
      c0:	89 2b       	or	r24, r25
      c2:	99 f0       	breq	.+38     	; 0xea <ADCSRA_Config+0x2c>
		ret = E_NOT_OK;
	}
	else
	{
		//Set the ADPS bits to select the desired ADC prescaler
		ADC_Config->ADCSRA_Bits.ADPS_bits = ADC_Config->Prescaler;
      c4:	91 81       	ldd	r25, Z+1	; 0x01
      c6:	29 2f       	mov	r18, r25
      c8:	27 70       	andi	r18, 0x07	; 7
      ca:	94 81       	ldd	r25, Z+4	; 0x04
      cc:	98 7f       	andi	r25, 0xF8	; 248
		
		//Set the ADIE bit to control the ADC interrupt enable
		ADC_Config->ADCSRA_Bits.ADIE_bit = ADC_Config->InturruptMode;
      ce:	83 81       	ldd	r24, Z+3	; 0x03
      d0:	92 2b       	or	r25, r18
      d2:	80 fb       	bst	r24, 0
      d4:	93 f9       	bld	r25, 3
		ADC_Config->ADCSRA_Bits.ADIF_bit = 0;
		ADC_Config->ADCSRA_Bits.ADATE_bit = 0;
		ADC_Config->ADCSRA_Bits.ADSC_bit = 0;
		
		//Enable ADC
		ADC_Config->ADCSRA_Bits.ADEN_bit = 1;
      d6:	9f 78       	andi	r25, 0x8F	; 143
      d8:	90 68       	ori	r25, 0x80	; 128
      da:	94 83       	std	Z+4, r25	; 0x04
		
		ADCSRA = *(uint8_t*)&ADC_Config->ADCSRA_Bits;
      dc:	96 b9       	out	0x06, r25	; 6
		if(ADCSRA & (1<<3))
      de:	33 9b       	sbis	0x06, 3	; 6
      e0:	06 c0       	rjmp	.+12     	; 0xee <ADCSRA_Config+0x30>
		{
			Enable_GI();
      e2:	0e 94 c1 01 	call	0x382	; 0x382 <Enable_GI>
		}
		ret = E_OK;
      e6:	81 e0       	ldi	r24, 0x01	; 1
      e8:	08 95       	ret
static ReturnType ADCSRA_Config(ADC_Config_t *ADC_Config)
{
	ReturnType ret = E_NOT_OK;
	if (NULL == ADC_Config)
	{
		ret = E_NOT_OK;
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	08 95       	ret
		ADCSRA = *(uint8_t*)&ADC_Config->ADCSRA_Bits;
		if(ADCSRA & (1<<3))
		{
			Enable_GI();
		}
		ret = E_OK;
      ee:	81 e0       	ldi	r24, 0x01	; 1
	}
	return ret;
}
      f0:	08 95       	ret

000000f2 <ADC_Init>:
static ReturnType ADMUX_Config(ADC_Config_t *ADC_Config);
static ReturnType ADCSRA_Config(ADC_Config_t *ADC_Config);


ReturnType ADC_Init(ADC_Config_t *ADC_Config)
{
      f2:	cf 93       	push	r28
      f4:	df 93       	push	r29
	ReturnType ret = E_NOT_OK;
	if (NULL == ADC_Config)
      f6:	00 97       	sbiw	r24, 0x00	; 0
      f8:	41 f0       	breq	.+16     	; 0x10a <ADC_Init+0x18>
      fa:	ec 01       	movw	r28, r24
		ret = E_NOT_OK;
	} 
	else
	{
		//Configure ADMUX register
		ret = ADMUX_Config(ADC_Config);
      fc:	0e 94 49 00 	call	0x92	; 0x92 <ADMUX_Config>
	
		//Configure ADCSRA register
		ret = ADCSRA_Config(ADC_Config);
     100:	ce 01       	movw	r24, r28
     102:	0e 94 5f 00 	call	0xbe	; 0xbe <ADCSRA_Config>
		
		
		ret = E_OK;
     106:	81 e0       	ldi	r24, 0x01	; 1
     108:	01 c0       	rjmp	.+2      	; 0x10c <ADC_Init+0x1a>
ReturnType ADC_Init(ADC_Config_t *ADC_Config)
{
	ReturnType ret = E_NOT_OK;
	if (NULL == ADC_Config)
	{
		ret = E_NOT_OK;
     10a:	80 e0       	ldi	r24, 0x00	; 0
		
		
		ret = E_OK;
	}
	return ret;
}
     10c:	df 91       	pop	r29
     10e:	cf 91       	pop	r28
     110:	08 95       	ret

00000112 <ADC_Read>:

ReturnType ADC_Read(ADC_Index ADC_CH, uint16_t *ADC_Result)
{
	ReturnType ret = E_NOT_OK;
	if ((ADC_CH < ADC_CHANNEL0) || (ADC_CH > ADC_CHANNEL7) || (NULL == ADC_Result))
     112:	88 30       	cpi	r24, 0x08	; 8
     114:	d8 f4       	brcc	.+54     	; 0x14c <ADC_Read+0x3a>
     116:	61 15       	cp	r22, r1
     118:	71 05       	cpc	r23, r1
     11a:	d1 f0       	breq	.+52     	; 0x150 <ADC_Read+0x3e>
	{
		ret = E_NOT_OK;
	}
	else
	{
		ADMUX |= ADC_CH;
     11c:	97 b1       	in	r25, 0x07	; 7
     11e:	89 2b       	or	r24, r25
     120:	87 b9       	out	0x07, r24	; 7
		
		//Start ADC conversion
		SET_BIT(ADCSRA,6);
     122:	86 b1       	in	r24, 0x06	; 6
     124:	80 64       	ori	r24, 0x40	; 64
     126:	86 b9       	out	0x06, r24	; 6
		
		//if interrupt is Disable use polling
		if(!(ADCSRA & (1<<3)))
     128:	33 99       	sbic	0x06, 3	; 6
     12a:	05 c0       	rjmp	.+10     	; 0x136 <ADC_Read+0x24>
		{
			while(!(ADCSRA & (1<<4)));//Wait for conversion to complete
     12c:	34 9b       	sbis	0x06, 4	; 6
     12e:	fe cf       	rjmp	.-4      	; 0x12c <ADC_Read+0x1a>
			
			//clear ADIF
			SET_BIT(ADCSRA,4);
     130:	86 b1       	in	r24, 0x06	; 6
     132:	80 61       	ori	r24, 0x10	; 16
     134:	86 b9       	out	0x06, r24	; 6
		}
		//read ADC
		*ADC_Result = ADCL | ADCH << 8;
     136:	24 b1       	in	r18, 0x04	; 4
     138:	85 b1       	in	r24, 0x05	; 5
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	98 2f       	mov	r25, r24
     13e:	88 27       	eor	r24, r24
     140:	82 2b       	or	r24, r18
     142:	fb 01       	movw	r30, r22
     144:	91 83       	std	Z+1, r25	; 0x01
     146:	80 83       	st	Z, r24
		
		ret = E_OK;
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	08 95       	ret
ReturnType ADC_Read(ADC_Index ADC_CH, uint16_t *ADC_Result)
{
	ReturnType ret = E_NOT_OK;
	if ((ADC_CH < ADC_CHANNEL0) || (ADC_CH > ADC_CHANNEL7) || (NULL == ADC_Result))
	{
		ret = E_NOT_OK;
     14c:	80 e0       	ldi	r24, 0x00	; 0
     14e:	08 95       	ret
     150:	80 e0       	ldi	r24, 0x00	; 0
		*ADC_Result = ADCL | ADCH << 8;
		
		ret = E_OK;
	}
	return ret;
}
     152:	08 95       	ret

00000154 <__vector_16>:
	}
	return ret;
}

ISR(ADC_vect)
{
     154:	1f 92       	push	r1
     156:	0f 92       	push	r0
     158:	0f b6       	in	r0, 0x3f	; 63
     15a:	0f 92       	push	r0
     15c:	11 24       	eor	r1, r1
     15e:	8f 93       	push	r24
	SET_BIT(ADCSRA, 4);//clear flag
     160:	86 b1       	in	r24, 0x06	; 6
     162:	80 61       	ori	r24, 0x10	; 16
     164:	86 b9       	out	0x06, r24	; 6
     166:	8f 91       	pop	r24
     168:	0f 90       	pop	r0
     16a:	0f be       	out	0x3f, r0	; 63
     16c:	0f 90       	pop	r0
     16e:	1f 90       	pop	r1
     170:	18 95       	reti

00000172 <gpio_pin_direction_intialize>:
	{
		*PORTX_Register[port] ^= 0xFF;
		ret = E_OK;
	}
	return ret;
}
     172:	fc 01       	movw	r30, r24
     174:	89 2b       	or	r24, r25
     176:	a9 f1       	breq	.+106    	; 0x1e2 <gpio_pin_direction_intialize+0x70>
     178:	20 81       	ld	r18, Z
     17a:	26 95       	lsr	r18
     17c:	26 95       	lsr	r18
     17e:	26 95       	lsr	r18
     180:	27 70       	andi	r18, 0x07	; 7
     182:	80 81       	ld	r24, Z
     184:	86 fd       	sbrc	r24, 6
     186:	16 c0       	rjmp	.+44     	; 0x1b4 <gpio_pin_direction_intialize+0x42>
     188:	e8 2f       	mov	r30, r24
     18a:	e7 70       	andi	r30, 0x07	; 7
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	ee 0f       	add	r30, r30
     190:	ff 1f       	adc	r31, r31
     192:	e8 59       	subi	r30, 0x98	; 152
     194:	ff 4f       	sbci	r31, 0xFF	; 255
     196:	01 90       	ld	r0, Z+
     198:	f0 81       	ld	r31, Z
     19a:	e0 2d       	mov	r30, r0
     19c:	30 81       	ld	r19, Z
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <gpio_pin_direction_intialize+0x36>
     1a4:	88 0f       	add	r24, r24
     1a6:	99 1f       	adc	r25, r25
     1a8:	2a 95       	dec	r18
     1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <gpio_pin_direction_intialize+0x32>
     1ac:	83 2b       	or	r24, r19
     1ae:	80 83       	st	Z, r24
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	08 95       	ret
     1b4:	e0 81       	ld	r30, Z
     1b6:	e7 70       	andi	r30, 0x07	; 7
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	ee 0f       	add	r30, r30
     1bc:	ff 1f       	adc	r31, r31
     1be:	e8 59       	subi	r30, 0x98	; 152
     1c0:	ff 4f       	sbci	r31, 0xFF	; 255
     1c2:	01 90       	ld	r0, Z+
     1c4:	f0 81       	ld	r31, Z
     1c6:	e0 2d       	mov	r30, r0
     1c8:	30 81       	ld	r19, Z
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <gpio_pin_direction_intialize+0x62>
     1d0:	88 0f       	add	r24, r24
     1d2:	99 1f       	adc	r25, r25
     1d4:	2a 95       	dec	r18
     1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <gpio_pin_direction_intialize+0x5e>
     1d8:	80 95       	com	r24
     1da:	83 23       	and	r24, r19
     1dc:	80 83       	st	Z, r24
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	08 95       	ret
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	08 95       	ret

000001e6 <gpio_pin_write_logic>:
     1e6:	00 97       	sbiw	r24, 0x00	; 0
     1e8:	d1 f1       	breq	.+116    	; 0x25e <gpio_pin_write_logic+0x78>
     1ea:	dc 01       	movw	r26, r24
     1ec:	2c 91       	ld	r18, X
     1ee:	26 95       	lsr	r18
     1f0:	26 95       	lsr	r18
     1f2:	26 95       	lsr	r18
     1f4:	27 70       	andi	r18, 0x07	; 7
     1f6:	66 23       	and	r22, r22
     1f8:	19 f0       	breq	.+6      	; 0x200 <gpio_pin_write_logic+0x1a>
     1fa:	61 30       	cpi	r22, 0x01	; 1
     1fc:	c9 f0       	breq	.+50     	; 0x230 <gpio_pin_write_logic+0x4a>
     1fe:	31 c0       	rjmp	.+98     	; 0x262 <gpio_pin_write_logic+0x7c>
     200:	dc 01       	movw	r26, r24
     202:	ec 91       	ld	r30, X
     204:	e7 70       	andi	r30, 0x07	; 7
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	ee 0f       	add	r30, r30
     20a:	ff 1f       	adc	r31, r31
     20c:	e0 5a       	subi	r30, 0xA0	; 160
     20e:	ff 4f       	sbci	r31, 0xFF	; 255
     210:	01 90       	ld	r0, Z+
     212:	f0 81       	ld	r31, Z
     214:	e0 2d       	mov	r30, r0
     216:	30 81       	ld	r19, Z
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	02 c0       	rjmp	.+4      	; 0x222 <gpio_pin_write_logic+0x3c>
     21e:	88 0f       	add	r24, r24
     220:	99 1f       	adc	r25, r25
     222:	2a 95       	dec	r18
     224:	e2 f7       	brpl	.-8      	; 0x21e <gpio_pin_write_logic+0x38>
     226:	80 95       	com	r24
     228:	83 23       	and	r24, r19
     22a:	80 83       	st	Z, r24
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	08 95       	ret
     230:	dc 01       	movw	r26, r24
     232:	ec 91       	ld	r30, X
     234:	e7 70       	andi	r30, 0x07	; 7
     236:	f0 e0       	ldi	r31, 0x00	; 0
     238:	ee 0f       	add	r30, r30
     23a:	ff 1f       	adc	r31, r31
     23c:	e0 5a       	subi	r30, 0xA0	; 160
     23e:	ff 4f       	sbci	r31, 0xFF	; 255
     240:	01 90       	ld	r0, Z+
     242:	f0 81       	ld	r31, Z
     244:	e0 2d       	mov	r30, r0
     246:	30 81       	ld	r19, Z
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	02 c0       	rjmp	.+4      	; 0x252 <gpio_pin_write_logic+0x6c>
     24e:	88 0f       	add	r24, r24
     250:	99 1f       	adc	r25, r25
     252:	2a 95       	dec	r18
     254:	e2 f7       	brpl	.-8      	; 0x24e <gpio_pin_write_logic+0x68>
     256:	83 2b       	or	r24, r19
     258:	80 83       	st	Z, r24
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	08 95       	ret
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	08 95       	ret
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	08 95       	ret

00000266 <gpio_pin_intialize>:
ReturnType gpio_pin_intialize(const Pin_Config *pin_config)
{
     266:	cf 93       	push	r28
     268:	df 93       	push	r29
	ReturnType ret = E_NOT_OK;
	if((NULL == pin_config)||(pin_config->pin > PORT_PIN_MAX_NUMBER-1))
     26a:	00 97       	sbiw	r24, 0x00	; 0
     26c:	59 f0       	breq	.+22     	; 0x284 <gpio_pin_intialize+0x1e>
     26e:	ec 01       	movw	r28, r24
	{
		ret = E_NOT_OK;
	}
	else
	{
		ret = gpio_pin_direction_intialize(pin_config);
     270:	0e 94 b9 00 	call	0x172	; 0x172 <gpio_pin_direction_intialize>
		ret = gpio_pin_write_logic(pin_config,pin_config->logic);
     274:	68 81       	ld	r22, Y
     276:	67 fb       	bst	r22, 7
     278:	66 27       	eor	r22, r22
     27a:	60 f9       	bld	r22, 0
     27c:	ce 01       	movw	r24, r28
     27e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpio_pin_write_logic>
     282:	01 c0       	rjmp	.+2      	; 0x286 <gpio_pin_intialize+0x20>
ReturnType gpio_pin_intialize(const Pin_Config *pin_config)
{
	ReturnType ret = E_NOT_OK;
	if((NULL == pin_config)||(pin_config->pin > PORT_PIN_MAX_NUMBER-1))
	{
		ret = E_NOT_OK;
     284:	80 e0       	ldi	r24, 0x00	; 0
	{
		ret = gpio_pin_direction_intialize(pin_config);
		ret = gpio_pin_write_logic(pin_config,pin_config->logic);
	}
	return ret;
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	08 95       	ret

0000028c <__vector_1>:
	}
}

// Interrupt service routine for INT0
ISR (INT0_vect)
{
     28c:	1f 92       	push	r1
     28e:	0f 92       	push	r0
     290:	0f b6       	in	r0, 0x3f	; 63
     292:	0f 92       	push	r0
     294:	11 24       	eor	r1, r1
     296:	2f 93       	push	r18
     298:	3f 93       	push	r19
     29a:	4f 93       	push	r20
     29c:	5f 93       	push	r21
     29e:	6f 93       	push	r22
     2a0:	7f 93       	push	r23
     2a2:	8f 93       	push	r24
     2a4:	9f 93       	push	r25
     2a6:	af 93       	push	r26
     2a8:	bf 93       	push	r27
     2aa:	ef 93       	push	r30
     2ac:	ff 93       	push	r31
	if (EXTI0_CallBack != NULL)
     2ae:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <EXTI0_CallBack>
     2b2:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <EXTI0_CallBack+0x1>
     2b6:	30 97       	sbiw	r30, 0x00	; 0
     2b8:	09 f0       	breq	.+2      	; 0x2bc <__vector_1+0x30>
	{
		EXTI0_CallBack();
     2ba:	09 95       	icall
	}
}
     2bc:	ff 91       	pop	r31
     2be:	ef 91       	pop	r30
     2c0:	bf 91       	pop	r27
     2c2:	af 91       	pop	r26
     2c4:	9f 91       	pop	r25
     2c6:	8f 91       	pop	r24
     2c8:	7f 91       	pop	r23
     2ca:	6f 91       	pop	r22
     2cc:	5f 91       	pop	r21
     2ce:	4f 91       	pop	r20
     2d0:	3f 91       	pop	r19
     2d2:	2f 91       	pop	r18
     2d4:	0f 90       	pop	r0
     2d6:	0f be       	out	0x3f, r0	; 63
     2d8:	0f 90       	pop	r0
     2da:	1f 90       	pop	r1
     2dc:	18 95       	reti

000002de <__vector_2>:
// Interrupt service routine for INT1
ISR (INT1_vect)
{
     2de:	1f 92       	push	r1
     2e0:	0f 92       	push	r0
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	0f 92       	push	r0
     2e6:	11 24       	eor	r1, r1
     2e8:	2f 93       	push	r18
     2ea:	3f 93       	push	r19
     2ec:	4f 93       	push	r20
     2ee:	5f 93       	push	r21
     2f0:	6f 93       	push	r22
     2f2:	7f 93       	push	r23
     2f4:	8f 93       	push	r24
     2f6:	9f 93       	push	r25
     2f8:	af 93       	push	r26
     2fa:	bf 93       	push	r27
     2fc:	ef 93       	push	r30
     2fe:	ff 93       	push	r31
	if (EXTI1_CallBack != NULL)
     300:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <__data_end>
     304:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <__data_end+0x1>
     308:	30 97       	sbiw	r30, 0x00	; 0
     30a:	09 f0       	breq	.+2      	; 0x30e <__vector_2+0x30>
	{
		EXTI1_CallBack();
     30c:	09 95       	icall
	}
}
     30e:	ff 91       	pop	r31
     310:	ef 91       	pop	r30
     312:	bf 91       	pop	r27
     314:	af 91       	pop	r26
     316:	9f 91       	pop	r25
     318:	8f 91       	pop	r24
     31a:	7f 91       	pop	r23
     31c:	6f 91       	pop	r22
     31e:	5f 91       	pop	r21
     320:	4f 91       	pop	r20
     322:	3f 91       	pop	r19
     324:	2f 91       	pop	r18
     326:	0f 90       	pop	r0
     328:	0f be       	out	0x3f, r0	; 63
     32a:	0f 90       	pop	r0
     32c:	1f 90       	pop	r1
     32e:	18 95       	reti

00000330 <__vector_3>:

// Interrupt service routine for INT2
ISR (INT2_vect)
{
     330:	1f 92       	push	r1
     332:	0f 92       	push	r0
     334:	0f b6       	in	r0, 0x3f	; 63
     336:	0f 92       	push	r0
     338:	11 24       	eor	r1, r1
     33a:	2f 93       	push	r18
     33c:	3f 93       	push	r19
     33e:	4f 93       	push	r20
     340:	5f 93       	push	r21
     342:	6f 93       	push	r22
     344:	7f 93       	push	r23
     346:	8f 93       	push	r24
     348:	9f 93       	push	r25
     34a:	af 93       	push	r26
     34c:	bf 93       	push	r27
     34e:	ef 93       	push	r30
     350:	ff 93       	push	r31
	if (EXTI2_CallBack != NULL)
     352:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <EXTI2_CallBack>
     356:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <EXTI2_CallBack+0x1>
     35a:	30 97       	sbiw	r30, 0x00	; 0
     35c:	09 f0       	breq	.+2      	; 0x360 <__vector_3+0x30>
	{
		EXTI2_CallBack();
     35e:	09 95       	icall
	}
     360:	ff 91       	pop	r31
     362:	ef 91       	pop	r30
     364:	bf 91       	pop	r27
     366:	af 91       	pop	r26
     368:	9f 91       	pop	r25
     36a:	8f 91       	pop	r24
     36c:	7f 91       	pop	r23
     36e:	6f 91       	pop	r22
     370:	5f 91       	pop	r21
     372:	4f 91       	pop	r20
     374:	3f 91       	pop	r19
     376:	2f 91       	pop	r18
     378:	0f 90       	pop	r0
     37a:	0f be       	out	0x3f, r0	; 63
     37c:	0f 90       	pop	r0
     37e:	1f 90       	pop	r1
     380:	18 95       	reti

00000382 <Enable_GI>:

void Enable_GI(void)
{
	//SET_BIT(SREG,7);
	//SREG |= 1<<7;
	sei();
     382:	78 94       	sei
     384:	08 95       	ret

00000386 <lcd_send_8bitEnableSignal>:
	{
		memset((char *)string, '\0', 4);
		sprintf(string, "%i", data);
	}
	return ret;
}
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	ec 01       	movw	r28, r24
     38c:	21 96       	adiw	r28, 0x01	; 1
     38e:	61 e0       	ldi	r22, 0x01	; 1
     390:	ce 01       	movw	r24, r28
     392:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpio_pin_write_logic>
     396:	83 e0       	ldi	r24, 0x03	; 3
     398:	8a 95       	dec	r24
     39a:	f1 f7       	brne	.-4      	; 0x398 <lcd_send_8bitEnableSignal+0x12>
     39c:	00 00       	nop
     39e:	60 e0       	ldi	r22, 0x00	; 0
     3a0:	ce 01       	movw	r24, r28
     3a2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpio_pin_write_logic>
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28
     3aa:	08 95       	ret

000003ac <LCD_8bit_SendCommand>:
     3ac:	ff 92       	push	r15
     3ae:	0f 93       	push	r16
     3b0:	1f 93       	push	r17
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	00 97       	sbiw	r24, 0x00	; 0
     3b8:	01 f1       	breq	.+64     	; 0x3fa <LCD_8bit_SendCommand+0x4e>
     3ba:	f6 2e       	mov	r15, r22
     3bc:	8c 01       	movw	r16, r24
     3be:	60 e0       	ldi	r22, 0x00	; 0
     3c0:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpio_pin_write_logic>
     3c4:	c0 e0       	ldi	r28, 0x00	; 0
     3c6:	d0 e0       	ldi	r29, 0x00	; 0
     3c8:	10 c0       	rjmp	.+32     	; 0x3ea <LCD_8bit_SendCommand+0x3e>
     3ca:	6f 2d       	mov	r22, r15
     3cc:	70 e0       	ldi	r23, 0x00	; 0
     3ce:	0c 2e       	mov	r0, r28
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <LCD_8bit_SendCommand+0x2a>
     3d2:	75 95       	asr	r23
     3d4:	67 95       	ror	r22
     3d6:	0a 94       	dec	r0
     3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <LCD_8bit_SendCommand+0x26>
     3da:	ce 01       	movw	r24, r28
     3dc:	02 96       	adiw	r24, 0x02	; 2
     3de:	61 70       	andi	r22, 0x01	; 1
     3e0:	80 0f       	add	r24, r16
     3e2:	91 1f       	adc	r25, r17
     3e4:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpio_pin_write_logic>
     3e8:	21 96       	adiw	r28, 0x01	; 1
     3ea:	c8 30       	cpi	r28, 0x08	; 8
     3ec:	d1 05       	cpc	r29, r1
     3ee:	6c f3       	brlt	.-38     	; 0x3ca <LCD_8bit_SendCommand+0x1e>
     3f0:	c8 01       	movw	r24, r16
     3f2:	0e 94 c3 01 	call	0x386	; 0x386 <lcd_send_8bitEnableSignal>
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	01 c0       	rjmp	.+2      	; 0x3fc <LCD_8bit_SendCommand+0x50>
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	1f 91       	pop	r17
     402:	0f 91       	pop	r16
     404:	ff 90       	pop	r15
     406:	08 95       	ret

00000408 <LCD_8bit_Init>:
     408:	0f 93       	push	r16
     40a:	1f 93       	push	r17
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	00 97       	sbiw	r24, 0x00	; 0
     412:	09 f4       	brne	.+2      	; 0x416 <LCD_8bit_Init+0xe>
     414:	4b c0       	rjmp	.+150    	; 0x4ac <LCD_8bit_Init+0xa4>
     416:	8c 01       	movw	r16, r24
     418:	0e 94 33 01 	call	0x266	; 0x266 <gpio_pin_intialize>
     41c:	c8 01       	movw	r24, r16
     41e:	01 96       	adiw	r24, 0x01	; 1
     420:	0e 94 33 01 	call	0x266	; 0x266 <gpio_pin_intialize>
     424:	c0 e0       	ldi	r28, 0x00	; 0
     426:	d0 e0       	ldi	r29, 0x00	; 0
     428:	07 c0       	rjmp	.+14     	; 0x438 <LCD_8bit_Init+0x30>
     42a:	ce 01       	movw	r24, r28
     42c:	02 96       	adiw	r24, 0x02	; 2
     42e:	80 0f       	add	r24, r16
     430:	91 1f       	adc	r25, r17
     432:	0e 94 33 01 	call	0x266	; 0x266 <gpio_pin_intialize>
     436:	21 96       	adiw	r28, 0x01	; 1
     438:	c8 30       	cpi	r28, 0x08	; 8
     43a:	d1 05       	cpc	r29, r1
     43c:	b4 f3       	brlt	.-20     	; 0x42a <LCD_8bit_Init+0x22>
     43e:	87 e8       	ldi	r24, 0x87	; 135
     440:	93 e1       	ldi	r25, 0x13	; 19
     442:	01 97       	sbiw	r24, 0x01	; 1
     444:	f1 f7       	brne	.-4      	; 0x442 <LCD_8bit_Init+0x3a>
     446:	00 c0       	rjmp	.+0      	; 0x448 <LCD_8bit_Init+0x40>
     448:	00 00       	nop
     44a:	68 e3       	ldi	r22, 0x38	; 56
     44c:	c8 01       	movw	r24, r16
     44e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCD_8bit_SendCommand>
     452:	81 ee       	ldi	r24, 0xE1	; 225
     454:	94 e0       	ldi	r25, 0x04	; 4
     456:	01 97       	sbiw	r24, 0x01	; 1
     458:	f1 f7       	brne	.-4      	; 0x456 <LCD_8bit_Init+0x4e>
     45a:	00 c0       	rjmp	.+0      	; 0x45c <LCD_8bit_Init+0x54>
     45c:	00 00       	nop
     45e:	68 e3       	ldi	r22, 0x38	; 56
     460:	c8 01       	movw	r24, r16
     462:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCD_8bit_SendCommand>
     466:	8b e7       	ldi	r24, 0x7B	; 123
     468:	92 e9       	ldi	r25, 0x92	; 146
     46a:	01 97       	sbiw	r24, 0x01	; 1
     46c:	f1 f7       	brne	.-4      	; 0x46a <LCD_8bit_Init+0x62>
     46e:	00 c0       	rjmp	.+0      	; 0x470 <LCD_8bit_Init+0x68>
     470:	00 00       	nop
     472:	68 e3       	ldi	r22, 0x38	; 56
     474:	c8 01       	movw	r24, r16
     476:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCD_8bit_SendCommand>
     47a:	61 e0       	ldi	r22, 0x01	; 1
     47c:	c8 01       	movw	r24, r16
     47e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCD_8bit_SendCommand>
     482:	62 e0       	ldi	r22, 0x02	; 2
     484:	c8 01       	movw	r24, r16
     486:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCD_8bit_SendCommand>
     48a:	66 e0       	ldi	r22, 0x06	; 6
     48c:	c8 01       	movw	r24, r16
     48e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCD_8bit_SendCommand>
     492:	6e e0       	ldi	r22, 0x0E	; 14
     494:	c8 01       	movw	r24, r16
     496:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCD_8bit_SendCommand>
     49a:	68 e3       	ldi	r22, 0x38	; 56
     49c:	c8 01       	movw	r24, r16
     49e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCD_8bit_SendCommand>
     4a2:	60 e8       	ldi	r22, 0x80	; 128
     4a4:	c8 01       	movw	r24, r16
     4a6:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCD_8bit_SendCommand>
     4aa:	01 c0       	rjmp	.+2      	; 0x4ae <LCD_8bit_Init+0xa6>
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	1f 91       	pop	r17
     4b4:	0f 91       	pop	r16
     4b6:	08 95       	ret

000004b8 <lcd_8bit_set_cursor>:
     4b8:	62 30       	cpi	r22, 0x02	; 2
     4ba:	71 f0       	breq	.+28     	; 0x4d8 <lcd_8bit_set_cursor+0x20>
     4bc:	18 f4       	brcc	.+6      	; 0x4c4 <lcd_8bit_set_cursor+0xc>
     4be:	61 30       	cpi	r22, 0x01	; 1
     4c0:	31 f0       	breq	.+12     	; 0x4ce <lcd_8bit_set_cursor+0x16>
     4c2:	08 95       	ret
     4c4:	63 30       	cpi	r22, 0x03	; 3
     4c6:	69 f0       	breq	.+26     	; 0x4e2 <lcd_8bit_set_cursor+0x2a>
     4c8:	64 30       	cpi	r22, 0x04	; 4
     4ca:	81 f0       	breq	.+32     	; 0x4ec <lcd_8bit_set_cursor+0x34>
     4cc:	08 95       	ret
     4ce:	6f e7       	ldi	r22, 0x7F	; 127
     4d0:	64 0f       	add	r22, r20
     4d2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCD_8bit_SendCommand>
     4d6:	08 95       	ret
     4d8:	6f eb       	ldi	r22, 0xBF	; 191
     4da:	64 0f       	add	r22, r20
     4dc:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCD_8bit_SendCommand>
     4e0:	08 95       	ret
     4e2:	63 e9       	ldi	r22, 0x93	; 147
     4e4:	64 0f       	add	r22, r20
     4e6:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCD_8bit_SendCommand>
     4ea:	08 95       	ret
     4ec:	63 ed       	ldi	r22, 0xD3	; 211
     4ee:	64 0f       	add	r22, r20
     4f0:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCD_8bit_SendCommand>
     4f4:	08 95       	ret

000004f6 <LCD_8bit_SendData>:
     4f6:	ff 92       	push	r15
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	00 97       	sbiw	r24, 0x00	; 0
     502:	01 f1       	breq	.+64     	; 0x544 <LCD_8bit_SendData+0x4e>
     504:	f6 2e       	mov	r15, r22
     506:	8c 01       	movw	r16, r24
     508:	61 e0       	ldi	r22, 0x01	; 1
     50a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpio_pin_write_logic>
     50e:	c0 e0       	ldi	r28, 0x00	; 0
     510:	d0 e0       	ldi	r29, 0x00	; 0
     512:	10 c0       	rjmp	.+32     	; 0x534 <LCD_8bit_SendData+0x3e>
     514:	6f 2d       	mov	r22, r15
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	0c 2e       	mov	r0, r28
     51a:	02 c0       	rjmp	.+4      	; 0x520 <LCD_8bit_SendData+0x2a>
     51c:	75 95       	asr	r23
     51e:	67 95       	ror	r22
     520:	0a 94       	dec	r0
     522:	e2 f7       	brpl	.-8      	; 0x51c <LCD_8bit_SendData+0x26>
     524:	ce 01       	movw	r24, r28
     526:	02 96       	adiw	r24, 0x02	; 2
     528:	61 70       	andi	r22, 0x01	; 1
     52a:	80 0f       	add	r24, r16
     52c:	91 1f       	adc	r25, r17
     52e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpio_pin_write_logic>
     532:	21 96       	adiw	r28, 0x01	; 1
     534:	c8 30       	cpi	r28, 0x08	; 8
     536:	d1 05       	cpc	r29, r1
     538:	6c f3       	brlt	.-38     	; 0x514 <LCD_8bit_SendData+0x1e>
     53a:	c8 01       	movw	r24, r16
     53c:	0e 94 c3 01 	call	0x386	; 0x386 <lcd_send_8bitEnableSignal>
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	01 c0       	rjmp	.+2      	; 0x546 <LCD_8bit_SendData+0x50>
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	df 91       	pop	r29
     548:	cf 91       	pop	r28
     54a:	1f 91       	pop	r17
     54c:	0f 91       	pop	r16
     54e:	ff 90       	pop	r15
     550:	08 95       	ret

00000552 <LCD_8bit_SendString>:
     552:	0f 93       	push	r16
     554:	1f 93       	push	r17
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
     55a:	8c 01       	movw	r16, r24
     55c:	eb 01       	movw	r28, r22
     55e:	89 2b       	or	r24, r25
     560:	51 f0       	breq	.+20     	; 0x576 <LCD_8bit_SendString+0x24>
     562:	20 97       	sbiw	r28, 0x00	; 0
     564:	29 f4       	brne	.+10     	; 0x570 <LCD_8bit_SendString+0x1e>
     566:	07 c0       	rjmp	.+14     	; 0x576 <LCD_8bit_SendString+0x24>
     568:	21 96       	adiw	r28, 0x01	; 1
     56a:	c8 01       	movw	r24, r16
     56c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LCD_8bit_SendData>
     570:	68 81       	ld	r22, Y
     572:	61 11       	cpse	r22, r1
     574:	f9 cf       	rjmp	.-14     	; 0x568 <LCD_8bit_SendString+0x16>
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	1f 91       	pop	r17
     57e:	0f 91       	pop	r16
     580:	08 95       	ret

00000582 <LCD_8bit_SendString_Position>:
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	00 97       	sbiw	r24, 0x00	; 0
     58c:	81 f0       	breq	.+32     	; 0x5ae <LCD_8bit_SendString_Position+0x2c>
     58e:	61 15       	cp	r22, r1
     590:	71 05       	cpc	r23, r1
     592:	79 f0       	breq	.+30     	; 0x5b2 <LCD_8bit_SendString_Position+0x30>
     594:	34 2f       	mov	r19, r20
     596:	8b 01       	movw	r16, r22
     598:	ec 01       	movw	r28, r24
     59a:	42 2f       	mov	r20, r18
     59c:	63 2f       	mov	r22, r19
     59e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <lcd_8bit_set_cursor>
     5a2:	b8 01       	movw	r22, r16
     5a4:	ce 01       	movw	r24, r28
     5a6:	0e 94 a9 02 	call	0x552	; 0x552 <LCD_8bit_SendString>
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	03 c0       	rjmp	.+6      	; 0x5b4 <LCD_8bit_SendString_Position+0x32>
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <LCD_8bit_SendString_Position+0x32>
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	1f 91       	pop	r17
     5ba:	0f 91       	pop	r16
     5bc:	08 95       	ret

000005be <From_Short_To_String>:
ReturnType From_Short_To_String(unsigned short data,unsigned char *string)
{
     5be:	ef 92       	push	r14
     5c0:	ff 92       	push	r15
     5c2:	0f 93       	push	r16
     5c4:	1f 93       	push	r17
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	00 d0       	rcall	.+0      	; 0x5cc <From_Short_To_String+0xe>
     5cc:	00 d0       	rcall	.+0      	; 0x5ce <From_Short_To_String+0x10>
     5ce:	00 d0       	rcall	.+0      	; 0x5d0 <From_Short_To_String+0x12>
     5d0:	cd b7       	in	r28, 0x3d	; 61
     5d2:	de b7       	in	r29, 0x3e	; 62
	ReturnType ret = E_NOT_OK;
	uint8_t Temp_String[6] = {0};
     5d4:	fe 01       	movw	r30, r28
     5d6:	31 96       	adiw	r30, 0x01	; 1
     5d8:	26 e0       	ldi	r18, 0x06	; 6
     5da:	df 01       	movw	r26, r30
     5dc:	1d 92       	st	X+, r1
     5de:	2a 95       	dec	r18
     5e0:	e9 f7       	brne	.-6      	; 0x5dc <From_Short_To_String+0x1e>
	uint8_t DataCounter = 0;
	if(NULL == string)
     5e2:	61 15       	cp	r22, r1
     5e4:	71 05       	cpc	r23, r1
     5e6:	71 f1       	breq	.+92     	; 0x644 <From_Short_To_String+0x86>
     5e8:	8b 01       	movw	r16, r22
     5ea:	e9 2e       	mov	r14, r25
     5ec:	f8 2e       	mov	r15, r24
	{
		ret = E_NOT_OK;
	}
	else
	{
		memset(string, ' ', 5);
     5ee:	45 e0       	ldi	r20, 0x05	; 5
     5f0:	50 e0       	ldi	r21, 0x00	; 0
     5f2:	60 e2       	ldi	r22, 0x20	; 32
     5f4:	70 e0       	ldi	r23, 0x00	; 0
     5f6:	c8 01       	movw	r24, r16
     5f8:	0e 94 22 05 	call	0xa44	; 0xa44 <memset>
		string[5] = '\0';
     5fc:	f8 01       	movw	r30, r16
     5fe:	15 82       	std	Z+5, r1	; 0x05
		sprintf((char *)Temp_String, "%i", data);
     600:	ef 92       	push	r14
     602:	ff 92       	push	r15
     604:	8a e7       	ldi	r24, 0x7A	; 122
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	9f 93       	push	r25
     60a:	8f 93       	push	r24
     60c:	ce 01       	movw	r24, r28
     60e:	01 96       	adiw	r24, 0x01	; 1
     610:	9f 93       	push	r25
     612:	8f 93       	push	r24
     614:	0e 94 29 05 	call	0xa52	; 0xa52 <sprintf>
		while(Temp_String[DataCounter] != '\0'){
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
     61c:	0f 90       	pop	r0
     61e:	0f 90       	pop	r0
     620:	0f 90       	pop	r0
     622:	0f 90       	pop	r0
}
ReturnType From_Short_To_String(unsigned short data,unsigned char *string)
{
	ReturnType ret = E_NOT_OK;
	uint8_t Temp_String[6] = {0};
	uint8_t DataCounter = 0;
     624:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		memset(string, ' ', 5);
		string[5] = '\0';
		sprintf((char *)Temp_String, "%i", data);
		while(Temp_String[DataCounter] != '\0'){
     626:	05 c0       	rjmp	.+10     	; 0x632 <From_Short_To_String+0x74>
			string[DataCounter] = Temp_String[DataCounter];
     628:	f8 01       	movw	r30, r16
     62a:	e8 0f       	add	r30, r24
     62c:	f1 1d       	adc	r31, r1
     62e:	90 83       	st	Z, r25
			DataCounter++;
     630:	8f 5f       	subi	r24, 0xFF	; 255
	else
	{
		memset(string, ' ', 5);
		string[5] = '\0';
		sprintf((char *)Temp_String, "%i", data);
		while(Temp_String[DataCounter] != '\0'){
     632:	e1 e0       	ldi	r30, 0x01	; 1
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	ec 0f       	add	r30, r28
     638:	fd 1f       	adc	r31, r29
     63a:	e8 0f       	add	r30, r24
     63c:	f1 1d       	adc	r31, r1
     63e:	90 81       	ld	r25, Z
     640:	91 11       	cpse	r25, r1
     642:	f2 cf       	rjmp	.-28     	; 0x628 <From_Short_To_String+0x6a>
			string[DataCounter] = Temp_String[DataCounter];
			DataCounter++;
		}
	}
	return ret;
}
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	26 96       	adiw	r28, 0x06	; 6
     648:	0f b6       	in	r0, 0x3f	; 63
     64a:	f8 94       	cli
     64c:	de bf       	out	0x3e, r29	; 62
     64e:	0f be       	out	0x3f, r0	; 63
     650:	cd bf       	out	0x3d, r28	; 61
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	1f 91       	pop	r17
     658:	0f 91       	pop	r16
     65a:	ff 90       	pop	r15
     65c:	ef 90       	pop	r14
     65e:	08 95       	ret

00000660 <LM35_getTemperature>:
	.DATA[7].pin = DIO_PIN7,
	.DATA[7].direction = DIO_DIRECTION_OUTPUT,
	.DATA[7].logic = DIO_LOW,
};
uint8_t LM35_getTemperature(void)
{
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	00 d0       	rcall	.+0      	; 0x666 <LM35_getTemperature+0x6>
     666:	cd b7       	in	r28, 0x3d	; 61
     668:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp_value = 0;

	uint16_t adc_value = 0;
     66a:	1a 82       	std	Y+2, r1	; 0x02
     66c:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	ADC_Read(ADC_CHANNEL2,&adc_value);
     66e:	be 01       	movw	r22, r28
     670:	6f 5f       	subi	r22, 0xFF	; 255
     672:	7f 4f       	sbci	r23, 0xFF	; 255
     674:	82 e0       	ldi	r24, 0x02	; 2
     676:	0e 94 89 00 	call	0x112	; 0x112 <ADC_Read>

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8_t)(((uint32_t)adc_value*150*5)/(1023*1.5));
     67a:	29 81       	ldd	r18, Y+1	; 0x01
     67c:	3a 81       	ldd	r19, Y+2	; 0x02
     67e:	ae ee       	ldi	r26, 0xEE	; 238
     680:	b2 e0       	ldi	r27, 0x02	; 2
     682:	0e 94 13 05 	call	0xa26	; 0xa26 <__umulhisi3>
     686:	0e 94 85 04 	call	0x90a	; 0x90a <__floatunsisf>
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 ed       	ldi	r19, 0xD0	; 208
     68e:	4f eb       	ldi	r20, 0xBF	; 191
     690:	54 e4       	ldi	r21, 0x44	; 68
     692:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__divsf3>
     696:	0e 94 56 04 	call	0x8ac	; 0x8ac <__fixunssfsi>
     69a:	86 2f       	mov	r24, r22

	return temp_value;
}
     69c:	0f 90       	pop	r0
     69e:	0f 90       	pop	r0
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	08 95       	ret

000006a6 <main>:
uint8_t buff[16];
int main(void)
{	
	
	
	ADC1.VoltageReference = External_AVCC;
     6a6:	e4 ea       	ldi	r30, 0xA4	; 164
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	82 83       	std	Z+2, r24	; 0x02
	ADC1.InturruptMode = ADCInterruptEnabled;
     6ae:	83 83       	std	Z+3, r24	; 0x03
	ADC1.Prescaler = ADC_CLK8;
     6b0:	83 e0       	ldi	r24, 0x03	; 3
     6b2:	81 83       	std	Z+1, r24	; 0x01
	ADC1.ResultAdjust = Right_Adjusted;
     6b4:	10 82       	st	Z, r1
	
	ADC_Init(&ADC1);
     6b6:	cf 01       	movw	r24, r30
     6b8:	0e 94 79 00 	call	0xf2	; 0xf2 <ADC_Init>
	LCD_8bit_Init(&LCD1);
     6bc:	80 e7       	ldi	r24, 0x70	; 112
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	0e 94 04 02 	call	0x408	; 0x408 <LCD_8bit_Init>
	LCD_8bit_SendString(&LCD1,"temperature = ");
     6c4:	6d e7       	ldi	r22, 0x7D	; 125
     6c6:	70 e0       	ldi	r23, 0x00	; 0
     6c8:	80 e7       	ldi	r24, 0x70	; 112
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	0e 94 a9 02 	call	0x552	; 0x552 <LCD_8bit_SendString>
	while(1)
	{
		res_value = LM35_getTemperature();
     6d0:	0e 94 30 03 	call	0x660	; 0x660 <LM35_getTemperature>
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <res_value+0x1>
     6da:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <res_value>
		if(res_value>=100)
     6de:	84 36       	cpi	r24, 0x64	; 100
     6e0:	91 05       	cpc	r25, r1
     6e2:	68 f0       	brcs	.+26     	; 0x6fe <main+0x58>
		{
			 
			From_Short_To_String(res_value,buff);
     6e4:	62 e9       	ldi	r22, 0x92	; 146
     6e6:	70 e0       	ldi	r23, 0x00	; 0
     6e8:	0e 94 df 02 	call	0x5be	; 0x5be <From_Short_To_String>
			LCD_8bit_SendString_Position(&LCD1,buff,2,1);
     6ec:	21 e0       	ldi	r18, 0x01	; 1
     6ee:	42 e0       	ldi	r20, 0x02	; 2
     6f0:	62 e9       	ldi	r22, 0x92	; 146
     6f2:	70 e0       	ldi	r23, 0x00	; 0
     6f4:	80 e7       	ldi	r24, 0x70	; 112
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_8bit_SendString_Position>
     6fc:	e9 cf       	rjmp	.-46     	; 0x6d0 <main+0x2a>
			
		}
		else
		{
			From_Short_To_String(res_value,buff);
     6fe:	62 e9       	ldi	r22, 0x92	; 146
     700:	70 e0       	ldi	r23, 0x00	; 0
     702:	0e 94 df 02 	call	0x5be	; 0x5be <From_Short_To_String>
			LCD_8bit_SendString_Position(&LCD1,buff,2,1);
     706:	21 e0       	ldi	r18, 0x01	; 1
     708:	42 e0       	ldi	r20, 0x02	; 2
     70a:	62 e9       	ldi	r22, 0x92	; 146
     70c:	70 e0       	ldi	r23, 0x00	; 0
     70e:	80 e7       	ldi	r24, 0x70	; 112
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_8bit_SendString_Position>
     716:	dc cf       	rjmp	.-72     	; 0x6d0 <main+0x2a>

00000718 <__vector_10>:
void PWM0_CALLBACK_CompareMatch_INTERRUPT(Timer0callback callback){
	PWM_CALLBACK_COMPARE=callback;
}

ISR(TIMER0_COMP_vect)
{
     718:	1f 92       	push	r1
     71a:	0f 92       	push	r0
     71c:	0f b6       	in	r0, 0x3f	; 63
     71e:	0f 92       	push	r0
     720:	11 24       	eor	r1, r1
     722:	2f 93       	push	r18
     724:	3f 93       	push	r19
     726:	4f 93       	push	r20
     728:	5f 93       	push	r21
     72a:	6f 93       	push	r22
     72c:	7f 93       	push	r23
     72e:	8f 93       	push	r24
     730:	9f 93       	push	r25
     732:	af 93       	push	r26
     734:	bf 93       	push	r27
     736:	ef 93       	push	r30
     738:	ff 93       	push	r31
	PWM_Compare_Number++;
     73a:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <PWM_Compare_Number>
     73e:	8f 5f       	subi	r24, 0xFF	; 255
     740:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <PWM_Compare_Number>
	PWM_CALLBACK_COMPARE();
     744:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <PWM_CALLBACK_COMPARE>
     748:	f0 91 b1 00 	lds	r31, 0x00B1	; 0x8000b1 <PWM_CALLBACK_COMPARE+0x1>
     74c:	09 95       	icall
}
     74e:	ff 91       	pop	r31
     750:	ef 91       	pop	r30
     752:	bf 91       	pop	r27
     754:	af 91       	pop	r26
     756:	9f 91       	pop	r25
     758:	8f 91       	pop	r24
     75a:	7f 91       	pop	r23
     75c:	6f 91       	pop	r22
     75e:	5f 91       	pop	r21
     760:	4f 91       	pop	r20
     762:	3f 91       	pop	r19
     764:	2f 91       	pop	r18
     766:	0f 90       	pop	r0
     768:	0f be       	out	0x3f, r0	; 63
     76a:	0f 90       	pop	r0
     76c:	1f 90       	pop	r1
     76e:	18 95       	reti

00000770 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
     770:	1f 92       	push	r1
     772:	0f 92       	push	r0
     774:	0f b6       	in	r0, 0x3f	; 63
     776:	0f 92       	push	r0
     778:	11 24       	eor	r1, r1
     77a:	2f 93       	push	r18
     77c:	3f 93       	push	r19
     77e:	4f 93       	push	r20
     780:	5f 93       	push	r21
     782:	6f 93       	push	r22
     784:	7f 93       	push	r23
     786:	8f 93       	push	r24
     788:	9f 93       	push	r25
     78a:	af 93       	push	r26
     78c:	bf 93       	push	r27
     78e:	ef 93       	push	r30
     790:	ff 93       	push	r31
	PWM_Over_Flow_Number++;
     792:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <PWM_Over_Flow_Number>
     796:	8f 5f       	subi	r24, 0xFF	; 255
     798:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <PWM_Over_Flow_Number>
	PWM_CALLBACK_OVER_FLOW();
     79c:	e0 91 ae 00 	lds	r30, 0x00AE	; 0x8000ae <PWM_CALLBACK_OVER_FLOW>
     7a0:	f0 91 af 00 	lds	r31, 0x00AF	; 0x8000af <PWM_CALLBACK_OVER_FLOW+0x1>
     7a4:	09 95       	icall
     7a6:	ff 91       	pop	r31
     7a8:	ef 91       	pop	r30
     7aa:	bf 91       	pop	r27
     7ac:	af 91       	pop	r26
     7ae:	9f 91       	pop	r25
     7b0:	8f 91       	pop	r24
     7b2:	7f 91       	pop	r23
     7b4:	6f 91       	pop	r22
     7b6:	5f 91       	pop	r21
     7b8:	4f 91       	pop	r20
     7ba:	3f 91       	pop	r19
     7bc:	2f 91       	pop	r18
     7be:	0f 90       	pop	r0
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	0f 90       	pop	r0
     7c4:	1f 90       	pop	r1
     7c6:	18 95       	reti

000007c8 <__divsf3>:
     7c8:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__divsf3x>
     7cc:	0c 94 d9 04 	jmp	0x9b2	; 0x9b2 <__fp_round>
     7d0:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fp_pscB>
     7d4:	58 f0       	brcs	.+22     	; 0x7ec <__divsf3+0x24>
     7d6:	0e 94 cb 04 	call	0x996	; 0x996 <__fp_pscA>
     7da:	40 f0       	brcs	.+16     	; 0x7ec <__divsf3+0x24>
     7dc:	29 f4       	brne	.+10     	; 0x7e8 <__divsf3+0x20>
     7de:	5f 3f       	cpi	r21, 0xFF	; 255
     7e0:	29 f0       	breq	.+10     	; 0x7ec <__divsf3+0x24>
     7e2:	0c 94 c2 04 	jmp	0x984	; 0x984 <__fp_inf>
     7e6:	51 11       	cpse	r21, r1
     7e8:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <__fp_szero>
     7ec:	0c 94 c8 04 	jmp	0x990	; 0x990 <__fp_nan>

000007f0 <__divsf3x>:
     7f0:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__fp_split3>
     7f4:	68 f3       	brcs	.-38     	; 0x7d0 <__divsf3+0x8>

000007f6 <__divsf3_pse>:
     7f6:	99 23       	and	r25, r25
     7f8:	b1 f3       	breq	.-20     	; 0x7e6 <__divsf3+0x1e>
     7fa:	55 23       	and	r21, r21
     7fc:	91 f3       	breq	.-28     	; 0x7e2 <__divsf3+0x1a>
     7fe:	95 1b       	sub	r25, r21
     800:	55 0b       	sbc	r21, r21
     802:	bb 27       	eor	r27, r27
     804:	aa 27       	eor	r26, r26
     806:	62 17       	cp	r22, r18
     808:	73 07       	cpc	r23, r19
     80a:	84 07       	cpc	r24, r20
     80c:	38 f0       	brcs	.+14     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     80e:	9f 5f       	subi	r25, 0xFF	; 255
     810:	5f 4f       	sbci	r21, 0xFF	; 255
     812:	22 0f       	add	r18, r18
     814:	33 1f       	adc	r19, r19
     816:	44 1f       	adc	r20, r20
     818:	aa 1f       	adc	r26, r26
     81a:	a9 f3       	breq	.-22     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     81c:	35 d0       	rcall	.+106    	; 0x888 <__stack+0x29>
     81e:	0e 2e       	mov	r0, r30
     820:	3a f0       	brmi	.+14     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
     822:	e0 e8       	ldi	r30, 0x80	; 128
     824:	32 d0       	rcall	.+100    	; 0x88a <__stack+0x2b>
     826:	91 50       	subi	r25, 0x01	; 1
     828:	50 40       	sbci	r21, 0x00	; 0
     82a:	e6 95       	lsr	r30
     82c:	00 1c       	adc	r0, r0
     82e:	ca f7       	brpl	.-14     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     830:	2b d0       	rcall	.+86     	; 0x888 <__stack+0x29>
     832:	fe 2f       	mov	r31, r30
     834:	29 d0       	rcall	.+82     	; 0x888 <__stack+0x29>
     836:	66 0f       	add	r22, r22
     838:	77 1f       	adc	r23, r23
     83a:	88 1f       	adc	r24, r24
     83c:	bb 1f       	adc	r27, r27
     83e:	26 17       	cp	r18, r22
     840:	37 07       	cpc	r19, r23
     842:	48 07       	cpc	r20, r24
     844:	ab 07       	cpc	r26, r27
     846:	b0 e8       	ldi	r27, 0x80	; 128
     848:	09 f0       	breq	.+2      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     84a:	bb 0b       	sbc	r27, r27
     84c:	80 2d       	mov	r24, r0
     84e:	bf 01       	movw	r22, r30
     850:	ff 27       	eor	r31, r31
     852:	93 58       	subi	r25, 0x83	; 131
     854:	5f 4f       	sbci	r21, 0xFF	; 255
     856:	3a f0       	brmi	.+14     	; 0x866 <__stack+0x7>
     858:	9e 3f       	cpi	r25, 0xFE	; 254
     85a:	51 05       	cpc	r21, r1
     85c:	78 f0       	brcs	.+30     	; 0x87c <__stack+0x1d>
     85e:	0c 94 c2 04 	jmp	0x984	; 0x984 <__fp_inf>
     862:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <__fp_szero>
     866:	5f 3f       	cpi	r21, 0xFF	; 255
     868:	e4 f3       	brlt	.-8      	; 0x862 <__stack+0x3>
     86a:	98 3e       	cpi	r25, 0xE8	; 232
     86c:	d4 f3       	brlt	.-12     	; 0x862 <__stack+0x3>
     86e:	86 95       	lsr	r24
     870:	77 95       	ror	r23
     872:	67 95       	ror	r22
     874:	b7 95       	ror	r27
     876:	f7 95       	ror	r31
     878:	9f 5f       	subi	r25, 0xFF	; 255
     87a:	c9 f7       	brne	.-14     	; 0x86e <__stack+0xf>
     87c:	88 0f       	add	r24, r24
     87e:	91 1d       	adc	r25, r1
     880:	96 95       	lsr	r25
     882:	87 95       	ror	r24
     884:	97 f9       	bld	r25, 7
     886:	08 95       	ret
     888:	e1 e0       	ldi	r30, 0x01	; 1
     88a:	66 0f       	add	r22, r22
     88c:	77 1f       	adc	r23, r23
     88e:	88 1f       	adc	r24, r24
     890:	bb 1f       	adc	r27, r27
     892:	62 17       	cp	r22, r18
     894:	73 07       	cpc	r23, r19
     896:	84 07       	cpc	r24, r20
     898:	ba 07       	cpc	r27, r26
     89a:	20 f0       	brcs	.+8      	; 0x8a4 <__stack+0x45>
     89c:	62 1b       	sub	r22, r18
     89e:	73 0b       	sbc	r23, r19
     8a0:	84 0b       	sbc	r24, r20
     8a2:	ba 0b       	sbc	r27, r26
     8a4:	ee 1f       	adc	r30, r30
     8a6:	88 f7       	brcc	.-30     	; 0x88a <__stack+0x2b>
     8a8:	e0 95       	com	r30
     8aa:	08 95       	ret

000008ac <__fixunssfsi>:
     8ac:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__fp_splitA>
     8b0:	88 f0       	brcs	.+34     	; 0x8d4 <__fixunssfsi+0x28>
     8b2:	9f 57       	subi	r25, 0x7F	; 127
     8b4:	98 f0       	brcs	.+38     	; 0x8dc <__fixunssfsi+0x30>
     8b6:	b9 2f       	mov	r27, r25
     8b8:	99 27       	eor	r25, r25
     8ba:	b7 51       	subi	r27, 0x17	; 23
     8bc:	b0 f0       	brcs	.+44     	; 0x8ea <__fixunssfsi+0x3e>
     8be:	e1 f0       	breq	.+56     	; 0x8f8 <__fixunssfsi+0x4c>
     8c0:	66 0f       	add	r22, r22
     8c2:	77 1f       	adc	r23, r23
     8c4:	88 1f       	adc	r24, r24
     8c6:	99 1f       	adc	r25, r25
     8c8:	1a f0       	brmi	.+6      	; 0x8d0 <__fixunssfsi+0x24>
     8ca:	ba 95       	dec	r27
     8cc:	c9 f7       	brne	.-14     	; 0x8c0 <__fixunssfsi+0x14>
     8ce:	14 c0       	rjmp	.+40     	; 0x8f8 <__fixunssfsi+0x4c>
     8d0:	b1 30       	cpi	r27, 0x01	; 1
     8d2:	91 f0       	breq	.+36     	; 0x8f8 <__fixunssfsi+0x4c>
     8d4:	0e 94 0c 05 	call	0xa18	; 0xa18 <__fp_zero>
     8d8:	b1 e0       	ldi	r27, 0x01	; 1
     8da:	08 95       	ret
     8dc:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__fp_zero>
     8e0:	67 2f       	mov	r22, r23
     8e2:	78 2f       	mov	r23, r24
     8e4:	88 27       	eor	r24, r24
     8e6:	b8 5f       	subi	r27, 0xF8	; 248
     8e8:	39 f0       	breq	.+14     	; 0x8f8 <__fixunssfsi+0x4c>
     8ea:	b9 3f       	cpi	r27, 0xF9	; 249
     8ec:	cc f3       	brlt	.-14     	; 0x8e0 <__fixunssfsi+0x34>
     8ee:	86 95       	lsr	r24
     8f0:	77 95       	ror	r23
     8f2:	67 95       	ror	r22
     8f4:	b3 95       	inc	r27
     8f6:	d9 f7       	brne	.-10     	; 0x8ee <__fixunssfsi+0x42>
     8f8:	3e f4       	brtc	.+14     	; 0x908 <__fixunssfsi+0x5c>
     8fa:	90 95       	com	r25
     8fc:	80 95       	com	r24
     8fe:	70 95       	com	r23
     900:	61 95       	neg	r22
     902:	7f 4f       	sbci	r23, 0xFF	; 255
     904:	8f 4f       	sbci	r24, 0xFF	; 255
     906:	9f 4f       	sbci	r25, 0xFF	; 255
     908:	08 95       	ret

0000090a <__floatunsisf>:
     90a:	e8 94       	clt
     90c:	09 c0       	rjmp	.+18     	; 0x920 <__floatsisf+0x12>

0000090e <__floatsisf>:
     90e:	97 fb       	bst	r25, 7
     910:	3e f4       	brtc	.+14     	; 0x920 <__floatsisf+0x12>
     912:	90 95       	com	r25
     914:	80 95       	com	r24
     916:	70 95       	com	r23
     918:	61 95       	neg	r22
     91a:	7f 4f       	sbci	r23, 0xFF	; 255
     91c:	8f 4f       	sbci	r24, 0xFF	; 255
     91e:	9f 4f       	sbci	r25, 0xFF	; 255
     920:	99 23       	and	r25, r25
     922:	a9 f0       	breq	.+42     	; 0x94e <__floatsisf+0x40>
     924:	f9 2f       	mov	r31, r25
     926:	96 e9       	ldi	r25, 0x96	; 150
     928:	bb 27       	eor	r27, r27
     92a:	93 95       	inc	r25
     92c:	f6 95       	lsr	r31
     92e:	87 95       	ror	r24
     930:	77 95       	ror	r23
     932:	67 95       	ror	r22
     934:	b7 95       	ror	r27
     936:	f1 11       	cpse	r31, r1
     938:	f8 cf       	rjmp	.-16     	; 0x92a <__floatsisf+0x1c>
     93a:	fa f4       	brpl	.+62     	; 0x97a <__floatsisf+0x6c>
     93c:	bb 0f       	add	r27, r27
     93e:	11 f4       	brne	.+4      	; 0x944 <__floatsisf+0x36>
     940:	60 ff       	sbrs	r22, 0
     942:	1b c0       	rjmp	.+54     	; 0x97a <__floatsisf+0x6c>
     944:	6f 5f       	subi	r22, 0xFF	; 255
     946:	7f 4f       	sbci	r23, 0xFF	; 255
     948:	8f 4f       	sbci	r24, 0xFF	; 255
     94a:	9f 4f       	sbci	r25, 0xFF	; 255
     94c:	16 c0       	rjmp	.+44     	; 0x97a <__floatsisf+0x6c>
     94e:	88 23       	and	r24, r24
     950:	11 f0       	breq	.+4      	; 0x956 <__floatsisf+0x48>
     952:	96 e9       	ldi	r25, 0x96	; 150
     954:	11 c0       	rjmp	.+34     	; 0x978 <__floatsisf+0x6a>
     956:	77 23       	and	r23, r23
     958:	21 f0       	breq	.+8      	; 0x962 <__floatsisf+0x54>
     95a:	9e e8       	ldi	r25, 0x8E	; 142
     95c:	87 2f       	mov	r24, r23
     95e:	76 2f       	mov	r23, r22
     960:	05 c0       	rjmp	.+10     	; 0x96c <__floatsisf+0x5e>
     962:	66 23       	and	r22, r22
     964:	71 f0       	breq	.+28     	; 0x982 <__floatsisf+0x74>
     966:	96 e8       	ldi	r25, 0x86	; 134
     968:	86 2f       	mov	r24, r22
     96a:	70 e0       	ldi	r23, 0x00	; 0
     96c:	60 e0       	ldi	r22, 0x00	; 0
     96e:	2a f0       	brmi	.+10     	; 0x97a <__floatsisf+0x6c>
     970:	9a 95       	dec	r25
     972:	66 0f       	add	r22, r22
     974:	77 1f       	adc	r23, r23
     976:	88 1f       	adc	r24, r24
     978:	da f7       	brpl	.-10     	; 0x970 <__floatsisf+0x62>
     97a:	88 0f       	add	r24, r24
     97c:	96 95       	lsr	r25
     97e:	87 95       	ror	r24
     980:	97 f9       	bld	r25, 7
     982:	08 95       	ret

00000984 <__fp_inf>:
     984:	97 f9       	bld	r25, 7
     986:	9f 67       	ori	r25, 0x7F	; 127
     988:	80 e8       	ldi	r24, 0x80	; 128
     98a:	70 e0       	ldi	r23, 0x00	; 0
     98c:	60 e0       	ldi	r22, 0x00	; 0
     98e:	08 95       	ret

00000990 <__fp_nan>:
     990:	9f ef       	ldi	r25, 0xFF	; 255
     992:	80 ec       	ldi	r24, 0xC0	; 192
     994:	08 95       	ret

00000996 <__fp_pscA>:
     996:	00 24       	eor	r0, r0
     998:	0a 94       	dec	r0
     99a:	16 16       	cp	r1, r22
     99c:	17 06       	cpc	r1, r23
     99e:	18 06       	cpc	r1, r24
     9a0:	09 06       	cpc	r0, r25
     9a2:	08 95       	ret

000009a4 <__fp_pscB>:
     9a4:	00 24       	eor	r0, r0
     9a6:	0a 94       	dec	r0
     9a8:	12 16       	cp	r1, r18
     9aa:	13 06       	cpc	r1, r19
     9ac:	14 06       	cpc	r1, r20
     9ae:	05 06       	cpc	r0, r21
     9b0:	08 95       	ret

000009b2 <__fp_round>:
     9b2:	09 2e       	mov	r0, r25
     9b4:	03 94       	inc	r0
     9b6:	00 0c       	add	r0, r0
     9b8:	11 f4       	brne	.+4      	; 0x9be <__fp_round+0xc>
     9ba:	88 23       	and	r24, r24
     9bc:	52 f0       	brmi	.+20     	; 0x9d2 <__fp_round+0x20>
     9be:	bb 0f       	add	r27, r27
     9c0:	40 f4       	brcc	.+16     	; 0x9d2 <__fp_round+0x20>
     9c2:	bf 2b       	or	r27, r31
     9c4:	11 f4       	brne	.+4      	; 0x9ca <__fp_round+0x18>
     9c6:	60 ff       	sbrs	r22, 0
     9c8:	04 c0       	rjmp	.+8      	; 0x9d2 <__fp_round+0x20>
     9ca:	6f 5f       	subi	r22, 0xFF	; 255
     9cc:	7f 4f       	sbci	r23, 0xFF	; 255
     9ce:	8f 4f       	sbci	r24, 0xFF	; 255
     9d0:	9f 4f       	sbci	r25, 0xFF	; 255
     9d2:	08 95       	ret

000009d4 <__fp_split3>:
     9d4:	57 fd       	sbrc	r21, 7
     9d6:	90 58       	subi	r25, 0x80	; 128
     9d8:	44 0f       	add	r20, r20
     9da:	55 1f       	adc	r21, r21
     9dc:	59 f0       	breq	.+22     	; 0x9f4 <__fp_splitA+0x10>
     9de:	5f 3f       	cpi	r21, 0xFF	; 255
     9e0:	71 f0       	breq	.+28     	; 0x9fe <__fp_splitA+0x1a>
     9e2:	47 95       	ror	r20

000009e4 <__fp_splitA>:
     9e4:	88 0f       	add	r24, r24
     9e6:	97 fb       	bst	r25, 7
     9e8:	99 1f       	adc	r25, r25
     9ea:	61 f0       	breq	.+24     	; 0xa04 <__fp_splitA+0x20>
     9ec:	9f 3f       	cpi	r25, 0xFF	; 255
     9ee:	79 f0       	breq	.+30     	; 0xa0e <__fp_splitA+0x2a>
     9f0:	87 95       	ror	r24
     9f2:	08 95       	ret
     9f4:	12 16       	cp	r1, r18
     9f6:	13 06       	cpc	r1, r19
     9f8:	14 06       	cpc	r1, r20
     9fa:	55 1f       	adc	r21, r21
     9fc:	f2 cf       	rjmp	.-28     	; 0x9e2 <__fp_split3+0xe>
     9fe:	46 95       	lsr	r20
     a00:	f1 df       	rcall	.-30     	; 0x9e4 <__fp_splitA>
     a02:	08 c0       	rjmp	.+16     	; 0xa14 <__fp_splitA+0x30>
     a04:	16 16       	cp	r1, r22
     a06:	17 06       	cpc	r1, r23
     a08:	18 06       	cpc	r1, r24
     a0a:	99 1f       	adc	r25, r25
     a0c:	f1 cf       	rjmp	.-30     	; 0x9f0 <__fp_splitA+0xc>
     a0e:	86 95       	lsr	r24
     a10:	71 05       	cpc	r23, r1
     a12:	61 05       	cpc	r22, r1
     a14:	08 94       	sec
     a16:	08 95       	ret

00000a18 <__fp_zero>:
     a18:	e8 94       	clt

00000a1a <__fp_szero>:
     a1a:	bb 27       	eor	r27, r27
     a1c:	66 27       	eor	r22, r22
     a1e:	77 27       	eor	r23, r23
     a20:	cb 01       	movw	r24, r22
     a22:	97 f9       	bld	r25, 7
     a24:	08 95       	ret

00000a26 <__umulhisi3>:
     a26:	a2 9f       	mul	r26, r18
     a28:	b0 01       	movw	r22, r0
     a2a:	b3 9f       	mul	r27, r19
     a2c:	c0 01       	movw	r24, r0
     a2e:	a3 9f       	mul	r26, r19
     a30:	70 0d       	add	r23, r0
     a32:	81 1d       	adc	r24, r1
     a34:	11 24       	eor	r1, r1
     a36:	91 1d       	adc	r25, r1
     a38:	b2 9f       	mul	r27, r18
     a3a:	70 0d       	add	r23, r0
     a3c:	81 1d       	adc	r24, r1
     a3e:	11 24       	eor	r1, r1
     a40:	91 1d       	adc	r25, r1
     a42:	08 95       	ret

00000a44 <memset>:
     a44:	dc 01       	movw	r26, r24
     a46:	01 c0       	rjmp	.+2      	; 0xa4a <memset+0x6>
     a48:	6d 93       	st	X+, r22
     a4a:	41 50       	subi	r20, 0x01	; 1
     a4c:	50 40       	sbci	r21, 0x00	; 0
     a4e:	e0 f7       	brcc	.-8      	; 0xa48 <memset+0x4>
     a50:	08 95       	ret

00000a52 <sprintf>:
     a52:	ae e0       	ldi	r26, 0x0E	; 14
     a54:	b0 e0       	ldi	r27, 0x00	; 0
     a56:	ef e2       	ldi	r30, 0x2F	; 47
     a58:	f5 e0       	ldi	r31, 0x05	; 5
     a5a:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__prologue_saves__+0x1c>
     a5e:	0d 89       	ldd	r16, Y+21	; 0x15
     a60:	1e 89       	ldd	r17, Y+22	; 0x16
     a62:	86 e0       	ldi	r24, 0x06	; 6
     a64:	8c 83       	std	Y+4, r24	; 0x04
     a66:	1a 83       	std	Y+2, r17	; 0x02
     a68:	09 83       	std	Y+1, r16	; 0x01
     a6a:	8f ef       	ldi	r24, 0xFF	; 255
     a6c:	9f e7       	ldi	r25, 0x7F	; 127
     a6e:	9e 83       	std	Y+6, r25	; 0x06
     a70:	8d 83       	std	Y+5, r24	; 0x05
     a72:	ae 01       	movw	r20, r28
     a74:	47 5e       	subi	r20, 0xE7	; 231
     a76:	5f 4f       	sbci	r21, 0xFF	; 255
     a78:	6f 89       	ldd	r22, Y+23	; 0x17
     a7a:	78 8d       	ldd	r23, Y+24	; 0x18
     a7c:	ce 01       	movw	r24, r28
     a7e:	01 96       	adiw	r24, 0x01	; 1
     a80:	0e 94 4b 05 	call	0xa96	; 0xa96 <vfprintf>
     a84:	ef 81       	ldd	r30, Y+7	; 0x07
     a86:	f8 85       	ldd	r31, Y+8	; 0x08
     a88:	e0 0f       	add	r30, r16
     a8a:	f1 1f       	adc	r31, r17
     a8c:	10 82       	st	Z, r1
     a8e:	2e 96       	adiw	r28, 0x0e	; 14
     a90:	e4 e0       	ldi	r30, 0x04	; 4
     a92:	0c 94 06 08 	jmp	0x100c	; 0x100c <__epilogue_restores__+0x1c>

00000a96 <vfprintf>:
     a96:	ab e0       	ldi	r26, 0x0B	; 11
     a98:	b0 e0       	ldi	r27, 0x00	; 0
     a9a:	e1 e5       	ldi	r30, 0x51	; 81
     a9c:	f5 e0       	ldi	r31, 0x05	; 5
     a9e:	0c 94 dc 07 	jmp	0xfb8	; 0xfb8 <__prologue_saves__>
     aa2:	6c 01       	movw	r12, r24
     aa4:	7b 01       	movw	r14, r22
     aa6:	8a 01       	movw	r16, r20
     aa8:	fc 01       	movw	r30, r24
     aaa:	17 82       	std	Z+7, r1	; 0x07
     aac:	16 82       	std	Z+6, r1	; 0x06
     aae:	83 81       	ldd	r24, Z+3	; 0x03
     ab0:	81 ff       	sbrs	r24, 1
     ab2:	cc c1       	rjmp	.+920    	; 0xe4c <vfprintf+0x3b6>
     ab4:	ce 01       	movw	r24, r28
     ab6:	01 96       	adiw	r24, 0x01	; 1
     ab8:	3c 01       	movw	r6, r24
     aba:	f6 01       	movw	r30, r12
     abc:	93 81       	ldd	r25, Z+3	; 0x03
     abe:	f7 01       	movw	r30, r14
     ac0:	93 fd       	sbrc	r25, 3
     ac2:	85 91       	lpm	r24, Z+
     ac4:	93 ff       	sbrs	r25, 3
     ac6:	81 91       	ld	r24, Z+
     ac8:	7f 01       	movw	r14, r30
     aca:	88 23       	and	r24, r24
     acc:	09 f4       	brne	.+2      	; 0xad0 <vfprintf+0x3a>
     ace:	ba c1       	rjmp	.+884    	; 0xe44 <vfprintf+0x3ae>
     ad0:	85 32       	cpi	r24, 0x25	; 37
     ad2:	39 f4       	brne	.+14     	; 0xae2 <vfprintf+0x4c>
     ad4:	93 fd       	sbrc	r25, 3
     ad6:	85 91       	lpm	r24, Z+
     ad8:	93 ff       	sbrs	r25, 3
     ada:	81 91       	ld	r24, Z+
     adc:	7f 01       	movw	r14, r30
     ade:	85 32       	cpi	r24, 0x25	; 37
     ae0:	29 f4       	brne	.+10     	; 0xaec <vfprintf+0x56>
     ae2:	b6 01       	movw	r22, r12
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	0e 94 42 07 	call	0xe84	; 0xe84 <fputc>
     aea:	e7 cf       	rjmp	.-50     	; 0xaba <vfprintf+0x24>
     aec:	91 2c       	mov	r9, r1
     aee:	21 2c       	mov	r2, r1
     af0:	31 2c       	mov	r3, r1
     af2:	ff e1       	ldi	r31, 0x1F	; 31
     af4:	f3 15       	cp	r31, r3
     af6:	d8 f0       	brcs	.+54     	; 0xb2e <vfprintf+0x98>
     af8:	8b 32       	cpi	r24, 0x2B	; 43
     afa:	79 f0       	breq	.+30     	; 0xb1a <vfprintf+0x84>
     afc:	38 f4       	brcc	.+14     	; 0xb0c <vfprintf+0x76>
     afe:	80 32       	cpi	r24, 0x20	; 32
     b00:	79 f0       	breq	.+30     	; 0xb20 <vfprintf+0x8a>
     b02:	83 32       	cpi	r24, 0x23	; 35
     b04:	a1 f4       	brne	.+40     	; 0xb2e <vfprintf+0x98>
     b06:	23 2d       	mov	r18, r3
     b08:	20 61       	ori	r18, 0x10	; 16
     b0a:	1d c0       	rjmp	.+58     	; 0xb46 <vfprintf+0xb0>
     b0c:	8d 32       	cpi	r24, 0x2D	; 45
     b0e:	61 f0       	breq	.+24     	; 0xb28 <vfprintf+0x92>
     b10:	80 33       	cpi	r24, 0x30	; 48
     b12:	69 f4       	brne	.+26     	; 0xb2e <vfprintf+0x98>
     b14:	23 2d       	mov	r18, r3
     b16:	21 60       	ori	r18, 0x01	; 1
     b18:	16 c0       	rjmp	.+44     	; 0xb46 <vfprintf+0xb0>
     b1a:	83 2d       	mov	r24, r3
     b1c:	82 60       	ori	r24, 0x02	; 2
     b1e:	38 2e       	mov	r3, r24
     b20:	e3 2d       	mov	r30, r3
     b22:	e4 60       	ori	r30, 0x04	; 4
     b24:	3e 2e       	mov	r3, r30
     b26:	2a c0       	rjmp	.+84     	; 0xb7c <vfprintf+0xe6>
     b28:	f3 2d       	mov	r31, r3
     b2a:	f8 60       	ori	r31, 0x08	; 8
     b2c:	1d c0       	rjmp	.+58     	; 0xb68 <vfprintf+0xd2>
     b2e:	37 fc       	sbrc	r3, 7
     b30:	2d c0       	rjmp	.+90     	; 0xb8c <vfprintf+0xf6>
     b32:	20 ed       	ldi	r18, 0xD0	; 208
     b34:	28 0f       	add	r18, r24
     b36:	2a 30       	cpi	r18, 0x0A	; 10
     b38:	40 f0       	brcs	.+16     	; 0xb4a <vfprintf+0xb4>
     b3a:	8e 32       	cpi	r24, 0x2E	; 46
     b3c:	b9 f4       	brne	.+46     	; 0xb6c <vfprintf+0xd6>
     b3e:	36 fc       	sbrc	r3, 6
     b40:	81 c1       	rjmp	.+770    	; 0xe44 <vfprintf+0x3ae>
     b42:	23 2d       	mov	r18, r3
     b44:	20 64       	ori	r18, 0x40	; 64
     b46:	32 2e       	mov	r3, r18
     b48:	19 c0       	rjmp	.+50     	; 0xb7c <vfprintf+0xe6>
     b4a:	36 fe       	sbrs	r3, 6
     b4c:	06 c0       	rjmp	.+12     	; 0xb5a <vfprintf+0xc4>
     b4e:	8a e0       	ldi	r24, 0x0A	; 10
     b50:	98 9e       	mul	r9, r24
     b52:	20 0d       	add	r18, r0
     b54:	11 24       	eor	r1, r1
     b56:	92 2e       	mov	r9, r18
     b58:	11 c0       	rjmp	.+34     	; 0xb7c <vfprintf+0xe6>
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	2e 9e       	mul	r2, r30
     b5e:	20 0d       	add	r18, r0
     b60:	11 24       	eor	r1, r1
     b62:	22 2e       	mov	r2, r18
     b64:	f3 2d       	mov	r31, r3
     b66:	f0 62       	ori	r31, 0x20	; 32
     b68:	3f 2e       	mov	r3, r31
     b6a:	08 c0       	rjmp	.+16     	; 0xb7c <vfprintf+0xe6>
     b6c:	8c 36       	cpi	r24, 0x6C	; 108
     b6e:	21 f4       	brne	.+8      	; 0xb78 <vfprintf+0xe2>
     b70:	83 2d       	mov	r24, r3
     b72:	80 68       	ori	r24, 0x80	; 128
     b74:	38 2e       	mov	r3, r24
     b76:	02 c0       	rjmp	.+4      	; 0xb7c <vfprintf+0xe6>
     b78:	88 36       	cpi	r24, 0x68	; 104
     b7a:	41 f4       	brne	.+16     	; 0xb8c <vfprintf+0xf6>
     b7c:	f7 01       	movw	r30, r14
     b7e:	93 fd       	sbrc	r25, 3
     b80:	85 91       	lpm	r24, Z+
     b82:	93 ff       	sbrs	r25, 3
     b84:	81 91       	ld	r24, Z+
     b86:	7f 01       	movw	r14, r30
     b88:	81 11       	cpse	r24, r1
     b8a:	b3 cf       	rjmp	.-154    	; 0xaf2 <vfprintf+0x5c>
     b8c:	98 2f       	mov	r25, r24
     b8e:	9f 7d       	andi	r25, 0xDF	; 223
     b90:	95 54       	subi	r25, 0x45	; 69
     b92:	93 30       	cpi	r25, 0x03	; 3
     b94:	28 f4       	brcc	.+10     	; 0xba0 <vfprintf+0x10a>
     b96:	0c 5f       	subi	r16, 0xFC	; 252
     b98:	1f 4f       	sbci	r17, 0xFF	; 255
     b9a:	9f e3       	ldi	r25, 0x3F	; 63
     b9c:	99 83       	std	Y+1, r25	; 0x01
     b9e:	0d c0       	rjmp	.+26     	; 0xbba <vfprintf+0x124>
     ba0:	83 36       	cpi	r24, 0x63	; 99
     ba2:	31 f0       	breq	.+12     	; 0xbb0 <vfprintf+0x11a>
     ba4:	83 37       	cpi	r24, 0x73	; 115
     ba6:	71 f0       	breq	.+28     	; 0xbc4 <vfprintf+0x12e>
     ba8:	83 35       	cpi	r24, 0x53	; 83
     baa:	09 f0       	breq	.+2      	; 0xbae <vfprintf+0x118>
     bac:	59 c0       	rjmp	.+178    	; 0xc60 <vfprintf+0x1ca>
     bae:	21 c0       	rjmp	.+66     	; 0xbf2 <vfprintf+0x15c>
     bb0:	f8 01       	movw	r30, r16
     bb2:	80 81       	ld	r24, Z
     bb4:	89 83       	std	Y+1, r24	; 0x01
     bb6:	0e 5f       	subi	r16, 0xFE	; 254
     bb8:	1f 4f       	sbci	r17, 0xFF	; 255
     bba:	88 24       	eor	r8, r8
     bbc:	83 94       	inc	r8
     bbe:	91 2c       	mov	r9, r1
     bc0:	53 01       	movw	r10, r6
     bc2:	13 c0       	rjmp	.+38     	; 0xbea <vfprintf+0x154>
     bc4:	28 01       	movw	r4, r16
     bc6:	f2 e0       	ldi	r31, 0x02	; 2
     bc8:	4f 0e       	add	r4, r31
     bca:	51 1c       	adc	r5, r1
     bcc:	f8 01       	movw	r30, r16
     bce:	a0 80       	ld	r10, Z
     bd0:	b1 80       	ldd	r11, Z+1	; 0x01
     bd2:	36 fe       	sbrs	r3, 6
     bd4:	03 c0       	rjmp	.+6      	; 0xbdc <vfprintf+0x146>
     bd6:	69 2d       	mov	r22, r9
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	02 c0       	rjmp	.+4      	; 0xbe0 <vfprintf+0x14a>
     bdc:	6f ef       	ldi	r22, 0xFF	; 255
     bde:	7f ef       	ldi	r23, 0xFF	; 255
     be0:	c5 01       	movw	r24, r10
     be2:	0e 94 37 07 	call	0xe6e	; 0xe6e <strnlen>
     be6:	4c 01       	movw	r8, r24
     be8:	82 01       	movw	r16, r4
     bea:	f3 2d       	mov	r31, r3
     bec:	ff 77       	andi	r31, 0x7F	; 127
     bee:	3f 2e       	mov	r3, r31
     bf0:	16 c0       	rjmp	.+44     	; 0xc1e <vfprintf+0x188>
     bf2:	28 01       	movw	r4, r16
     bf4:	22 e0       	ldi	r18, 0x02	; 2
     bf6:	42 0e       	add	r4, r18
     bf8:	51 1c       	adc	r5, r1
     bfa:	f8 01       	movw	r30, r16
     bfc:	a0 80       	ld	r10, Z
     bfe:	b1 80       	ldd	r11, Z+1	; 0x01
     c00:	36 fe       	sbrs	r3, 6
     c02:	03 c0       	rjmp	.+6      	; 0xc0a <vfprintf+0x174>
     c04:	69 2d       	mov	r22, r9
     c06:	70 e0       	ldi	r23, 0x00	; 0
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <vfprintf+0x178>
     c0a:	6f ef       	ldi	r22, 0xFF	; 255
     c0c:	7f ef       	ldi	r23, 0xFF	; 255
     c0e:	c5 01       	movw	r24, r10
     c10:	0e 94 2c 07 	call	0xe58	; 0xe58 <strnlen_P>
     c14:	4c 01       	movw	r8, r24
     c16:	f3 2d       	mov	r31, r3
     c18:	f0 68       	ori	r31, 0x80	; 128
     c1a:	3f 2e       	mov	r3, r31
     c1c:	82 01       	movw	r16, r4
     c1e:	33 fc       	sbrc	r3, 3
     c20:	1b c0       	rjmp	.+54     	; 0xc58 <vfprintf+0x1c2>
     c22:	82 2d       	mov	r24, r2
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	88 16       	cp	r8, r24
     c28:	99 06       	cpc	r9, r25
     c2a:	b0 f4       	brcc	.+44     	; 0xc58 <vfprintf+0x1c2>
     c2c:	b6 01       	movw	r22, r12
     c2e:	80 e2       	ldi	r24, 0x20	; 32
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	0e 94 42 07 	call	0xe84	; 0xe84 <fputc>
     c36:	2a 94       	dec	r2
     c38:	f4 cf       	rjmp	.-24     	; 0xc22 <vfprintf+0x18c>
     c3a:	f5 01       	movw	r30, r10
     c3c:	37 fc       	sbrc	r3, 7
     c3e:	85 91       	lpm	r24, Z+
     c40:	37 fe       	sbrs	r3, 7
     c42:	81 91       	ld	r24, Z+
     c44:	5f 01       	movw	r10, r30
     c46:	b6 01       	movw	r22, r12
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	0e 94 42 07 	call	0xe84	; 0xe84 <fputc>
     c4e:	21 10       	cpse	r2, r1
     c50:	2a 94       	dec	r2
     c52:	21 e0       	ldi	r18, 0x01	; 1
     c54:	82 1a       	sub	r8, r18
     c56:	91 08       	sbc	r9, r1
     c58:	81 14       	cp	r8, r1
     c5a:	91 04       	cpc	r9, r1
     c5c:	71 f7       	brne	.-36     	; 0xc3a <vfprintf+0x1a4>
     c5e:	e8 c0       	rjmp	.+464    	; 0xe30 <vfprintf+0x39a>
     c60:	84 36       	cpi	r24, 0x64	; 100
     c62:	11 f0       	breq	.+4      	; 0xc68 <vfprintf+0x1d2>
     c64:	89 36       	cpi	r24, 0x69	; 105
     c66:	41 f5       	brne	.+80     	; 0xcb8 <vfprintf+0x222>
     c68:	f8 01       	movw	r30, r16
     c6a:	37 fe       	sbrs	r3, 7
     c6c:	07 c0       	rjmp	.+14     	; 0xc7c <vfprintf+0x1e6>
     c6e:	60 81       	ld	r22, Z
     c70:	71 81       	ldd	r23, Z+1	; 0x01
     c72:	82 81       	ldd	r24, Z+2	; 0x02
     c74:	93 81       	ldd	r25, Z+3	; 0x03
     c76:	0c 5f       	subi	r16, 0xFC	; 252
     c78:	1f 4f       	sbci	r17, 0xFF	; 255
     c7a:	08 c0       	rjmp	.+16     	; 0xc8c <vfprintf+0x1f6>
     c7c:	60 81       	ld	r22, Z
     c7e:	71 81       	ldd	r23, Z+1	; 0x01
     c80:	07 2e       	mov	r0, r23
     c82:	00 0c       	add	r0, r0
     c84:	88 0b       	sbc	r24, r24
     c86:	99 0b       	sbc	r25, r25
     c88:	0e 5f       	subi	r16, 0xFE	; 254
     c8a:	1f 4f       	sbci	r17, 0xFF	; 255
     c8c:	f3 2d       	mov	r31, r3
     c8e:	ff 76       	andi	r31, 0x6F	; 111
     c90:	3f 2e       	mov	r3, r31
     c92:	97 ff       	sbrs	r25, 7
     c94:	09 c0       	rjmp	.+18     	; 0xca8 <vfprintf+0x212>
     c96:	90 95       	com	r25
     c98:	80 95       	com	r24
     c9a:	70 95       	com	r23
     c9c:	61 95       	neg	r22
     c9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ca0:	8f 4f       	sbci	r24, 0xFF	; 255
     ca2:	9f 4f       	sbci	r25, 0xFF	; 255
     ca4:	f0 68       	ori	r31, 0x80	; 128
     ca6:	3f 2e       	mov	r3, r31
     ca8:	2a e0       	ldi	r18, 0x0A	; 10
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	a3 01       	movw	r20, r6
     cae:	0e 94 7e 07 	call	0xefc	; 0xefc <__ultoa_invert>
     cb2:	88 2e       	mov	r8, r24
     cb4:	86 18       	sub	r8, r6
     cb6:	45 c0       	rjmp	.+138    	; 0xd42 <vfprintf+0x2ac>
     cb8:	85 37       	cpi	r24, 0x75	; 117
     cba:	31 f4       	brne	.+12     	; 0xcc8 <vfprintf+0x232>
     cbc:	23 2d       	mov	r18, r3
     cbe:	2f 7e       	andi	r18, 0xEF	; 239
     cc0:	b2 2e       	mov	r11, r18
     cc2:	2a e0       	ldi	r18, 0x0A	; 10
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	25 c0       	rjmp	.+74     	; 0xd12 <vfprintf+0x27c>
     cc8:	93 2d       	mov	r25, r3
     cca:	99 7f       	andi	r25, 0xF9	; 249
     ccc:	b9 2e       	mov	r11, r25
     cce:	8f 36       	cpi	r24, 0x6F	; 111
     cd0:	c1 f0       	breq	.+48     	; 0xd02 <vfprintf+0x26c>
     cd2:	18 f4       	brcc	.+6      	; 0xcda <vfprintf+0x244>
     cd4:	88 35       	cpi	r24, 0x58	; 88
     cd6:	79 f0       	breq	.+30     	; 0xcf6 <vfprintf+0x260>
     cd8:	b5 c0       	rjmp	.+362    	; 0xe44 <vfprintf+0x3ae>
     cda:	80 37       	cpi	r24, 0x70	; 112
     cdc:	19 f0       	breq	.+6      	; 0xce4 <vfprintf+0x24e>
     cde:	88 37       	cpi	r24, 0x78	; 120
     ce0:	21 f0       	breq	.+8      	; 0xcea <vfprintf+0x254>
     ce2:	b0 c0       	rjmp	.+352    	; 0xe44 <vfprintf+0x3ae>
     ce4:	e9 2f       	mov	r30, r25
     ce6:	e0 61       	ori	r30, 0x10	; 16
     ce8:	be 2e       	mov	r11, r30
     cea:	b4 fe       	sbrs	r11, 4
     cec:	0d c0       	rjmp	.+26     	; 0xd08 <vfprintf+0x272>
     cee:	fb 2d       	mov	r31, r11
     cf0:	f4 60       	ori	r31, 0x04	; 4
     cf2:	bf 2e       	mov	r11, r31
     cf4:	09 c0       	rjmp	.+18     	; 0xd08 <vfprintf+0x272>
     cf6:	34 fe       	sbrs	r3, 4
     cf8:	0a c0       	rjmp	.+20     	; 0xd0e <vfprintf+0x278>
     cfa:	29 2f       	mov	r18, r25
     cfc:	26 60       	ori	r18, 0x06	; 6
     cfe:	b2 2e       	mov	r11, r18
     d00:	06 c0       	rjmp	.+12     	; 0xd0e <vfprintf+0x278>
     d02:	28 e0       	ldi	r18, 0x08	; 8
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	05 c0       	rjmp	.+10     	; 0xd12 <vfprintf+0x27c>
     d08:	20 e1       	ldi	r18, 0x10	; 16
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <vfprintf+0x27c>
     d0e:	20 e1       	ldi	r18, 0x10	; 16
     d10:	32 e0       	ldi	r19, 0x02	; 2
     d12:	f8 01       	movw	r30, r16
     d14:	b7 fe       	sbrs	r11, 7
     d16:	07 c0       	rjmp	.+14     	; 0xd26 <vfprintf+0x290>
     d18:	60 81       	ld	r22, Z
     d1a:	71 81       	ldd	r23, Z+1	; 0x01
     d1c:	82 81       	ldd	r24, Z+2	; 0x02
     d1e:	93 81       	ldd	r25, Z+3	; 0x03
     d20:	0c 5f       	subi	r16, 0xFC	; 252
     d22:	1f 4f       	sbci	r17, 0xFF	; 255
     d24:	06 c0       	rjmp	.+12     	; 0xd32 <vfprintf+0x29c>
     d26:	60 81       	ld	r22, Z
     d28:	71 81       	ldd	r23, Z+1	; 0x01
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	0e 5f       	subi	r16, 0xFE	; 254
     d30:	1f 4f       	sbci	r17, 0xFF	; 255
     d32:	a3 01       	movw	r20, r6
     d34:	0e 94 7e 07 	call	0xefc	; 0xefc <__ultoa_invert>
     d38:	88 2e       	mov	r8, r24
     d3a:	86 18       	sub	r8, r6
     d3c:	fb 2d       	mov	r31, r11
     d3e:	ff 77       	andi	r31, 0x7F	; 127
     d40:	3f 2e       	mov	r3, r31
     d42:	36 fe       	sbrs	r3, 6
     d44:	0d c0       	rjmp	.+26     	; 0xd60 <vfprintf+0x2ca>
     d46:	23 2d       	mov	r18, r3
     d48:	2e 7f       	andi	r18, 0xFE	; 254
     d4a:	a2 2e       	mov	r10, r18
     d4c:	89 14       	cp	r8, r9
     d4e:	58 f4       	brcc	.+22     	; 0xd66 <vfprintf+0x2d0>
     d50:	34 fe       	sbrs	r3, 4
     d52:	0b c0       	rjmp	.+22     	; 0xd6a <vfprintf+0x2d4>
     d54:	32 fc       	sbrc	r3, 2
     d56:	09 c0       	rjmp	.+18     	; 0xd6a <vfprintf+0x2d4>
     d58:	83 2d       	mov	r24, r3
     d5a:	8e 7e       	andi	r24, 0xEE	; 238
     d5c:	a8 2e       	mov	r10, r24
     d5e:	05 c0       	rjmp	.+10     	; 0xd6a <vfprintf+0x2d4>
     d60:	b8 2c       	mov	r11, r8
     d62:	a3 2c       	mov	r10, r3
     d64:	03 c0       	rjmp	.+6      	; 0xd6c <vfprintf+0x2d6>
     d66:	b8 2c       	mov	r11, r8
     d68:	01 c0       	rjmp	.+2      	; 0xd6c <vfprintf+0x2d6>
     d6a:	b9 2c       	mov	r11, r9
     d6c:	a4 fe       	sbrs	r10, 4
     d6e:	0f c0       	rjmp	.+30     	; 0xd8e <vfprintf+0x2f8>
     d70:	fe 01       	movw	r30, r28
     d72:	e8 0d       	add	r30, r8
     d74:	f1 1d       	adc	r31, r1
     d76:	80 81       	ld	r24, Z
     d78:	80 33       	cpi	r24, 0x30	; 48
     d7a:	21 f4       	brne	.+8      	; 0xd84 <vfprintf+0x2ee>
     d7c:	9a 2d       	mov	r25, r10
     d7e:	99 7e       	andi	r25, 0xE9	; 233
     d80:	a9 2e       	mov	r10, r25
     d82:	09 c0       	rjmp	.+18     	; 0xd96 <vfprintf+0x300>
     d84:	a2 fe       	sbrs	r10, 2
     d86:	06 c0       	rjmp	.+12     	; 0xd94 <vfprintf+0x2fe>
     d88:	b3 94       	inc	r11
     d8a:	b3 94       	inc	r11
     d8c:	04 c0       	rjmp	.+8      	; 0xd96 <vfprintf+0x300>
     d8e:	8a 2d       	mov	r24, r10
     d90:	86 78       	andi	r24, 0x86	; 134
     d92:	09 f0       	breq	.+2      	; 0xd96 <vfprintf+0x300>
     d94:	b3 94       	inc	r11
     d96:	a3 fc       	sbrc	r10, 3
     d98:	11 c0       	rjmp	.+34     	; 0xdbc <vfprintf+0x326>
     d9a:	a0 fe       	sbrs	r10, 0
     d9c:	06 c0       	rjmp	.+12     	; 0xdaa <vfprintf+0x314>
     d9e:	b2 14       	cp	r11, r2
     da0:	88 f4       	brcc	.+34     	; 0xdc4 <vfprintf+0x32e>
     da2:	28 0c       	add	r2, r8
     da4:	92 2c       	mov	r9, r2
     da6:	9b 18       	sub	r9, r11
     da8:	0e c0       	rjmp	.+28     	; 0xdc6 <vfprintf+0x330>
     daa:	b2 14       	cp	r11, r2
     dac:	60 f4       	brcc	.+24     	; 0xdc6 <vfprintf+0x330>
     dae:	b6 01       	movw	r22, r12
     db0:	80 e2       	ldi	r24, 0x20	; 32
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 42 07 	call	0xe84	; 0xe84 <fputc>
     db8:	b3 94       	inc	r11
     dba:	f7 cf       	rjmp	.-18     	; 0xdaa <vfprintf+0x314>
     dbc:	b2 14       	cp	r11, r2
     dbe:	18 f4       	brcc	.+6      	; 0xdc6 <vfprintf+0x330>
     dc0:	2b 18       	sub	r2, r11
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <vfprintf+0x332>
     dc4:	98 2c       	mov	r9, r8
     dc6:	21 2c       	mov	r2, r1
     dc8:	a4 fe       	sbrs	r10, 4
     dca:	10 c0       	rjmp	.+32     	; 0xdec <vfprintf+0x356>
     dcc:	b6 01       	movw	r22, r12
     dce:	80 e3       	ldi	r24, 0x30	; 48
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	0e 94 42 07 	call	0xe84	; 0xe84 <fputc>
     dd6:	a2 fe       	sbrs	r10, 2
     dd8:	17 c0       	rjmp	.+46     	; 0xe08 <vfprintf+0x372>
     dda:	a1 fc       	sbrc	r10, 1
     ddc:	03 c0       	rjmp	.+6      	; 0xde4 <vfprintf+0x34e>
     dde:	88 e7       	ldi	r24, 0x78	; 120
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <vfprintf+0x352>
     de4:	88 e5       	ldi	r24, 0x58	; 88
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	b6 01       	movw	r22, r12
     dea:	0c c0       	rjmp	.+24     	; 0xe04 <vfprintf+0x36e>
     dec:	8a 2d       	mov	r24, r10
     dee:	86 78       	andi	r24, 0x86	; 134
     df0:	59 f0       	breq	.+22     	; 0xe08 <vfprintf+0x372>
     df2:	a1 fe       	sbrs	r10, 1
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <vfprintf+0x364>
     df6:	8b e2       	ldi	r24, 0x2B	; 43
     df8:	01 c0       	rjmp	.+2      	; 0xdfc <vfprintf+0x366>
     dfa:	80 e2       	ldi	r24, 0x20	; 32
     dfc:	a7 fc       	sbrc	r10, 7
     dfe:	8d e2       	ldi	r24, 0x2D	; 45
     e00:	b6 01       	movw	r22, r12
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	0e 94 42 07 	call	0xe84	; 0xe84 <fputc>
     e08:	89 14       	cp	r8, r9
     e0a:	38 f4       	brcc	.+14     	; 0xe1a <vfprintf+0x384>
     e0c:	b6 01       	movw	r22, r12
     e0e:	80 e3       	ldi	r24, 0x30	; 48
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	0e 94 42 07 	call	0xe84	; 0xe84 <fputc>
     e16:	9a 94       	dec	r9
     e18:	f7 cf       	rjmp	.-18     	; 0xe08 <vfprintf+0x372>
     e1a:	8a 94       	dec	r8
     e1c:	f3 01       	movw	r30, r6
     e1e:	e8 0d       	add	r30, r8
     e20:	f1 1d       	adc	r31, r1
     e22:	80 81       	ld	r24, Z
     e24:	b6 01       	movw	r22, r12
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 42 07 	call	0xe84	; 0xe84 <fputc>
     e2c:	81 10       	cpse	r8, r1
     e2e:	f5 cf       	rjmp	.-22     	; 0xe1a <vfprintf+0x384>
     e30:	22 20       	and	r2, r2
     e32:	09 f4       	brne	.+2      	; 0xe36 <vfprintf+0x3a0>
     e34:	42 ce       	rjmp	.-892    	; 0xaba <vfprintf+0x24>
     e36:	b6 01       	movw	r22, r12
     e38:	80 e2       	ldi	r24, 0x20	; 32
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	0e 94 42 07 	call	0xe84	; 0xe84 <fputc>
     e40:	2a 94       	dec	r2
     e42:	f6 cf       	rjmp	.-20     	; 0xe30 <vfprintf+0x39a>
     e44:	f6 01       	movw	r30, r12
     e46:	86 81       	ldd	r24, Z+6	; 0x06
     e48:	97 81       	ldd	r25, Z+7	; 0x07
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <vfprintf+0x3ba>
     e4c:	8f ef       	ldi	r24, 0xFF	; 255
     e4e:	9f ef       	ldi	r25, 0xFF	; 255
     e50:	2b 96       	adiw	r28, 0x0b	; 11
     e52:	e2 e1       	ldi	r30, 0x12	; 18
     e54:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <__epilogue_restores__>

00000e58 <strnlen_P>:
     e58:	fc 01       	movw	r30, r24
     e5a:	05 90       	lpm	r0, Z+
     e5c:	61 50       	subi	r22, 0x01	; 1
     e5e:	70 40       	sbci	r23, 0x00	; 0
     e60:	01 10       	cpse	r0, r1
     e62:	d8 f7       	brcc	.-10     	; 0xe5a <strnlen_P+0x2>
     e64:	80 95       	com	r24
     e66:	90 95       	com	r25
     e68:	8e 0f       	add	r24, r30
     e6a:	9f 1f       	adc	r25, r31
     e6c:	08 95       	ret

00000e6e <strnlen>:
     e6e:	fc 01       	movw	r30, r24
     e70:	61 50       	subi	r22, 0x01	; 1
     e72:	70 40       	sbci	r23, 0x00	; 0
     e74:	01 90       	ld	r0, Z+
     e76:	01 10       	cpse	r0, r1
     e78:	d8 f7       	brcc	.-10     	; 0xe70 <strnlen+0x2>
     e7a:	80 95       	com	r24
     e7c:	90 95       	com	r25
     e7e:	8e 0f       	add	r24, r30
     e80:	9f 1f       	adc	r25, r31
     e82:	08 95       	ret

00000e84 <fputc>:
     e84:	0f 93       	push	r16
     e86:	1f 93       	push	r17
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	fb 01       	movw	r30, r22
     e8e:	23 81       	ldd	r18, Z+3	; 0x03
     e90:	21 fd       	sbrc	r18, 1
     e92:	03 c0       	rjmp	.+6      	; 0xe9a <fputc+0x16>
     e94:	8f ef       	ldi	r24, 0xFF	; 255
     e96:	9f ef       	ldi	r25, 0xFF	; 255
     e98:	2c c0       	rjmp	.+88     	; 0xef2 <fputc+0x6e>
     e9a:	22 ff       	sbrs	r18, 2
     e9c:	16 c0       	rjmp	.+44     	; 0xeca <fputc+0x46>
     e9e:	46 81       	ldd	r20, Z+6	; 0x06
     ea0:	57 81       	ldd	r21, Z+7	; 0x07
     ea2:	24 81       	ldd	r18, Z+4	; 0x04
     ea4:	35 81       	ldd	r19, Z+5	; 0x05
     ea6:	42 17       	cp	r20, r18
     ea8:	53 07       	cpc	r21, r19
     eaa:	44 f4       	brge	.+16     	; 0xebc <fputc+0x38>
     eac:	a0 81       	ld	r26, Z
     eae:	b1 81       	ldd	r27, Z+1	; 0x01
     eb0:	9d 01       	movw	r18, r26
     eb2:	2f 5f       	subi	r18, 0xFF	; 255
     eb4:	3f 4f       	sbci	r19, 0xFF	; 255
     eb6:	31 83       	std	Z+1, r19	; 0x01
     eb8:	20 83       	st	Z, r18
     eba:	8c 93       	st	X, r24
     ebc:	26 81       	ldd	r18, Z+6	; 0x06
     ebe:	37 81       	ldd	r19, Z+7	; 0x07
     ec0:	2f 5f       	subi	r18, 0xFF	; 255
     ec2:	3f 4f       	sbci	r19, 0xFF	; 255
     ec4:	37 83       	std	Z+7, r19	; 0x07
     ec6:	26 83       	std	Z+6, r18	; 0x06
     ec8:	14 c0       	rjmp	.+40     	; 0xef2 <fputc+0x6e>
     eca:	8b 01       	movw	r16, r22
     ecc:	ec 01       	movw	r28, r24
     ece:	fb 01       	movw	r30, r22
     ed0:	00 84       	ldd	r0, Z+8	; 0x08
     ed2:	f1 85       	ldd	r31, Z+9	; 0x09
     ed4:	e0 2d       	mov	r30, r0
     ed6:	09 95       	icall
     ed8:	89 2b       	or	r24, r25
     eda:	e1 f6       	brne	.-72     	; 0xe94 <fputc+0x10>
     edc:	d8 01       	movw	r26, r16
     ede:	16 96       	adiw	r26, 0x06	; 6
     ee0:	8d 91       	ld	r24, X+
     ee2:	9c 91       	ld	r25, X
     ee4:	17 97       	sbiw	r26, 0x07	; 7
     ee6:	01 96       	adiw	r24, 0x01	; 1
     ee8:	17 96       	adiw	r26, 0x07	; 7
     eea:	9c 93       	st	X, r25
     eec:	8e 93       	st	-X, r24
     eee:	16 97       	sbiw	r26, 0x06	; 6
     ef0:	ce 01       	movw	r24, r28
     ef2:	df 91       	pop	r29
     ef4:	cf 91       	pop	r28
     ef6:	1f 91       	pop	r17
     ef8:	0f 91       	pop	r16
     efa:	08 95       	ret

00000efc <__ultoa_invert>:
     efc:	fa 01       	movw	r30, r20
     efe:	aa 27       	eor	r26, r26
     f00:	28 30       	cpi	r18, 0x08	; 8
     f02:	51 f1       	breq	.+84     	; 0xf58 <__ultoa_invert+0x5c>
     f04:	20 31       	cpi	r18, 0x10	; 16
     f06:	81 f1       	breq	.+96     	; 0xf68 <__ultoa_invert+0x6c>
     f08:	e8 94       	clt
     f0a:	6f 93       	push	r22
     f0c:	6e 7f       	andi	r22, 0xFE	; 254
     f0e:	6e 5f       	subi	r22, 0xFE	; 254
     f10:	7f 4f       	sbci	r23, 0xFF	; 255
     f12:	8f 4f       	sbci	r24, 0xFF	; 255
     f14:	9f 4f       	sbci	r25, 0xFF	; 255
     f16:	af 4f       	sbci	r26, 0xFF	; 255
     f18:	b1 e0       	ldi	r27, 0x01	; 1
     f1a:	3e d0       	rcall	.+124    	; 0xf98 <__ultoa_invert+0x9c>
     f1c:	b4 e0       	ldi	r27, 0x04	; 4
     f1e:	3c d0       	rcall	.+120    	; 0xf98 <__ultoa_invert+0x9c>
     f20:	67 0f       	add	r22, r23
     f22:	78 1f       	adc	r23, r24
     f24:	89 1f       	adc	r24, r25
     f26:	9a 1f       	adc	r25, r26
     f28:	a1 1d       	adc	r26, r1
     f2a:	68 0f       	add	r22, r24
     f2c:	79 1f       	adc	r23, r25
     f2e:	8a 1f       	adc	r24, r26
     f30:	91 1d       	adc	r25, r1
     f32:	a1 1d       	adc	r26, r1
     f34:	6a 0f       	add	r22, r26
     f36:	71 1d       	adc	r23, r1
     f38:	81 1d       	adc	r24, r1
     f3a:	91 1d       	adc	r25, r1
     f3c:	a1 1d       	adc	r26, r1
     f3e:	20 d0       	rcall	.+64     	; 0xf80 <__ultoa_invert+0x84>
     f40:	09 f4       	brne	.+2      	; 0xf44 <__ultoa_invert+0x48>
     f42:	68 94       	set
     f44:	3f 91       	pop	r19
     f46:	2a e0       	ldi	r18, 0x0A	; 10
     f48:	26 9f       	mul	r18, r22
     f4a:	11 24       	eor	r1, r1
     f4c:	30 19       	sub	r19, r0
     f4e:	30 5d       	subi	r19, 0xD0	; 208
     f50:	31 93       	st	Z+, r19
     f52:	de f6       	brtc	.-74     	; 0xf0a <__ultoa_invert+0xe>
     f54:	cf 01       	movw	r24, r30
     f56:	08 95       	ret
     f58:	46 2f       	mov	r20, r22
     f5a:	47 70       	andi	r20, 0x07	; 7
     f5c:	40 5d       	subi	r20, 0xD0	; 208
     f5e:	41 93       	st	Z+, r20
     f60:	b3 e0       	ldi	r27, 0x03	; 3
     f62:	0f d0       	rcall	.+30     	; 0xf82 <__ultoa_invert+0x86>
     f64:	c9 f7       	brne	.-14     	; 0xf58 <__ultoa_invert+0x5c>
     f66:	f6 cf       	rjmp	.-20     	; 0xf54 <__ultoa_invert+0x58>
     f68:	46 2f       	mov	r20, r22
     f6a:	4f 70       	andi	r20, 0x0F	; 15
     f6c:	40 5d       	subi	r20, 0xD0	; 208
     f6e:	4a 33       	cpi	r20, 0x3A	; 58
     f70:	18 f0       	brcs	.+6      	; 0xf78 <__ultoa_invert+0x7c>
     f72:	49 5d       	subi	r20, 0xD9	; 217
     f74:	31 fd       	sbrc	r19, 1
     f76:	40 52       	subi	r20, 0x20	; 32
     f78:	41 93       	st	Z+, r20
     f7a:	02 d0       	rcall	.+4      	; 0xf80 <__ultoa_invert+0x84>
     f7c:	a9 f7       	brne	.-22     	; 0xf68 <__ultoa_invert+0x6c>
     f7e:	ea cf       	rjmp	.-44     	; 0xf54 <__ultoa_invert+0x58>
     f80:	b4 e0       	ldi	r27, 0x04	; 4
     f82:	a6 95       	lsr	r26
     f84:	97 95       	ror	r25
     f86:	87 95       	ror	r24
     f88:	77 95       	ror	r23
     f8a:	67 95       	ror	r22
     f8c:	ba 95       	dec	r27
     f8e:	c9 f7       	brne	.-14     	; 0xf82 <__ultoa_invert+0x86>
     f90:	00 97       	sbiw	r24, 0x00	; 0
     f92:	61 05       	cpc	r22, r1
     f94:	71 05       	cpc	r23, r1
     f96:	08 95       	ret
     f98:	9b 01       	movw	r18, r22
     f9a:	ac 01       	movw	r20, r24
     f9c:	0a 2e       	mov	r0, r26
     f9e:	06 94       	lsr	r0
     fa0:	57 95       	ror	r21
     fa2:	47 95       	ror	r20
     fa4:	37 95       	ror	r19
     fa6:	27 95       	ror	r18
     fa8:	ba 95       	dec	r27
     faa:	c9 f7       	brne	.-14     	; 0xf9e <__ultoa_invert+0xa2>
     fac:	62 0f       	add	r22, r18
     fae:	73 1f       	adc	r23, r19
     fb0:	84 1f       	adc	r24, r20
     fb2:	95 1f       	adc	r25, r21
     fb4:	a0 1d       	adc	r26, r0
     fb6:	08 95       	ret

00000fb8 <__prologue_saves__>:
     fb8:	2f 92       	push	r2
     fba:	3f 92       	push	r3
     fbc:	4f 92       	push	r4
     fbe:	5f 92       	push	r5
     fc0:	6f 92       	push	r6
     fc2:	7f 92       	push	r7
     fc4:	8f 92       	push	r8
     fc6:	9f 92       	push	r9
     fc8:	af 92       	push	r10
     fca:	bf 92       	push	r11
     fcc:	cf 92       	push	r12
     fce:	df 92       	push	r13
     fd0:	ef 92       	push	r14
     fd2:	ff 92       	push	r15
     fd4:	0f 93       	push	r16
     fd6:	1f 93       	push	r17
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	ca 1b       	sub	r28, r26
     fe2:	db 0b       	sbc	r29, r27
     fe4:	0f b6       	in	r0, 0x3f	; 63
     fe6:	f8 94       	cli
     fe8:	de bf       	out	0x3e, r29	; 62
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	cd bf       	out	0x3d, r28	; 61
     fee:	09 94       	ijmp

00000ff0 <__epilogue_restores__>:
     ff0:	2a 88       	ldd	r2, Y+18	; 0x12
     ff2:	39 88       	ldd	r3, Y+17	; 0x11
     ff4:	48 88       	ldd	r4, Y+16	; 0x10
     ff6:	5f 84       	ldd	r5, Y+15	; 0x0f
     ff8:	6e 84       	ldd	r6, Y+14	; 0x0e
     ffa:	7d 84       	ldd	r7, Y+13	; 0x0d
     ffc:	8c 84       	ldd	r8, Y+12	; 0x0c
     ffe:	9b 84       	ldd	r9, Y+11	; 0x0b
    1000:	aa 84       	ldd	r10, Y+10	; 0x0a
    1002:	b9 84       	ldd	r11, Y+9	; 0x09
    1004:	c8 84       	ldd	r12, Y+8	; 0x08
    1006:	df 80       	ldd	r13, Y+7	; 0x07
    1008:	ee 80       	ldd	r14, Y+6	; 0x06
    100a:	fd 80       	ldd	r15, Y+5	; 0x05
    100c:	0c 81       	ldd	r16, Y+4	; 0x04
    100e:	1b 81       	ldd	r17, Y+3	; 0x03
    1010:	aa 81       	ldd	r26, Y+2	; 0x02
    1012:	b9 81       	ldd	r27, Y+1	; 0x01
    1014:	ce 0f       	add	r28, r30
    1016:	d1 1d       	adc	r29, r1
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	ed 01       	movw	r28, r26
    1024:	08 95       	ret

00001026 <_exit>:
    1026:	f8 94       	cli

00001028 <__stop_program>:
    1028:	ff cf       	rjmp	.-2      	; 0x1028 <__stop_program>
