
Atmega32_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000286  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800060  00800060  000002fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c98  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a6  00000000  00000000  00001108  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000078b  00000000  00000000  000018ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000308  00000000  00000000  0000203c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000073b  00000000  00000000  00002344  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000061d  00000000  00000000  00002a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000309c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_2>
   c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__vector_10>
  2c:	0c 94 09 01 	jmp	0x212	; 0x212 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e8       	ldi	r30, 0x86	; 134
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c4 00 	call	0x188	; 0x188 <main>
  8a:	0c 94 41 01 	jmp	0x282	; 0x282 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
	}
}

// Interrupt service routine for INT0
ISR (INT0_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
	if (EXTI0_CallBack != NULL)
  b4:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <EXTI0_CallBack>
  b8:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <EXTI0_CallBack+0x1>
  bc:	30 97       	sbiw	r30, 0x00	; 0
  be:	09 f0       	breq	.+2      	; 0xc2 <__vector_1+0x30>
	{
		EXTI0_CallBack();
  c0:	09 95       	icall
	}
}
  c2:	ff 91       	pop	r31
  c4:	ef 91       	pop	r30
  c6:	bf 91       	pop	r27
  c8:	af 91       	pop	r26
  ca:	9f 91       	pop	r25
  cc:	8f 91       	pop	r24
  ce:	7f 91       	pop	r23
  d0:	6f 91       	pop	r22
  d2:	5f 91       	pop	r21
  d4:	4f 91       	pop	r20
  d6:	3f 91       	pop	r19
  d8:	2f 91       	pop	r18
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <__vector_2>:
// Interrupt service routine for INT1
ISR (INT1_vect)
{
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	2f 93       	push	r18
  f0:	3f 93       	push	r19
  f2:	4f 93       	push	r20
  f4:	5f 93       	push	r21
  f6:	6f 93       	push	r22
  f8:	7f 93       	push	r23
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
  fe:	af 93       	push	r26
 100:	bf 93       	push	r27
 102:	ef 93       	push	r30
 104:	ff 93       	push	r31
	if (EXTI1_CallBack != NULL)
 106:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 10a:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 10e:	30 97       	sbiw	r30, 0x00	; 0
 110:	09 f0       	breq	.+2      	; 0x114 <__vector_2+0x30>
	{
		EXTI1_CallBack();
 112:	09 95       	icall
	}
}
 114:	ff 91       	pop	r31
 116:	ef 91       	pop	r30
 118:	bf 91       	pop	r27
 11a:	af 91       	pop	r26
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	7f 91       	pop	r23
 122:	6f 91       	pop	r22
 124:	5f 91       	pop	r21
 126:	4f 91       	pop	r20
 128:	3f 91       	pop	r19
 12a:	2f 91       	pop	r18
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <__vector_3>:

// Interrupt service routine for INT2
ISR (INT2_vect)
{
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	2f 93       	push	r18
 142:	3f 93       	push	r19
 144:	4f 93       	push	r20
 146:	5f 93       	push	r21
 148:	6f 93       	push	r22
 14a:	7f 93       	push	r23
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	af 93       	push	r26
 152:	bf 93       	push	r27
 154:	ef 93       	push	r30
 156:	ff 93       	push	r31
	if (EXTI2_CallBack != NULL)
 158:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <EXTI2_CallBack>
 15c:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <EXTI2_CallBack+0x1>
 160:	30 97       	sbiw	r30, 0x00	; 0
 162:	09 f0       	breq	.+2      	; 0x166 <__vector_3+0x30>
	{
		EXTI2_CallBack();
 164:	09 95       	icall
	}
 166:	ff 91       	pop	r31
 168:	ef 91       	pop	r30
 16a:	bf 91       	pop	r27
 16c:	af 91       	pop	r26
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	7f 91       	pop	r23
 174:	6f 91       	pop	r22
 176:	5f 91       	pop	r21
 178:	4f 91       	pop	r20
 17a:	3f 91       	pop	r19
 17c:	2f 91       	pop	r18
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <main>:
#include "WDT.h"
#include "Macros.h"
#include <util/delay.h>
int main(void)
{	
	SET_BIT(DDRC,0);
 188:	84 b3       	in	r24, 0x14	; 20
 18a:	95 b3       	in	r25, 0x15	; 21
 18c:	81 60       	ori	r24, 0x01	; 1
 18e:	95 bb       	out	0x15, r25	; 21
 190:	84 bb       	out	0x14, r24	; 20
	while(1)
	{
		WDT_ON();
 192:	0e 94 3a 01 	call	0x274	; 0x274 <WDT_ON>
		TOG_BIT(PORTC,0);
 196:	85 b3       	in	r24, 0x15	; 21
 198:	96 b3       	in	r25, 0x16	; 22
 19a:	21 e0       	ldi	r18, 0x01	; 1
 19c:	82 27       	eor	r24, r18
 19e:	96 bb       	out	0x16, r25	; 22
 1a0:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a2:	8f ef       	ldi	r24, 0xFF	; 255
 1a4:	91 e1       	ldi	r25, 0x11	; 17
 1a6:	2a e7       	ldi	r18, 0x7A	; 122
 1a8:	81 50       	subi	r24, 0x01	; 1
 1aa:	90 40       	sbci	r25, 0x00	; 0
 1ac:	20 40       	sbci	r18, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <main+0x20>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <main+0x2a>
 1b2:	00 00       	nop
		_delay_ms(5000);
		WDT_OFF();
 1b4:	0e 94 35 01 	call	0x26a	; 0x26a <WDT_OFF>
 1b8:	ec cf       	rjmp	.-40     	; 0x192 <main+0xa>

000001ba <__vector_10>:
void PWM0_CALLBACK_CompareMatch_INTERRUPT(Timer0callback callback){
	PWM_CALLBACK_COMPARE=callback;
}

ISR(TIMER0_COMP_vect)
{
 1ba:	1f 92       	push	r1
 1bc:	0f 92       	push	r0
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	0f 92       	push	r0
 1c2:	11 24       	eor	r1, r1
 1c4:	2f 93       	push	r18
 1c6:	3f 93       	push	r19
 1c8:	4f 93       	push	r20
 1ca:	5f 93       	push	r21
 1cc:	6f 93       	push	r22
 1ce:	7f 93       	push	r23
 1d0:	8f 93       	push	r24
 1d2:	9f 93       	push	r25
 1d4:	af 93       	push	r26
 1d6:	bf 93       	push	r27
 1d8:	ef 93       	push	r30
 1da:	ff 93       	push	r31
	PWM_Compare_Number++;
 1dc:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <PWM_Compare_Number>
 1e0:	8f 5f       	subi	r24, 0xFF	; 255
 1e2:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <PWM_Compare_Number>
	PWM_CALLBACK_COMPARE();
 1e6:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <PWM_CALLBACK_COMPARE>
 1ea:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <PWM_CALLBACK_COMPARE+0x1>
 1ee:	09 95       	icall
}
 1f0:	ff 91       	pop	r31
 1f2:	ef 91       	pop	r30
 1f4:	bf 91       	pop	r27
 1f6:	af 91       	pop	r26
 1f8:	9f 91       	pop	r25
 1fa:	8f 91       	pop	r24
 1fc:	7f 91       	pop	r23
 1fe:	6f 91       	pop	r22
 200:	5f 91       	pop	r21
 202:	4f 91       	pop	r20
 204:	3f 91       	pop	r19
 206:	2f 91       	pop	r18
 208:	0f 90       	pop	r0
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	0f 90       	pop	r0
 20e:	1f 90       	pop	r1
 210:	18 95       	reti

00000212 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
 212:	1f 92       	push	r1
 214:	0f 92       	push	r0
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	0f 92       	push	r0
 21a:	11 24       	eor	r1, r1
 21c:	2f 93       	push	r18
 21e:	3f 93       	push	r19
 220:	4f 93       	push	r20
 222:	5f 93       	push	r21
 224:	6f 93       	push	r22
 226:	7f 93       	push	r23
 228:	8f 93       	push	r24
 22a:	9f 93       	push	r25
 22c:	af 93       	push	r26
 22e:	bf 93       	push	r27
 230:	ef 93       	push	r30
 232:	ff 93       	push	r31
	PWM_Over_Flow_Number++;
 234:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <PWM_Over_Flow_Number>
 238:	8f 5f       	subi	r24, 0xFF	; 255
 23a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <PWM_Over_Flow_Number>
	PWM_CALLBACK_OVER_FLOW();
 23e:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <PWM_CALLBACK_OVER_FLOW>
 242:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <PWM_CALLBACK_OVER_FLOW+0x1>
 246:	09 95       	icall
 248:	ff 91       	pop	r31
 24a:	ef 91       	pop	r30
 24c:	bf 91       	pop	r27
 24e:	af 91       	pop	r26
 250:	9f 91       	pop	r25
 252:	8f 91       	pop	r24
 254:	7f 91       	pop	r23
 256:	6f 91       	pop	r22
 258:	5f 91       	pop	r21
 25a:	4f 91       	pop	r20
 25c:	3f 91       	pop	r19
 25e:	2f 91       	pop	r18
 260:	0f 90       	pop	r0
 262:	0f be       	out	0x3f, r0	; 63
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <WDT_OFF>:
 */ 
#include "WDT.h"

void WDT_OFF(void)
{
	WDTCR |= (1<<4)|(1<<3);
 26a:	81 b5       	in	r24, 0x21	; 33
 26c:	88 61       	ori	r24, 0x18	; 24
 26e:	81 bd       	out	0x21, r24	; 33
	WDTCR =0x00;
 270:	11 bc       	out	0x21, r1	; 33
 272:	08 95       	ret

00000274 <WDT_ON>:
}

void WDT_ON(void)
{
	WDTCR |= (1 << 1) | (1 << 2) | (1 << 3);
 274:	81 b5       	in	r24, 0x21	; 33
 276:	8e 60       	ori	r24, 0x0E	; 14
 278:	81 bd       	out	0x21, r24	; 33
	CLR_BIT(WDTCR,0);
 27a:	81 b5       	in	r24, 0x21	; 33
 27c:	8e 7f       	andi	r24, 0xFE	; 254
 27e:	81 bd       	out	0x21, r24	; 33
 280:	08 95       	ret

00000282 <_exit>:
 282:	f8 94       	cli

00000284 <__stop_program>:
 284:	ff cf       	rjmp	.-2      	; 0x284 <__stop_program>
